Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGNMENT_OPERATOR
    BINARY_ASSIGNMENT
    BITWISE_OPERATOR
    BREAK
    CASE
    COLON
    COMMENT
    CONTINUE
    DEFAULT
    DEFER
    DELIMITER
    FALLTHROUGH
    GO
    GOTO
    LOGICAL_ASSIGNMENT
    PACKAGE
    SELECT
    SWITCH

Grammar

Rule 0     S' -> program
Rule 1     expression -> INTEGER
Rule 2     expression -> FLOAT
Rule 3     expression -> STRING_LITERAL
Rule 4     expression -> ID
Rule 5     expression -> LPAREN expression RPAREN
Rule 6     expression -> expression ARITHMETIC_OPERATOR expression
Rule 7     expression_list -> expression
Rule 8     expression_list -> expression expression_list
Rule 9     expression -> expression OR expression
Rule 10    expression -> expression AND expression
Rule 11    expression -> NOT expression
Rule 12    expression -> expression COMPARISON_OPERATOR expression
Rule 13    arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression
Rule 14    unary_assignment -> ID UNARY_ASSIGNMENT
Rule 15    expression -> arithmetical_assignment
Rule 16    expression -> unary_assignment
Rule 17    expression -> type
Rule 18    type -> TYPE_BOOL
Rule 19    type -> TYPE_STRING
Rule 20    type -> TYPE_INT
Rule 21    type -> TYPE_INT8
Rule 22    type -> TYPE_INT16
Rule 23    type -> TYPE_INT32
Rule 24    type -> TYPE_INT64
Rule 25    type -> TYPE_UINT
Rule 26    type -> TYPE_UINT8
Rule 27    type -> TYPE_UINT16
Rule 28    type -> TYPE_UINT32
Rule 29    type -> TYPE_UINT64
Rule 30    type -> TYPE_UINTPTR
Rule 31    type -> TYPE_FLOAT32
Rule 32    type -> TYPE_FLOAT64
Rule 33    type -> TYPE_COMPLEX64
Rule 34    type -> TYPE_COMPLEX128
Rule 35    type_lit -> array_type
Rule 36    type_lit -> slice_type
Rule 37    type_lit -> struct_type
Rule 38    type_lit -> pointer_type
Rule 39    type_lit -> function_type
Rule 40    type_lit -> interface_type
Rule 41    type_lit -> map_type
Rule 42    type_lit -> channel_type
Rule 43    type -> type_lit
Rule 44    array_type -> LBRACKET expression RBRACKET type
Rule 45    slice_type -> LBRACKET RBRACKET type
Rule 46    struct_type -> STRUCT LBRACE RBRACE
Rule 47    struct_type -> STRUCT LBRACE field_decl RBRACE
Rule 48    field_decl -> identifier_list type string_lit
Rule 49    field_decl -> identifier_list type
Rule 50    field_decl -> embedded_field string_lit
Rule 51    field_decl -> embedded_field
Rule 52    identifier_list -> ID
Rule 53    identifier_list -> ID COMMA identifier_list
Rule 54    embedded_field -> ASTERISKS ID
Rule 55    string_lit -> STRING_LITERAL
Rule 56    pointer_type -> ASTERISKS type
Rule 57    function_type -> FUNC signature
Rule 58    signature -> parameters
Rule 59    signature -> parameters result
Rule 60    result -> parameters
Rule 61    result -> type
Rule 62    result -> LPAREN type RPAREN
Rule 63    parameters -> LPAREN RPAREN
Rule 64    parameters -> LPAREN parameter_list RPAREN
Rule 65    parameter_list -> parameter_decl
Rule 66    parameter_list -> parameter_decl COMMA parameter_list
Rule 67    parameter_decl -> identifier_list
Rule 68    parameter_decl -> identifier_list type
Rule 69    parameter_decl -> ELLIPSIS type
Rule 70    parameter_decl -> identifier_list ELLIPSIS type
Rule 71    interface_type -> INTERFACE LBRACE method_spec RBRACE
Rule 72    method_spec -> method_name signature
Rule 73    method_spec -> interface_type_name
Rule 74    method_name -> ID
Rule 75    interface_type_name -> ID
Rule 76    map_type -> MAP LBRACKET key_type RBRACKET type
Rule 77    key_type -> type
Rule 78    channel_type -> CHAN type
Rule 79    channel_type -> CHAN CHANNEL_OPERATOR type
Rule 80    channel_type -> CHANNEL_OPERATOR CHAN type
Rule 81    declaration -> const_decl
Rule 82    declaration -> type_decl
Rule 83    declaration -> var_decl
Rule 84    declaration -> func_decl
Rule 85    declaration -> import_decl
Rule 86    expression -> declaration
Rule 87    const_decl -> CONST const_spec
Rule 88    const_decl -> CONST LPAREN const_spec RPAREN
Rule 89    const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list
Rule 90    const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list
Rule 91    type_decl -> TYPE type_spec
Rule 92    type_decl -> TYPE LPAREN type_spec RPAREN
Rule 93    type_spec -> alias_decl
Rule 94    type_spec -> type_def
Rule 95    alias_decl -> ID NORMAL_ASSIGNMENT type
Rule 96    type_def -> ID type
Rule 97    var_decl -> VAR var_spec
Rule 98    var_decl -> VAR LPAREN var_spec RPAREN
Rule 99    var_spec -> identifier_list type
Rule 100   var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list
Rule 101   var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list
Rule 102   func_decl -> FUNC ID signature
Rule 103   func_decl -> FUNC ID signature block
Rule 104   import_decl -> IMPORT string_lit
Rule 105   import_decl -> IMPORT LPAREN string_lit RPAREN
Rule 106   statement -> if_statement
Rule 107   statement -> for_statement
Rule 108   statement -> assignment_statement
Rule 109   statement -> return_statement
Rule 110   expression -> statement
Rule 111   block -> LBRACE expression_list RBRACE
Rule 112   if_statement -> IF expression block
Rule 113   if_statement -> IF expression block ELSE block
Rule 114   for_statement -> FOR expression block
Rule 115   for_statement -> FOR for_clause block
Rule 116   for_statement -> FOR range_clause block
Rule 117   for_clause -> assignment_statement SEMICOLON expression SEMICOLON expression
Rule 118   assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list
Rule 119   range_clause -> expression_list NORMAL_ASSIGNMENT RANGE expression
Rule 120   range_clause -> identifier_list NORMAL_ASSIGNMENT RANGE expression
Rule 121   return_statement -> RETURN expression_list
Rule 122   program -> expression_list

Terminals, with rules where they appear

AND                  : 10
ARITHMETICAL_ASSIGNMENT : 13
ARITHMETIC_OPERATOR  : 6
ASSIGNMENT_OPERATOR  : 
ASTERISKS            : 54 56
BINARY_ASSIGNMENT    : 
BITWISE_OPERATOR     : 
BREAK                : 
CASE                 : 
CHAN                 : 78 79 80
CHANNEL_OPERATOR     : 79 80
COLON                : 
COMMA                : 53 66
COMMENT              : 
COMPARISON_OPERATOR  : 12
CONST                : 87 88
CONTINUE             : 
DEFAULT              : 
DEFER                : 
DELIMITER            : 
ELLIPSIS             : 69 70
ELSE                 : 113
FALLTHROUGH          : 
FLOAT                : 2
FOR                  : 114 115 116
FUNC                 : 57 102 103
GO                   : 
GOTO                 : 
ID                   : 4 13 14 52 53 54 74 75 95 96 102 103
IF                   : 112 113
IMPORT               : 104 105
INTEGER              : 1
INTERFACE            : 71
LBRACE               : 46 47 71 111
LBRACKET             : 44 45 76
LOGICAL_ASSIGNMENT   : 
LPAREN               : 5 62 63 64 88 92 98 105
MAP                  : 76
NORMAL_ASSIGNMENT    : 89 90 95 100 101 118 119 120
NOT                  : 11
OR                   : 9
PACKAGE              : 
RANGE                : 119 120
RBRACE               : 46 47 71 111
RBRACKET             : 44 45 76
RETURN               : 121
RPAREN               : 5 62 63 64 88 92 98 105
SELECT               : 
SEMICOLON            : 117 117
STRING_LITERAL       : 3 55
STRUCT               : 46 47
SWITCH               : 
TYPE                 : 91 92
TYPE_BOOL            : 18
TYPE_COMPLEX128      : 34
TYPE_COMPLEX64       : 33
TYPE_FLOAT32         : 31
TYPE_FLOAT64         : 32
TYPE_INT             : 20
TYPE_INT16           : 22
TYPE_INT32           : 23
TYPE_INT64           : 24
TYPE_INT8            : 21
TYPE_STRING          : 19
TYPE_UINT            : 25
TYPE_UINT16          : 27
TYPE_UINT32          : 28
TYPE_UINT64          : 29
TYPE_UINT8           : 26
TYPE_UINTPTR         : 30
UNARY_ASSIGNMENT     : 14
VAR                  : 97 98
error                : 

Nonterminals, with rules where they appear

alias_decl           : 93
arithmetical_assignment : 15
array_type           : 35
assignment_statement : 108 117
block                : 103 112 113 113 114 115 116
channel_type         : 42
const_decl           : 81
const_spec           : 87 88
declaration          : 86
embedded_field       : 50 51
expression           : 5 6 6 7 8 9 9 10 10 11 12 12 13 44 112 113 114 117 117 119 120
expression_list      : 8 89 90 100 101 111 118 118 119 121 122
field_decl           : 47
for_clause           : 115
for_statement        : 107
func_decl            : 84
function_type        : 39
identifier_list      : 48 49 53 67 68 70 89 90 99 100 101 120
if_statement         : 106
import_decl          : 85
interface_type       : 40
interface_type_name  : 73
key_type             : 76
map_type             : 41
method_name          : 72
method_spec          : 71
parameter_decl       : 65 66
parameter_list       : 64 66
parameters           : 58 59 60
pointer_type         : 38
program              : 0
range_clause         : 116
result               : 59
return_statement     : 109
signature            : 57 72 102 103
slice_type           : 36
statement            : 110
string_lit           : 48 50 104 105
struct_type          : 37
type                 : 17 44 45 48 49 56 61 62 68 69 70 76 77 78 79 80 90 95 96 99 100
type_decl            : 82
type_def             : 94
type_lit             : 43
type_spec            : 91 92
unary_assignment     : 16
var_decl             : 83
var_spec             : 97 98

Parsing method: LALR

state 0

    (0) S' -> . program
    (122) program -> . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    program                        shift and go to state 1
    expression_list                shift and go to state 2
    expression                     shift and go to state 3
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 1

    (0) S' -> program .



state 2

    (122) program -> expression_list .
    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

    $end            reduce using rule 122 (program -> expression_list .)
    NORMAL_ASSIGNMENT shift and go to state 65


state 3

    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TYPE_BOOL resolved as shift
  ! shift/reduce conflict for TYPE_STRING resolved as shift
  ! shift/reduce conflict for TYPE_INT resolved as shift
  ! shift/reduce conflict for TYPE_INT8 resolved as shift
  ! shift/reduce conflict for TYPE_INT16 resolved as shift
  ! shift/reduce conflict for TYPE_INT32 resolved as shift
  ! shift/reduce conflict for TYPE_INT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINT resolved as shift
  ! shift/reduce conflict for TYPE_UINT8 resolved as shift
  ! shift/reduce conflict for TYPE_UINT16 resolved as shift
  ! shift/reduce conflict for TYPE_UINT32 resolved as shift
  ! shift/reduce conflict for TYPE_UINT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINTPTR resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT32 resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX128 resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ASTERISKS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for CHAN resolved as shift
  ! shift/reduce conflict for CHANNEL_OPERATOR resolved as shift
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    $end            reduce using rule 7 (expression_list -> expression .)
    RPAREN          reduce using rule 7 (expression_list -> expression .)
    LBRACE          reduce using rule 7 (expression_list -> expression .)
    RBRACKET        reduce using rule 7 (expression_list -> expression .)
    RBRACE          reduce using rule 7 (expression_list -> expression .)
    SEMICOLON       reduce using rule 7 (expression_list -> expression .)
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

  ! ARITHMETIC_OPERATOR [ reduce using rule 7 (expression_list -> expression .) ]
  ! OR              [ reduce using rule 7 (expression_list -> expression .) ]
  ! AND             [ reduce using rule 7 (expression_list -> expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 7 (expression_list -> expression .) ]
  ! INTEGER         [ reduce using rule 7 (expression_list -> expression .) ]
  ! FLOAT           [ reduce using rule 7 (expression_list -> expression .) ]
  ! STRING_LITERAL  [ reduce using rule 7 (expression_list -> expression .) ]
  ! ID              [ reduce using rule 7 (expression_list -> expression .) ]
  ! LPAREN          [ reduce using rule 7 (expression_list -> expression .) ]
  ! NOT             [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_BOOL       [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_STRING     [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_INT        [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_INT8       [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_INT16      [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_INT32      [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_INT64      [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINT       [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINT8      [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINT16     [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINT32     [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINT64     [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINTPTR    [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_FLOAT32    [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_FLOAT64    [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 7 (expression_list -> expression .) ]
  ! CONST           [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE            [ reduce using rule 7 (expression_list -> expression .) ]
  ! VAR             [ reduce using rule 7 (expression_list -> expression .) ]
  ! FUNC            [ reduce using rule 7 (expression_list -> expression .) ]
  ! IMPORT          [ reduce using rule 7 (expression_list -> expression .) ]
  ! IF              [ reduce using rule 7 (expression_list -> expression .) ]
  ! FOR             [ reduce using rule 7 (expression_list -> expression .) ]
  ! RETURN          [ reduce using rule 7 (expression_list -> expression .) ]
  ! LBRACKET        [ reduce using rule 7 (expression_list -> expression .) ]
  ! STRUCT          [ reduce using rule 7 (expression_list -> expression .) ]
  ! ASTERISKS       [ reduce using rule 7 (expression_list -> expression .) ]
  ! INTERFACE       [ reduce using rule 7 (expression_list -> expression .) ]
  ! MAP             [ reduce using rule 7 (expression_list -> expression .) ]
  ! CHAN            [ reduce using rule 7 (expression_list -> expression .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 7 (expression_list -> expression .) ]

    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 4

    (1) expression -> INTEGER .

    ARITHMETIC_OPERATOR reduce using rule 1 (expression -> INTEGER .)
    OR              reduce using rule 1 (expression -> INTEGER .)
    AND             reduce using rule 1 (expression -> INTEGER .)
    COMPARISON_OPERATOR reduce using rule 1 (expression -> INTEGER .)
    INTEGER         reduce using rule 1 (expression -> INTEGER .)
    FLOAT           reduce using rule 1 (expression -> INTEGER .)
    STRING_LITERAL  reduce using rule 1 (expression -> INTEGER .)
    ID              reduce using rule 1 (expression -> INTEGER .)
    LPAREN          reduce using rule 1 (expression -> INTEGER .)
    NOT             reduce using rule 1 (expression -> INTEGER .)
    TYPE_BOOL       reduce using rule 1 (expression -> INTEGER .)
    TYPE_STRING     reduce using rule 1 (expression -> INTEGER .)
    TYPE_INT        reduce using rule 1 (expression -> INTEGER .)
    TYPE_INT8       reduce using rule 1 (expression -> INTEGER .)
    TYPE_INT16      reduce using rule 1 (expression -> INTEGER .)
    TYPE_INT32      reduce using rule 1 (expression -> INTEGER .)
    TYPE_INT64      reduce using rule 1 (expression -> INTEGER .)
    TYPE_UINT       reduce using rule 1 (expression -> INTEGER .)
    TYPE_UINT8      reduce using rule 1 (expression -> INTEGER .)
    TYPE_UINT16     reduce using rule 1 (expression -> INTEGER .)
    TYPE_UINT32     reduce using rule 1 (expression -> INTEGER .)
    TYPE_UINT64     reduce using rule 1 (expression -> INTEGER .)
    TYPE_UINTPTR    reduce using rule 1 (expression -> INTEGER .)
    TYPE_FLOAT32    reduce using rule 1 (expression -> INTEGER .)
    TYPE_FLOAT64    reduce using rule 1 (expression -> INTEGER .)
    TYPE_COMPLEX64  reduce using rule 1 (expression -> INTEGER .)
    TYPE_COMPLEX128 reduce using rule 1 (expression -> INTEGER .)
    CONST           reduce using rule 1 (expression -> INTEGER .)
    TYPE            reduce using rule 1 (expression -> INTEGER .)
    VAR             reduce using rule 1 (expression -> INTEGER .)
    FUNC            reduce using rule 1 (expression -> INTEGER .)
    IMPORT          reduce using rule 1 (expression -> INTEGER .)
    IF              reduce using rule 1 (expression -> INTEGER .)
    FOR             reduce using rule 1 (expression -> INTEGER .)
    RETURN          reduce using rule 1 (expression -> INTEGER .)
    LBRACKET        reduce using rule 1 (expression -> INTEGER .)
    STRUCT          reduce using rule 1 (expression -> INTEGER .)
    ASTERISKS       reduce using rule 1 (expression -> INTEGER .)
    INTERFACE       reduce using rule 1 (expression -> INTEGER .)
    MAP             reduce using rule 1 (expression -> INTEGER .)
    CHAN            reduce using rule 1 (expression -> INTEGER .)
    CHANNEL_OPERATOR reduce using rule 1 (expression -> INTEGER .)
    NORMAL_ASSIGNMENT reduce using rule 1 (expression -> INTEGER .)
    $end            reduce using rule 1 (expression -> INTEGER .)
    RPAREN          reduce using rule 1 (expression -> INTEGER .)
    LBRACE          reduce using rule 1 (expression -> INTEGER .)
    RBRACKET        reduce using rule 1 (expression -> INTEGER .)
    RBRACE          reduce using rule 1 (expression -> INTEGER .)
    SEMICOLON       reduce using rule 1 (expression -> INTEGER .)


state 5

    (2) expression -> FLOAT .

    ARITHMETIC_OPERATOR reduce using rule 2 (expression -> FLOAT .)
    OR              reduce using rule 2 (expression -> FLOAT .)
    AND             reduce using rule 2 (expression -> FLOAT .)
    COMPARISON_OPERATOR reduce using rule 2 (expression -> FLOAT .)
    INTEGER         reduce using rule 2 (expression -> FLOAT .)
    FLOAT           reduce using rule 2 (expression -> FLOAT .)
    STRING_LITERAL  reduce using rule 2 (expression -> FLOAT .)
    ID              reduce using rule 2 (expression -> FLOAT .)
    LPAREN          reduce using rule 2 (expression -> FLOAT .)
    NOT             reduce using rule 2 (expression -> FLOAT .)
    TYPE_BOOL       reduce using rule 2 (expression -> FLOAT .)
    TYPE_STRING     reduce using rule 2 (expression -> FLOAT .)
    TYPE_INT        reduce using rule 2 (expression -> FLOAT .)
    TYPE_INT8       reduce using rule 2 (expression -> FLOAT .)
    TYPE_INT16      reduce using rule 2 (expression -> FLOAT .)
    TYPE_INT32      reduce using rule 2 (expression -> FLOAT .)
    TYPE_INT64      reduce using rule 2 (expression -> FLOAT .)
    TYPE_UINT       reduce using rule 2 (expression -> FLOAT .)
    TYPE_UINT8      reduce using rule 2 (expression -> FLOAT .)
    TYPE_UINT16     reduce using rule 2 (expression -> FLOAT .)
    TYPE_UINT32     reduce using rule 2 (expression -> FLOAT .)
    TYPE_UINT64     reduce using rule 2 (expression -> FLOAT .)
    TYPE_UINTPTR    reduce using rule 2 (expression -> FLOAT .)
    TYPE_FLOAT32    reduce using rule 2 (expression -> FLOAT .)
    TYPE_FLOAT64    reduce using rule 2 (expression -> FLOAT .)
    TYPE_COMPLEX64  reduce using rule 2 (expression -> FLOAT .)
    TYPE_COMPLEX128 reduce using rule 2 (expression -> FLOAT .)
    CONST           reduce using rule 2 (expression -> FLOAT .)
    TYPE            reduce using rule 2 (expression -> FLOAT .)
    VAR             reduce using rule 2 (expression -> FLOAT .)
    FUNC            reduce using rule 2 (expression -> FLOAT .)
    IMPORT          reduce using rule 2 (expression -> FLOAT .)
    IF              reduce using rule 2 (expression -> FLOAT .)
    FOR             reduce using rule 2 (expression -> FLOAT .)
    RETURN          reduce using rule 2 (expression -> FLOAT .)
    LBRACKET        reduce using rule 2 (expression -> FLOAT .)
    STRUCT          reduce using rule 2 (expression -> FLOAT .)
    ASTERISKS       reduce using rule 2 (expression -> FLOAT .)
    INTERFACE       reduce using rule 2 (expression -> FLOAT .)
    MAP             reduce using rule 2 (expression -> FLOAT .)
    CHAN            reduce using rule 2 (expression -> FLOAT .)
    CHANNEL_OPERATOR reduce using rule 2 (expression -> FLOAT .)
    NORMAL_ASSIGNMENT reduce using rule 2 (expression -> FLOAT .)
    $end            reduce using rule 2 (expression -> FLOAT .)
    RPAREN          reduce using rule 2 (expression -> FLOAT .)
    LBRACE          reduce using rule 2 (expression -> FLOAT .)
    RBRACKET        reduce using rule 2 (expression -> FLOAT .)
    RBRACE          reduce using rule 2 (expression -> FLOAT .)
    SEMICOLON       reduce using rule 2 (expression -> FLOAT .)


state 6

    (3) expression -> STRING_LITERAL .

    ARITHMETIC_OPERATOR reduce using rule 3 (expression -> STRING_LITERAL .)
    OR              reduce using rule 3 (expression -> STRING_LITERAL .)
    AND             reduce using rule 3 (expression -> STRING_LITERAL .)
    COMPARISON_OPERATOR reduce using rule 3 (expression -> STRING_LITERAL .)
    INTEGER         reduce using rule 3 (expression -> STRING_LITERAL .)
    FLOAT           reduce using rule 3 (expression -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 3 (expression -> STRING_LITERAL .)
    ID              reduce using rule 3 (expression -> STRING_LITERAL .)
    LPAREN          reduce using rule 3 (expression -> STRING_LITERAL .)
    NOT             reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_BOOL       reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_STRING     reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_INT        reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_INT8       reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_INT16      reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_INT32      reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_INT64      reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_UINT       reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_UINT8      reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_UINT16     reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_UINT32     reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_UINT64     reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_UINTPTR    reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_FLOAT32    reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_FLOAT64    reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_COMPLEX64  reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE_COMPLEX128 reduce using rule 3 (expression -> STRING_LITERAL .)
    CONST           reduce using rule 3 (expression -> STRING_LITERAL .)
    TYPE            reduce using rule 3 (expression -> STRING_LITERAL .)
    VAR             reduce using rule 3 (expression -> STRING_LITERAL .)
    FUNC            reduce using rule 3 (expression -> STRING_LITERAL .)
    IMPORT          reduce using rule 3 (expression -> STRING_LITERAL .)
    IF              reduce using rule 3 (expression -> STRING_LITERAL .)
    FOR             reduce using rule 3 (expression -> STRING_LITERAL .)
    RETURN          reduce using rule 3 (expression -> STRING_LITERAL .)
    LBRACKET        reduce using rule 3 (expression -> STRING_LITERAL .)
    STRUCT          reduce using rule 3 (expression -> STRING_LITERAL .)
    ASTERISKS       reduce using rule 3 (expression -> STRING_LITERAL .)
    INTERFACE       reduce using rule 3 (expression -> STRING_LITERAL .)
    MAP             reduce using rule 3 (expression -> STRING_LITERAL .)
    CHAN            reduce using rule 3 (expression -> STRING_LITERAL .)
    CHANNEL_OPERATOR reduce using rule 3 (expression -> STRING_LITERAL .)
    NORMAL_ASSIGNMENT reduce using rule 3 (expression -> STRING_LITERAL .)
    $end            reduce using rule 3 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 3 (expression -> STRING_LITERAL .)
    LBRACE          reduce using rule 3 (expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 3 (expression -> STRING_LITERAL .)
    RBRACE          reduce using rule 3 (expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 3 (expression -> STRING_LITERAL .)


state 7

    (4) expression -> ID .
    (13) arithmetical_assignment -> ID . ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> ID . UNARY_ASSIGNMENT

    ARITHMETIC_OPERATOR reduce using rule 4 (expression -> ID .)
    OR              reduce using rule 4 (expression -> ID .)
    AND             reduce using rule 4 (expression -> ID .)
    COMPARISON_OPERATOR reduce using rule 4 (expression -> ID .)
    INTEGER         reduce using rule 4 (expression -> ID .)
    FLOAT           reduce using rule 4 (expression -> ID .)
    STRING_LITERAL  reduce using rule 4 (expression -> ID .)
    ID              reduce using rule 4 (expression -> ID .)
    LPAREN          reduce using rule 4 (expression -> ID .)
    NOT             reduce using rule 4 (expression -> ID .)
    TYPE_BOOL       reduce using rule 4 (expression -> ID .)
    TYPE_STRING     reduce using rule 4 (expression -> ID .)
    TYPE_INT        reduce using rule 4 (expression -> ID .)
    TYPE_INT8       reduce using rule 4 (expression -> ID .)
    TYPE_INT16      reduce using rule 4 (expression -> ID .)
    TYPE_INT32      reduce using rule 4 (expression -> ID .)
    TYPE_INT64      reduce using rule 4 (expression -> ID .)
    TYPE_UINT       reduce using rule 4 (expression -> ID .)
    TYPE_UINT8      reduce using rule 4 (expression -> ID .)
    TYPE_UINT16     reduce using rule 4 (expression -> ID .)
    TYPE_UINT32     reduce using rule 4 (expression -> ID .)
    TYPE_UINT64     reduce using rule 4 (expression -> ID .)
    TYPE_UINTPTR    reduce using rule 4 (expression -> ID .)
    TYPE_FLOAT32    reduce using rule 4 (expression -> ID .)
    TYPE_FLOAT64    reduce using rule 4 (expression -> ID .)
    TYPE_COMPLEX64  reduce using rule 4 (expression -> ID .)
    TYPE_COMPLEX128 reduce using rule 4 (expression -> ID .)
    CONST           reduce using rule 4 (expression -> ID .)
    TYPE            reduce using rule 4 (expression -> ID .)
    VAR             reduce using rule 4 (expression -> ID .)
    FUNC            reduce using rule 4 (expression -> ID .)
    IMPORT          reduce using rule 4 (expression -> ID .)
    IF              reduce using rule 4 (expression -> ID .)
    FOR             reduce using rule 4 (expression -> ID .)
    RETURN          reduce using rule 4 (expression -> ID .)
    LBRACKET        reduce using rule 4 (expression -> ID .)
    STRUCT          reduce using rule 4 (expression -> ID .)
    ASTERISKS       reduce using rule 4 (expression -> ID .)
    INTERFACE       reduce using rule 4 (expression -> ID .)
    MAP             reduce using rule 4 (expression -> ID .)
    CHAN            reduce using rule 4 (expression -> ID .)
    CHANNEL_OPERATOR reduce using rule 4 (expression -> ID .)
    NORMAL_ASSIGNMENT reduce using rule 4 (expression -> ID .)
    $end            reduce using rule 4 (expression -> ID .)
    RPAREN          reduce using rule 4 (expression -> ID .)
    LBRACE          reduce using rule 4 (expression -> ID .)
    RBRACKET        reduce using rule 4 (expression -> ID .)
    RBRACE          reduce using rule 4 (expression -> ID .)
    SEMICOLON       reduce using rule 4 (expression -> ID .)
    ARITHMETICAL_ASSIGNMENT shift and go to state 71
    UNARY_ASSIGNMENT shift and go to state 72


state 8

    (5) expression -> LPAREN . expression RPAREN
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 73
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 9

    (11) expression -> NOT . expression
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 75
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 10

    (15) expression -> arithmetical_assignment .

    ARITHMETIC_OPERATOR reduce using rule 15 (expression -> arithmetical_assignment .)
    OR              reduce using rule 15 (expression -> arithmetical_assignment .)
    AND             reduce using rule 15 (expression -> arithmetical_assignment .)
    COMPARISON_OPERATOR reduce using rule 15 (expression -> arithmetical_assignment .)
    INTEGER         reduce using rule 15 (expression -> arithmetical_assignment .)
    FLOAT           reduce using rule 15 (expression -> arithmetical_assignment .)
    STRING_LITERAL  reduce using rule 15 (expression -> arithmetical_assignment .)
    ID              reduce using rule 15 (expression -> arithmetical_assignment .)
    LPAREN          reduce using rule 15 (expression -> arithmetical_assignment .)
    NOT             reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_BOOL       reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_STRING     reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_INT        reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_INT8       reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_INT16      reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_INT32      reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_INT64      reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINT       reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINT8      reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINT16     reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINT32     reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINT64     reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINTPTR    reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_FLOAT32    reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_FLOAT64    reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_COMPLEX64  reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_COMPLEX128 reduce using rule 15 (expression -> arithmetical_assignment .)
    CONST           reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE            reduce using rule 15 (expression -> arithmetical_assignment .)
    VAR             reduce using rule 15 (expression -> arithmetical_assignment .)
    FUNC            reduce using rule 15 (expression -> arithmetical_assignment .)
    IMPORT          reduce using rule 15 (expression -> arithmetical_assignment .)
    IF              reduce using rule 15 (expression -> arithmetical_assignment .)
    FOR             reduce using rule 15 (expression -> arithmetical_assignment .)
    RETURN          reduce using rule 15 (expression -> arithmetical_assignment .)
    LBRACKET        reduce using rule 15 (expression -> arithmetical_assignment .)
    STRUCT          reduce using rule 15 (expression -> arithmetical_assignment .)
    ASTERISKS       reduce using rule 15 (expression -> arithmetical_assignment .)
    INTERFACE       reduce using rule 15 (expression -> arithmetical_assignment .)
    MAP             reduce using rule 15 (expression -> arithmetical_assignment .)
    CHAN            reduce using rule 15 (expression -> arithmetical_assignment .)
    CHANNEL_OPERATOR reduce using rule 15 (expression -> arithmetical_assignment .)
    NORMAL_ASSIGNMENT reduce using rule 15 (expression -> arithmetical_assignment .)
    $end            reduce using rule 15 (expression -> arithmetical_assignment .)
    RPAREN          reduce using rule 15 (expression -> arithmetical_assignment .)
    LBRACE          reduce using rule 15 (expression -> arithmetical_assignment .)
    RBRACKET        reduce using rule 15 (expression -> arithmetical_assignment .)
    RBRACE          reduce using rule 15 (expression -> arithmetical_assignment .)
    SEMICOLON       reduce using rule 15 (expression -> arithmetical_assignment .)


state 11

    (16) expression -> unary_assignment .

    ARITHMETIC_OPERATOR reduce using rule 16 (expression -> unary_assignment .)
    OR              reduce using rule 16 (expression -> unary_assignment .)
    AND             reduce using rule 16 (expression -> unary_assignment .)
    COMPARISON_OPERATOR reduce using rule 16 (expression -> unary_assignment .)
    INTEGER         reduce using rule 16 (expression -> unary_assignment .)
    FLOAT           reduce using rule 16 (expression -> unary_assignment .)
    STRING_LITERAL  reduce using rule 16 (expression -> unary_assignment .)
    ID              reduce using rule 16 (expression -> unary_assignment .)
    LPAREN          reduce using rule 16 (expression -> unary_assignment .)
    NOT             reduce using rule 16 (expression -> unary_assignment .)
    TYPE_BOOL       reduce using rule 16 (expression -> unary_assignment .)
    TYPE_STRING     reduce using rule 16 (expression -> unary_assignment .)
    TYPE_INT        reduce using rule 16 (expression -> unary_assignment .)
    TYPE_INT8       reduce using rule 16 (expression -> unary_assignment .)
    TYPE_INT16      reduce using rule 16 (expression -> unary_assignment .)
    TYPE_INT32      reduce using rule 16 (expression -> unary_assignment .)
    TYPE_INT64      reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINT       reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINT8      reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINT16     reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINT32     reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINT64     reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINTPTR    reduce using rule 16 (expression -> unary_assignment .)
    TYPE_FLOAT32    reduce using rule 16 (expression -> unary_assignment .)
    TYPE_FLOAT64    reduce using rule 16 (expression -> unary_assignment .)
    TYPE_COMPLEX64  reduce using rule 16 (expression -> unary_assignment .)
    TYPE_COMPLEX128 reduce using rule 16 (expression -> unary_assignment .)
    CONST           reduce using rule 16 (expression -> unary_assignment .)
    TYPE            reduce using rule 16 (expression -> unary_assignment .)
    VAR             reduce using rule 16 (expression -> unary_assignment .)
    FUNC            reduce using rule 16 (expression -> unary_assignment .)
    IMPORT          reduce using rule 16 (expression -> unary_assignment .)
    IF              reduce using rule 16 (expression -> unary_assignment .)
    FOR             reduce using rule 16 (expression -> unary_assignment .)
    RETURN          reduce using rule 16 (expression -> unary_assignment .)
    LBRACKET        reduce using rule 16 (expression -> unary_assignment .)
    STRUCT          reduce using rule 16 (expression -> unary_assignment .)
    ASTERISKS       reduce using rule 16 (expression -> unary_assignment .)
    INTERFACE       reduce using rule 16 (expression -> unary_assignment .)
    MAP             reduce using rule 16 (expression -> unary_assignment .)
    CHAN            reduce using rule 16 (expression -> unary_assignment .)
    CHANNEL_OPERATOR reduce using rule 16 (expression -> unary_assignment .)
    NORMAL_ASSIGNMENT reduce using rule 16 (expression -> unary_assignment .)
    $end            reduce using rule 16 (expression -> unary_assignment .)
    RPAREN          reduce using rule 16 (expression -> unary_assignment .)
    LBRACE          reduce using rule 16 (expression -> unary_assignment .)
    RBRACKET        reduce using rule 16 (expression -> unary_assignment .)
    RBRACE          reduce using rule 16 (expression -> unary_assignment .)
    SEMICOLON       reduce using rule 16 (expression -> unary_assignment .)


state 12

    (17) expression -> type .

    ARITHMETIC_OPERATOR reduce using rule 17 (expression -> type .)
    OR              reduce using rule 17 (expression -> type .)
    AND             reduce using rule 17 (expression -> type .)
    COMPARISON_OPERATOR reduce using rule 17 (expression -> type .)
    INTEGER         reduce using rule 17 (expression -> type .)
    FLOAT           reduce using rule 17 (expression -> type .)
    STRING_LITERAL  reduce using rule 17 (expression -> type .)
    ID              reduce using rule 17 (expression -> type .)
    LPAREN          reduce using rule 17 (expression -> type .)
    NOT             reduce using rule 17 (expression -> type .)
    TYPE_BOOL       reduce using rule 17 (expression -> type .)
    TYPE_STRING     reduce using rule 17 (expression -> type .)
    TYPE_INT        reduce using rule 17 (expression -> type .)
    TYPE_INT8       reduce using rule 17 (expression -> type .)
    TYPE_INT16      reduce using rule 17 (expression -> type .)
    TYPE_INT32      reduce using rule 17 (expression -> type .)
    TYPE_INT64      reduce using rule 17 (expression -> type .)
    TYPE_UINT       reduce using rule 17 (expression -> type .)
    TYPE_UINT8      reduce using rule 17 (expression -> type .)
    TYPE_UINT16     reduce using rule 17 (expression -> type .)
    TYPE_UINT32     reduce using rule 17 (expression -> type .)
    TYPE_UINT64     reduce using rule 17 (expression -> type .)
    TYPE_UINTPTR    reduce using rule 17 (expression -> type .)
    TYPE_FLOAT32    reduce using rule 17 (expression -> type .)
    TYPE_FLOAT64    reduce using rule 17 (expression -> type .)
    TYPE_COMPLEX64  reduce using rule 17 (expression -> type .)
    TYPE_COMPLEX128 reduce using rule 17 (expression -> type .)
    CONST           reduce using rule 17 (expression -> type .)
    TYPE            reduce using rule 17 (expression -> type .)
    VAR             reduce using rule 17 (expression -> type .)
    FUNC            reduce using rule 17 (expression -> type .)
    IMPORT          reduce using rule 17 (expression -> type .)
    IF              reduce using rule 17 (expression -> type .)
    FOR             reduce using rule 17 (expression -> type .)
    RETURN          reduce using rule 17 (expression -> type .)
    LBRACKET        reduce using rule 17 (expression -> type .)
    STRUCT          reduce using rule 17 (expression -> type .)
    ASTERISKS       reduce using rule 17 (expression -> type .)
    INTERFACE       reduce using rule 17 (expression -> type .)
    MAP             reduce using rule 17 (expression -> type .)
    CHAN            reduce using rule 17 (expression -> type .)
    CHANNEL_OPERATOR reduce using rule 17 (expression -> type .)
    NORMAL_ASSIGNMENT reduce using rule 17 (expression -> type .)
    $end            reduce using rule 17 (expression -> type .)
    RPAREN          reduce using rule 17 (expression -> type .)
    LBRACE          reduce using rule 17 (expression -> type .)
    RBRACKET        reduce using rule 17 (expression -> type .)
    RBRACE          reduce using rule 17 (expression -> type .)
    SEMICOLON       reduce using rule 17 (expression -> type .)


state 13

    (86) expression -> declaration .

    ARITHMETIC_OPERATOR reduce using rule 86 (expression -> declaration .)
    OR              reduce using rule 86 (expression -> declaration .)
    AND             reduce using rule 86 (expression -> declaration .)
    COMPARISON_OPERATOR reduce using rule 86 (expression -> declaration .)
    INTEGER         reduce using rule 86 (expression -> declaration .)
    FLOAT           reduce using rule 86 (expression -> declaration .)
    STRING_LITERAL  reduce using rule 86 (expression -> declaration .)
    ID              reduce using rule 86 (expression -> declaration .)
    LPAREN          reduce using rule 86 (expression -> declaration .)
    NOT             reduce using rule 86 (expression -> declaration .)
    TYPE_BOOL       reduce using rule 86 (expression -> declaration .)
    TYPE_STRING     reduce using rule 86 (expression -> declaration .)
    TYPE_INT        reduce using rule 86 (expression -> declaration .)
    TYPE_INT8       reduce using rule 86 (expression -> declaration .)
    TYPE_INT16      reduce using rule 86 (expression -> declaration .)
    TYPE_INT32      reduce using rule 86 (expression -> declaration .)
    TYPE_INT64      reduce using rule 86 (expression -> declaration .)
    TYPE_UINT       reduce using rule 86 (expression -> declaration .)
    TYPE_UINT8      reduce using rule 86 (expression -> declaration .)
    TYPE_UINT16     reduce using rule 86 (expression -> declaration .)
    TYPE_UINT32     reduce using rule 86 (expression -> declaration .)
    TYPE_UINT64     reduce using rule 86 (expression -> declaration .)
    TYPE_UINTPTR    reduce using rule 86 (expression -> declaration .)
    TYPE_FLOAT32    reduce using rule 86 (expression -> declaration .)
    TYPE_FLOAT64    reduce using rule 86 (expression -> declaration .)
    TYPE_COMPLEX64  reduce using rule 86 (expression -> declaration .)
    TYPE_COMPLEX128 reduce using rule 86 (expression -> declaration .)
    CONST           reduce using rule 86 (expression -> declaration .)
    TYPE            reduce using rule 86 (expression -> declaration .)
    VAR             reduce using rule 86 (expression -> declaration .)
    FUNC            reduce using rule 86 (expression -> declaration .)
    IMPORT          reduce using rule 86 (expression -> declaration .)
    IF              reduce using rule 86 (expression -> declaration .)
    FOR             reduce using rule 86 (expression -> declaration .)
    RETURN          reduce using rule 86 (expression -> declaration .)
    LBRACKET        reduce using rule 86 (expression -> declaration .)
    STRUCT          reduce using rule 86 (expression -> declaration .)
    ASTERISKS       reduce using rule 86 (expression -> declaration .)
    INTERFACE       reduce using rule 86 (expression -> declaration .)
    MAP             reduce using rule 86 (expression -> declaration .)
    CHAN            reduce using rule 86 (expression -> declaration .)
    CHANNEL_OPERATOR reduce using rule 86 (expression -> declaration .)
    NORMAL_ASSIGNMENT reduce using rule 86 (expression -> declaration .)
    $end            reduce using rule 86 (expression -> declaration .)
    RPAREN          reduce using rule 86 (expression -> declaration .)
    LBRACE          reduce using rule 86 (expression -> declaration .)
    RBRACKET        reduce using rule 86 (expression -> declaration .)
    RBRACE          reduce using rule 86 (expression -> declaration .)
    SEMICOLON       reduce using rule 86 (expression -> declaration .)


state 14

    (110) expression -> statement .

    ARITHMETIC_OPERATOR reduce using rule 110 (expression -> statement .)
    OR              reduce using rule 110 (expression -> statement .)
    AND             reduce using rule 110 (expression -> statement .)
    COMPARISON_OPERATOR reduce using rule 110 (expression -> statement .)
    INTEGER         reduce using rule 110 (expression -> statement .)
    FLOAT           reduce using rule 110 (expression -> statement .)
    STRING_LITERAL  reduce using rule 110 (expression -> statement .)
    ID              reduce using rule 110 (expression -> statement .)
    LPAREN          reduce using rule 110 (expression -> statement .)
    NOT             reduce using rule 110 (expression -> statement .)
    TYPE_BOOL       reduce using rule 110 (expression -> statement .)
    TYPE_STRING     reduce using rule 110 (expression -> statement .)
    TYPE_INT        reduce using rule 110 (expression -> statement .)
    TYPE_INT8       reduce using rule 110 (expression -> statement .)
    TYPE_INT16      reduce using rule 110 (expression -> statement .)
    TYPE_INT32      reduce using rule 110 (expression -> statement .)
    TYPE_INT64      reduce using rule 110 (expression -> statement .)
    TYPE_UINT       reduce using rule 110 (expression -> statement .)
    TYPE_UINT8      reduce using rule 110 (expression -> statement .)
    TYPE_UINT16     reduce using rule 110 (expression -> statement .)
    TYPE_UINT32     reduce using rule 110 (expression -> statement .)
    TYPE_UINT64     reduce using rule 110 (expression -> statement .)
    TYPE_UINTPTR    reduce using rule 110 (expression -> statement .)
    TYPE_FLOAT32    reduce using rule 110 (expression -> statement .)
    TYPE_FLOAT64    reduce using rule 110 (expression -> statement .)
    TYPE_COMPLEX64  reduce using rule 110 (expression -> statement .)
    TYPE_COMPLEX128 reduce using rule 110 (expression -> statement .)
    CONST           reduce using rule 110 (expression -> statement .)
    TYPE            reduce using rule 110 (expression -> statement .)
    VAR             reduce using rule 110 (expression -> statement .)
    FUNC            reduce using rule 110 (expression -> statement .)
    IMPORT          reduce using rule 110 (expression -> statement .)
    IF              reduce using rule 110 (expression -> statement .)
    FOR             reduce using rule 110 (expression -> statement .)
    RETURN          reduce using rule 110 (expression -> statement .)
    LBRACKET        reduce using rule 110 (expression -> statement .)
    STRUCT          reduce using rule 110 (expression -> statement .)
    ASTERISKS       reduce using rule 110 (expression -> statement .)
    INTERFACE       reduce using rule 110 (expression -> statement .)
    MAP             reduce using rule 110 (expression -> statement .)
    CHAN            reduce using rule 110 (expression -> statement .)
    CHANNEL_OPERATOR reduce using rule 110 (expression -> statement .)
    NORMAL_ASSIGNMENT reduce using rule 110 (expression -> statement .)
    $end            reduce using rule 110 (expression -> statement .)
    RPAREN          reduce using rule 110 (expression -> statement .)
    LBRACE          reduce using rule 110 (expression -> statement .)
    RBRACKET        reduce using rule 110 (expression -> statement .)
    RBRACE          reduce using rule 110 (expression -> statement .)
    SEMICOLON       reduce using rule 110 (expression -> statement .)


state 15

    (18) type -> TYPE_BOOL .

    ARITHMETIC_OPERATOR reduce using rule 18 (type -> TYPE_BOOL .)
    OR              reduce using rule 18 (type -> TYPE_BOOL .)
    AND             reduce using rule 18 (type -> TYPE_BOOL .)
    COMPARISON_OPERATOR reduce using rule 18 (type -> TYPE_BOOL .)
    INTEGER         reduce using rule 18 (type -> TYPE_BOOL .)
    FLOAT           reduce using rule 18 (type -> TYPE_BOOL .)
    STRING_LITERAL  reduce using rule 18 (type -> TYPE_BOOL .)
    ID              reduce using rule 18 (type -> TYPE_BOOL .)
    LPAREN          reduce using rule 18 (type -> TYPE_BOOL .)
    NOT             reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_BOOL       reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_STRING     reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_INT        reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_INT8       reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_INT16      reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_INT32      reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_INT64      reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINT       reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINT8      reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINT16     reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINT32     reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINT64     reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINTPTR    reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_FLOAT32    reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_FLOAT64    reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_COMPLEX64  reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_COMPLEX128 reduce using rule 18 (type -> TYPE_BOOL .)
    CONST           reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE            reduce using rule 18 (type -> TYPE_BOOL .)
    VAR             reduce using rule 18 (type -> TYPE_BOOL .)
    FUNC            reduce using rule 18 (type -> TYPE_BOOL .)
    IMPORT          reduce using rule 18 (type -> TYPE_BOOL .)
    IF              reduce using rule 18 (type -> TYPE_BOOL .)
    FOR             reduce using rule 18 (type -> TYPE_BOOL .)
    RETURN          reduce using rule 18 (type -> TYPE_BOOL .)
    LBRACKET        reduce using rule 18 (type -> TYPE_BOOL .)
    STRUCT          reduce using rule 18 (type -> TYPE_BOOL .)
    ASTERISKS       reduce using rule 18 (type -> TYPE_BOOL .)
    INTERFACE       reduce using rule 18 (type -> TYPE_BOOL .)
    MAP             reduce using rule 18 (type -> TYPE_BOOL .)
    CHAN            reduce using rule 18 (type -> TYPE_BOOL .)
    CHANNEL_OPERATOR reduce using rule 18 (type -> TYPE_BOOL .)
    NORMAL_ASSIGNMENT reduce using rule 18 (type -> TYPE_BOOL .)
    $end            reduce using rule 18 (type -> TYPE_BOOL .)
    RPAREN          reduce using rule 18 (type -> TYPE_BOOL .)
    LBRACE          reduce using rule 18 (type -> TYPE_BOOL .)
    RBRACKET        reduce using rule 18 (type -> TYPE_BOOL .)
    RBRACE          reduce using rule 18 (type -> TYPE_BOOL .)
    SEMICOLON       reduce using rule 18 (type -> TYPE_BOOL .)
    COMMA           reduce using rule 18 (type -> TYPE_BOOL .)


state 16

    (19) type -> TYPE_STRING .

    ARITHMETIC_OPERATOR reduce using rule 19 (type -> TYPE_STRING .)
    OR              reduce using rule 19 (type -> TYPE_STRING .)
    AND             reduce using rule 19 (type -> TYPE_STRING .)
    COMPARISON_OPERATOR reduce using rule 19 (type -> TYPE_STRING .)
    INTEGER         reduce using rule 19 (type -> TYPE_STRING .)
    FLOAT           reduce using rule 19 (type -> TYPE_STRING .)
    STRING_LITERAL  reduce using rule 19 (type -> TYPE_STRING .)
    ID              reduce using rule 19 (type -> TYPE_STRING .)
    LPAREN          reduce using rule 19 (type -> TYPE_STRING .)
    NOT             reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_BOOL       reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_STRING     reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_INT        reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_INT8       reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_INT16      reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_INT32      reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_INT64      reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINT       reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINT8      reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINT16     reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINT32     reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINT64     reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINTPTR    reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_FLOAT32    reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_FLOAT64    reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_COMPLEX64  reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_COMPLEX128 reduce using rule 19 (type -> TYPE_STRING .)
    CONST           reduce using rule 19 (type -> TYPE_STRING .)
    TYPE            reduce using rule 19 (type -> TYPE_STRING .)
    VAR             reduce using rule 19 (type -> TYPE_STRING .)
    FUNC            reduce using rule 19 (type -> TYPE_STRING .)
    IMPORT          reduce using rule 19 (type -> TYPE_STRING .)
    IF              reduce using rule 19 (type -> TYPE_STRING .)
    FOR             reduce using rule 19 (type -> TYPE_STRING .)
    RETURN          reduce using rule 19 (type -> TYPE_STRING .)
    LBRACKET        reduce using rule 19 (type -> TYPE_STRING .)
    STRUCT          reduce using rule 19 (type -> TYPE_STRING .)
    ASTERISKS       reduce using rule 19 (type -> TYPE_STRING .)
    INTERFACE       reduce using rule 19 (type -> TYPE_STRING .)
    MAP             reduce using rule 19 (type -> TYPE_STRING .)
    CHAN            reduce using rule 19 (type -> TYPE_STRING .)
    CHANNEL_OPERATOR reduce using rule 19 (type -> TYPE_STRING .)
    NORMAL_ASSIGNMENT reduce using rule 19 (type -> TYPE_STRING .)
    $end            reduce using rule 19 (type -> TYPE_STRING .)
    RPAREN          reduce using rule 19 (type -> TYPE_STRING .)
    LBRACE          reduce using rule 19 (type -> TYPE_STRING .)
    RBRACKET        reduce using rule 19 (type -> TYPE_STRING .)
    RBRACE          reduce using rule 19 (type -> TYPE_STRING .)
    SEMICOLON       reduce using rule 19 (type -> TYPE_STRING .)
    COMMA           reduce using rule 19 (type -> TYPE_STRING .)


state 17

    (20) type -> TYPE_INT .

    ARITHMETIC_OPERATOR reduce using rule 20 (type -> TYPE_INT .)
    OR              reduce using rule 20 (type -> TYPE_INT .)
    AND             reduce using rule 20 (type -> TYPE_INT .)
    COMPARISON_OPERATOR reduce using rule 20 (type -> TYPE_INT .)
    INTEGER         reduce using rule 20 (type -> TYPE_INT .)
    FLOAT           reduce using rule 20 (type -> TYPE_INT .)
    STRING_LITERAL  reduce using rule 20 (type -> TYPE_INT .)
    ID              reduce using rule 20 (type -> TYPE_INT .)
    LPAREN          reduce using rule 20 (type -> TYPE_INT .)
    NOT             reduce using rule 20 (type -> TYPE_INT .)
    TYPE_BOOL       reduce using rule 20 (type -> TYPE_INT .)
    TYPE_STRING     reduce using rule 20 (type -> TYPE_INT .)
    TYPE_INT        reduce using rule 20 (type -> TYPE_INT .)
    TYPE_INT8       reduce using rule 20 (type -> TYPE_INT .)
    TYPE_INT16      reduce using rule 20 (type -> TYPE_INT .)
    TYPE_INT32      reduce using rule 20 (type -> TYPE_INT .)
    TYPE_INT64      reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINT       reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINT8      reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINT16     reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINT32     reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINT64     reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINTPTR    reduce using rule 20 (type -> TYPE_INT .)
    TYPE_FLOAT32    reduce using rule 20 (type -> TYPE_INT .)
    TYPE_FLOAT64    reduce using rule 20 (type -> TYPE_INT .)
    TYPE_COMPLEX64  reduce using rule 20 (type -> TYPE_INT .)
    TYPE_COMPLEX128 reduce using rule 20 (type -> TYPE_INT .)
    CONST           reduce using rule 20 (type -> TYPE_INT .)
    TYPE            reduce using rule 20 (type -> TYPE_INT .)
    VAR             reduce using rule 20 (type -> TYPE_INT .)
    FUNC            reduce using rule 20 (type -> TYPE_INT .)
    IMPORT          reduce using rule 20 (type -> TYPE_INT .)
    IF              reduce using rule 20 (type -> TYPE_INT .)
    FOR             reduce using rule 20 (type -> TYPE_INT .)
    RETURN          reduce using rule 20 (type -> TYPE_INT .)
    LBRACKET        reduce using rule 20 (type -> TYPE_INT .)
    STRUCT          reduce using rule 20 (type -> TYPE_INT .)
    ASTERISKS       reduce using rule 20 (type -> TYPE_INT .)
    INTERFACE       reduce using rule 20 (type -> TYPE_INT .)
    MAP             reduce using rule 20 (type -> TYPE_INT .)
    CHAN            reduce using rule 20 (type -> TYPE_INT .)
    CHANNEL_OPERATOR reduce using rule 20 (type -> TYPE_INT .)
    NORMAL_ASSIGNMENT reduce using rule 20 (type -> TYPE_INT .)
    $end            reduce using rule 20 (type -> TYPE_INT .)
    RPAREN          reduce using rule 20 (type -> TYPE_INT .)
    LBRACE          reduce using rule 20 (type -> TYPE_INT .)
    RBRACKET        reduce using rule 20 (type -> TYPE_INT .)
    RBRACE          reduce using rule 20 (type -> TYPE_INT .)
    SEMICOLON       reduce using rule 20 (type -> TYPE_INT .)
    COMMA           reduce using rule 20 (type -> TYPE_INT .)


state 18

    (21) type -> TYPE_INT8 .

    ARITHMETIC_OPERATOR reduce using rule 21 (type -> TYPE_INT8 .)
    OR              reduce using rule 21 (type -> TYPE_INT8 .)
    AND             reduce using rule 21 (type -> TYPE_INT8 .)
    COMPARISON_OPERATOR reduce using rule 21 (type -> TYPE_INT8 .)
    INTEGER         reduce using rule 21 (type -> TYPE_INT8 .)
    FLOAT           reduce using rule 21 (type -> TYPE_INT8 .)
    STRING_LITERAL  reduce using rule 21 (type -> TYPE_INT8 .)
    ID              reduce using rule 21 (type -> TYPE_INT8 .)
    LPAREN          reduce using rule 21 (type -> TYPE_INT8 .)
    NOT             reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_BOOL       reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_STRING     reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_INT        reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_INT8       reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_INT16      reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_INT32      reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_INT64      reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINT       reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINT8      reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINT16     reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINT32     reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINT64     reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINTPTR    reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_FLOAT32    reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_FLOAT64    reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_COMPLEX64  reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_COMPLEX128 reduce using rule 21 (type -> TYPE_INT8 .)
    CONST           reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE            reduce using rule 21 (type -> TYPE_INT8 .)
    VAR             reduce using rule 21 (type -> TYPE_INT8 .)
    FUNC            reduce using rule 21 (type -> TYPE_INT8 .)
    IMPORT          reduce using rule 21 (type -> TYPE_INT8 .)
    IF              reduce using rule 21 (type -> TYPE_INT8 .)
    FOR             reduce using rule 21 (type -> TYPE_INT8 .)
    RETURN          reduce using rule 21 (type -> TYPE_INT8 .)
    LBRACKET        reduce using rule 21 (type -> TYPE_INT8 .)
    STRUCT          reduce using rule 21 (type -> TYPE_INT8 .)
    ASTERISKS       reduce using rule 21 (type -> TYPE_INT8 .)
    INTERFACE       reduce using rule 21 (type -> TYPE_INT8 .)
    MAP             reduce using rule 21 (type -> TYPE_INT8 .)
    CHAN            reduce using rule 21 (type -> TYPE_INT8 .)
    CHANNEL_OPERATOR reduce using rule 21 (type -> TYPE_INT8 .)
    NORMAL_ASSIGNMENT reduce using rule 21 (type -> TYPE_INT8 .)
    $end            reduce using rule 21 (type -> TYPE_INT8 .)
    RPAREN          reduce using rule 21 (type -> TYPE_INT8 .)
    LBRACE          reduce using rule 21 (type -> TYPE_INT8 .)
    RBRACKET        reduce using rule 21 (type -> TYPE_INT8 .)
    RBRACE          reduce using rule 21 (type -> TYPE_INT8 .)
    SEMICOLON       reduce using rule 21 (type -> TYPE_INT8 .)
    COMMA           reduce using rule 21 (type -> TYPE_INT8 .)


state 19

    (22) type -> TYPE_INT16 .

    ARITHMETIC_OPERATOR reduce using rule 22 (type -> TYPE_INT16 .)
    OR              reduce using rule 22 (type -> TYPE_INT16 .)
    AND             reduce using rule 22 (type -> TYPE_INT16 .)
    COMPARISON_OPERATOR reduce using rule 22 (type -> TYPE_INT16 .)
    INTEGER         reduce using rule 22 (type -> TYPE_INT16 .)
    FLOAT           reduce using rule 22 (type -> TYPE_INT16 .)
    STRING_LITERAL  reduce using rule 22 (type -> TYPE_INT16 .)
    ID              reduce using rule 22 (type -> TYPE_INT16 .)
    LPAREN          reduce using rule 22 (type -> TYPE_INT16 .)
    NOT             reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_BOOL       reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_STRING     reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_INT        reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_INT8       reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_INT16      reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_INT32      reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_INT64      reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINT       reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINT8      reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINT16     reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINT32     reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINT64     reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINTPTR    reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_FLOAT32    reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_FLOAT64    reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_COMPLEX64  reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_COMPLEX128 reduce using rule 22 (type -> TYPE_INT16 .)
    CONST           reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE            reduce using rule 22 (type -> TYPE_INT16 .)
    VAR             reduce using rule 22 (type -> TYPE_INT16 .)
    FUNC            reduce using rule 22 (type -> TYPE_INT16 .)
    IMPORT          reduce using rule 22 (type -> TYPE_INT16 .)
    IF              reduce using rule 22 (type -> TYPE_INT16 .)
    FOR             reduce using rule 22 (type -> TYPE_INT16 .)
    RETURN          reduce using rule 22 (type -> TYPE_INT16 .)
    LBRACKET        reduce using rule 22 (type -> TYPE_INT16 .)
    STRUCT          reduce using rule 22 (type -> TYPE_INT16 .)
    ASTERISKS       reduce using rule 22 (type -> TYPE_INT16 .)
    INTERFACE       reduce using rule 22 (type -> TYPE_INT16 .)
    MAP             reduce using rule 22 (type -> TYPE_INT16 .)
    CHAN            reduce using rule 22 (type -> TYPE_INT16 .)
    CHANNEL_OPERATOR reduce using rule 22 (type -> TYPE_INT16 .)
    NORMAL_ASSIGNMENT reduce using rule 22 (type -> TYPE_INT16 .)
    $end            reduce using rule 22 (type -> TYPE_INT16 .)
    RPAREN          reduce using rule 22 (type -> TYPE_INT16 .)
    LBRACE          reduce using rule 22 (type -> TYPE_INT16 .)
    RBRACKET        reduce using rule 22 (type -> TYPE_INT16 .)
    RBRACE          reduce using rule 22 (type -> TYPE_INT16 .)
    SEMICOLON       reduce using rule 22 (type -> TYPE_INT16 .)
    COMMA           reduce using rule 22 (type -> TYPE_INT16 .)


state 20

    (23) type -> TYPE_INT32 .

    ARITHMETIC_OPERATOR reduce using rule 23 (type -> TYPE_INT32 .)
    OR              reduce using rule 23 (type -> TYPE_INT32 .)
    AND             reduce using rule 23 (type -> TYPE_INT32 .)
    COMPARISON_OPERATOR reduce using rule 23 (type -> TYPE_INT32 .)
    INTEGER         reduce using rule 23 (type -> TYPE_INT32 .)
    FLOAT           reduce using rule 23 (type -> TYPE_INT32 .)
    STRING_LITERAL  reduce using rule 23 (type -> TYPE_INT32 .)
    ID              reduce using rule 23 (type -> TYPE_INT32 .)
    LPAREN          reduce using rule 23 (type -> TYPE_INT32 .)
    NOT             reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_BOOL       reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_STRING     reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_INT        reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_INT8       reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_INT16      reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_INT32      reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_INT64      reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINT       reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINT8      reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINT16     reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINT32     reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINT64     reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINTPTR    reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_FLOAT32    reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_FLOAT64    reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_COMPLEX64  reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_COMPLEX128 reduce using rule 23 (type -> TYPE_INT32 .)
    CONST           reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE            reduce using rule 23 (type -> TYPE_INT32 .)
    VAR             reduce using rule 23 (type -> TYPE_INT32 .)
    FUNC            reduce using rule 23 (type -> TYPE_INT32 .)
    IMPORT          reduce using rule 23 (type -> TYPE_INT32 .)
    IF              reduce using rule 23 (type -> TYPE_INT32 .)
    FOR             reduce using rule 23 (type -> TYPE_INT32 .)
    RETURN          reduce using rule 23 (type -> TYPE_INT32 .)
    LBRACKET        reduce using rule 23 (type -> TYPE_INT32 .)
    STRUCT          reduce using rule 23 (type -> TYPE_INT32 .)
    ASTERISKS       reduce using rule 23 (type -> TYPE_INT32 .)
    INTERFACE       reduce using rule 23 (type -> TYPE_INT32 .)
    MAP             reduce using rule 23 (type -> TYPE_INT32 .)
    CHAN            reduce using rule 23 (type -> TYPE_INT32 .)
    CHANNEL_OPERATOR reduce using rule 23 (type -> TYPE_INT32 .)
    NORMAL_ASSIGNMENT reduce using rule 23 (type -> TYPE_INT32 .)
    $end            reduce using rule 23 (type -> TYPE_INT32 .)
    RPAREN          reduce using rule 23 (type -> TYPE_INT32 .)
    LBRACE          reduce using rule 23 (type -> TYPE_INT32 .)
    RBRACKET        reduce using rule 23 (type -> TYPE_INT32 .)
    RBRACE          reduce using rule 23 (type -> TYPE_INT32 .)
    SEMICOLON       reduce using rule 23 (type -> TYPE_INT32 .)
    COMMA           reduce using rule 23 (type -> TYPE_INT32 .)


state 21

    (24) type -> TYPE_INT64 .

    ARITHMETIC_OPERATOR reduce using rule 24 (type -> TYPE_INT64 .)
    OR              reduce using rule 24 (type -> TYPE_INT64 .)
    AND             reduce using rule 24 (type -> TYPE_INT64 .)
    COMPARISON_OPERATOR reduce using rule 24 (type -> TYPE_INT64 .)
    INTEGER         reduce using rule 24 (type -> TYPE_INT64 .)
    FLOAT           reduce using rule 24 (type -> TYPE_INT64 .)
    STRING_LITERAL  reduce using rule 24 (type -> TYPE_INT64 .)
    ID              reduce using rule 24 (type -> TYPE_INT64 .)
    LPAREN          reduce using rule 24 (type -> TYPE_INT64 .)
    NOT             reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_BOOL       reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_STRING     reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_INT        reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_INT8       reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_INT16      reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_INT32      reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_INT64      reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINT       reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINT8      reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINT16     reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINT32     reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINT64     reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINTPTR    reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_FLOAT32    reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_FLOAT64    reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_COMPLEX64  reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_COMPLEX128 reduce using rule 24 (type -> TYPE_INT64 .)
    CONST           reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE            reduce using rule 24 (type -> TYPE_INT64 .)
    VAR             reduce using rule 24 (type -> TYPE_INT64 .)
    FUNC            reduce using rule 24 (type -> TYPE_INT64 .)
    IMPORT          reduce using rule 24 (type -> TYPE_INT64 .)
    IF              reduce using rule 24 (type -> TYPE_INT64 .)
    FOR             reduce using rule 24 (type -> TYPE_INT64 .)
    RETURN          reduce using rule 24 (type -> TYPE_INT64 .)
    LBRACKET        reduce using rule 24 (type -> TYPE_INT64 .)
    STRUCT          reduce using rule 24 (type -> TYPE_INT64 .)
    ASTERISKS       reduce using rule 24 (type -> TYPE_INT64 .)
    INTERFACE       reduce using rule 24 (type -> TYPE_INT64 .)
    MAP             reduce using rule 24 (type -> TYPE_INT64 .)
    CHAN            reduce using rule 24 (type -> TYPE_INT64 .)
    CHANNEL_OPERATOR reduce using rule 24 (type -> TYPE_INT64 .)
    NORMAL_ASSIGNMENT reduce using rule 24 (type -> TYPE_INT64 .)
    $end            reduce using rule 24 (type -> TYPE_INT64 .)
    RPAREN          reduce using rule 24 (type -> TYPE_INT64 .)
    LBRACE          reduce using rule 24 (type -> TYPE_INT64 .)
    RBRACKET        reduce using rule 24 (type -> TYPE_INT64 .)
    RBRACE          reduce using rule 24 (type -> TYPE_INT64 .)
    SEMICOLON       reduce using rule 24 (type -> TYPE_INT64 .)
    COMMA           reduce using rule 24 (type -> TYPE_INT64 .)


state 22

    (25) type -> TYPE_UINT .

    ARITHMETIC_OPERATOR reduce using rule 25 (type -> TYPE_UINT .)
    OR              reduce using rule 25 (type -> TYPE_UINT .)
    AND             reduce using rule 25 (type -> TYPE_UINT .)
    COMPARISON_OPERATOR reduce using rule 25 (type -> TYPE_UINT .)
    INTEGER         reduce using rule 25 (type -> TYPE_UINT .)
    FLOAT           reduce using rule 25 (type -> TYPE_UINT .)
    STRING_LITERAL  reduce using rule 25 (type -> TYPE_UINT .)
    ID              reduce using rule 25 (type -> TYPE_UINT .)
    LPAREN          reduce using rule 25 (type -> TYPE_UINT .)
    NOT             reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_BOOL       reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_STRING     reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_INT        reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_INT8       reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_INT16      reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_INT32      reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_INT64      reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINT       reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINT8      reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINT16     reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINT32     reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINT64     reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINTPTR    reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_FLOAT32    reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_FLOAT64    reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_COMPLEX64  reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_COMPLEX128 reduce using rule 25 (type -> TYPE_UINT .)
    CONST           reduce using rule 25 (type -> TYPE_UINT .)
    TYPE            reduce using rule 25 (type -> TYPE_UINT .)
    VAR             reduce using rule 25 (type -> TYPE_UINT .)
    FUNC            reduce using rule 25 (type -> TYPE_UINT .)
    IMPORT          reduce using rule 25 (type -> TYPE_UINT .)
    IF              reduce using rule 25 (type -> TYPE_UINT .)
    FOR             reduce using rule 25 (type -> TYPE_UINT .)
    RETURN          reduce using rule 25 (type -> TYPE_UINT .)
    LBRACKET        reduce using rule 25 (type -> TYPE_UINT .)
    STRUCT          reduce using rule 25 (type -> TYPE_UINT .)
    ASTERISKS       reduce using rule 25 (type -> TYPE_UINT .)
    INTERFACE       reduce using rule 25 (type -> TYPE_UINT .)
    MAP             reduce using rule 25 (type -> TYPE_UINT .)
    CHAN            reduce using rule 25 (type -> TYPE_UINT .)
    CHANNEL_OPERATOR reduce using rule 25 (type -> TYPE_UINT .)
    NORMAL_ASSIGNMENT reduce using rule 25 (type -> TYPE_UINT .)
    $end            reduce using rule 25 (type -> TYPE_UINT .)
    RPAREN          reduce using rule 25 (type -> TYPE_UINT .)
    LBRACE          reduce using rule 25 (type -> TYPE_UINT .)
    RBRACKET        reduce using rule 25 (type -> TYPE_UINT .)
    RBRACE          reduce using rule 25 (type -> TYPE_UINT .)
    SEMICOLON       reduce using rule 25 (type -> TYPE_UINT .)
    COMMA           reduce using rule 25 (type -> TYPE_UINT .)


state 23

    (26) type -> TYPE_UINT8 .

    ARITHMETIC_OPERATOR reduce using rule 26 (type -> TYPE_UINT8 .)
    OR              reduce using rule 26 (type -> TYPE_UINT8 .)
    AND             reduce using rule 26 (type -> TYPE_UINT8 .)
    COMPARISON_OPERATOR reduce using rule 26 (type -> TYPE_UINT8 .)
    INTEGER         reduce using rule 26 (type -> TYPE_UINT8 .)
    FLOAT           reduce using rule 26 (type -> TYPE_UINT8 .)
    STRING_LITERAL  reduce using rule 26 (type -> TYPE_UINT8 .)
    ID              reduce using rule 26 (type -> TYPE_UINT8 .)
    LPAREN          reduce using rule 26 (type -> TYPE_UINT8 .)
    NOT             reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_BOOL       reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_STRING     reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_INT        reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_INT8       reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_INT16      reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_INT32      reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_INT64      reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINT       reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINT8      reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINT16     reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINT32     reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINT64     reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINTPTR    reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_FLOAT32    reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_FLOAT64    reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_COMPLEX64  reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_COMPLEX128 reduce using rule 26 (type -> TYPE_UINT8 .)
    CONST           reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE            reduce using rule 26 (type -> TYPE_UINT8 .)
    VAR             reduce using rule 26 (type -> TYPE_UINT8 .)
    FUNC            reduce using rule 26 (type -> TYPE_UINT8 .)
    IMPORT          reduce using rule 26 (type -> TYPE_UINT8 .)
    IF              reduce using rule 26 (type -> TYPE_UINT8 .)
    FOR             reduce using rule 26 (type -> TYPE_UINT8 .)
    RETURN          reduce using rule 26 (type -> TYPE_UINT8 .)
    LBRACKET        reduce using rule 26 (type -> TYPE_UINT8 .)
    STRUCT          reduce using rule 26 (type -> TYPE_UINT8 .)
    ASTERISKS       reduce using rule 26 (type -> TYPE_UINT8 .)
    INTERFACE       reduce using rule 26 (type -> TYPE_UINT8 .)
    MAP             reduce using rule 26 (type -> TYPE_UINT8 .)
    CHAN            reduce using rule 26 (type -> TYPE_UINT8 .)
    CHANNEL_OPERATOR reduce using rule 26 (type -> TYPE_UINT8 .)
    NORMAL_ASSIGNMENT reduce using rule 26 (type -> TYPE_UINT8 .)
    $end            reduce using rule 26 (type -> TYPE_UINT8 .)
    RPAREN          reduce using rule 26 (type -> TYPE_UINT8 .)
    LBRACE          reduce using rule 26 (type -> TYPE_UINT8 .)
    RBRACKET        reduce using rule 26 (type -> TYPE_UINT8 .)
    RBRACE          reduce using rule 26 (type -> TYPE_UINT8 .)
    SEMICOLON       reduce using rule 26 (type -> TYPE_UINT8 .)
    COMMA           reduce using rule 26 (type -> TYPE_UINT8 .)


state 24

    (27) type -> TYPE_UINT16 .

    ARITHMETIC_OPERATOR reduce using rule 27 (type -> TYPE_UINT16 .)
    OR              reduce using rule 27 (type -> TYPE_UINT16 .)
    AND             reduce using rule 27 (type -> TYPE_UINT16 .)
    COMPARISON_OPERATOR reduce using rule 27 (type -> TYPE_UINT16 .)
    INTEGER         reduce using rule 27 (type -> TYPE_UINT16 .)
    FLOAT           reduce using rule 27 (type -> TYPE_UINT16 .)
    STRING_LITERAL  reduce using rule 27 (type -> TYPE_UINT16 .)
    ID              reduce using rule 27 (type -> TYPE_UINT16 .)
    LPAREN          reduce using rule 27 (type -> TYPE_UINT16 .)
    NOT             reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_BOOL       reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_STRING     reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_INT        reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_INT8       reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_INT16      reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_INT32      reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_INT64      reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINT       reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINT8      reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINT16     reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINT32     reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINT64     reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINTPTR    reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_FLOAT32    reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_FLOAT64    reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_COMPLEX64  reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_COMPLEX128 reduce using rule 27 (type -> TYPE_UINT16 .)
    CONST           reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE            reduce using rule 27 (type -> TYPE_UINT16 .)
    VAR             reduce using rule 27 (type -> TYPE_UINT16 .)
    FUNC            reduce using rule 27 (type -> TYPE_UINT16 .)
    IMPORT          reduce using rule 27 (type -> TYPE_UINT16 .)
    IF              reduce using rule 27 (type -> TYPE_UINT16 .)
    FOR             reduce using rule 27 (type -> TYPE_UINT16 .)
    RETURN          reduce using rule 27 (type -> TYPE_UINT16 .)
    LBRACKET        reduce using rule 27 (type -> TYPE_UINT16 .)
    STRUCT          reduce using rule 27 (type -> TYPE_UINT16 .)
    ASTERISKS       reduce using rule 27 (type -> TYPE_UINT16 .)
    INTERFACE       reduce using rule 27 (type -> TYPE_UINT16 .)
    MAP             reduce using rule 27 (type -> TYPE_UINT16 .)
    CHAN            reduce using rule 27 (type -> TYPE_UINT16 .)
    CHANNEL_OPERATOR reduce using rule 27 (type -> TYPE_UINT16 .)
    NORMAL_ASSIGNMENT reduce using rule 27 (type -> TYPE_UINT16 .)
    $end            reduce using rule 27 (type -> TYPE_UINT16 .)
    RPAREN          reduce using rule 27 (type -> TYPE_UINT16 .)
    LBRACE          reduce using rule 27 (type -> TYPE_UINT16 .)
    RBRACKET        reduce using rule 27 (type -> TYPE_UINT16 .)
    RBRACE          reduce using rule 27 (type -> TYPE_UINT16 .)
    SEMICOLON       reduce using rule 27 (type -> TYPE_UINT16 .)
    COMMA           reduce using rule 27 (type -> TYPE_UINT16 .)


state 25

    (28) type -> TYPE_UINT32 .

    ARITHMETIC_OPERATOR reduce using rule 28 (type -> TYPE_UINT32 .)
    OR              reduce using rule 28 (type -> TYPE_UINT32 .)
    AND             reduce using rule 28 (type -> TYPE_UINT32 .)
    COMPARISON_OPERATOR reduce using rule 28 (type -> TYPE_UINT32 .)
    INTEGER         reduce using rule 28 (type -> TYPE_UINT32 .)
    FLOAT           reduce using rule 28 (type -> TYPE_UINT32 .)
    STRING_LITERAL  reduce using rule 28 (type -> TYPE_UINT32 .)
    ID              reduce using rule 28 (type -> TYPE_UINT32 .)
    LPAREN          reduce using rule 28 (type -> TYPE_UINT32 .)
    NOT             reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_BOOL       reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_STRING     reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_INT        reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_INT8       reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_INT16      reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_INT32      reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_INT64      reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINT       reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINT8      reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINT16     reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINT32     reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINT64     reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINTPTR    reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_FLOAT32    reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_FLOAT64    reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_COMPLEX64  reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_COMPLEX128 reduce using rule 28 (type -> TYPE_UINT32 .)
    CONST           reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE            reduce using rule 28 (type -> TYPE_UINT32 .)
    VAR             reduce using rule 28 (type -> TYPE_UINT32 .)
    FUNC            reduce using rule 28 (type -> TYPE_UINT32 .)
    IMPORT          reduce using rule 28 (type -> TYPE_UINT32 .)
    IF              reduce using rule 28 (type -> TYPE_UINT32 .)
    FOR             reduce using rule 28 (type -> TYPE_UINT32 .)
    RETURN          reduce using rule 28 (type -> TYPE_UINT32 .)
    LBRACKET        reduce using rule 28 (type -> TYPE_UINT32 .)
    STRUCT          reduce using rule 28 (type -> TYPE_UINT32 .)
    ASTERISKS       reduce using rule 28 (type -> TYPE_UINT32 .)
    INTERFACE       reduce using rule 28 (type -> TYPE_UINT32 .)
    MAP             reduce using rule 28 (type -> TYPE_UINT32 .)
    CHAN            reduce using rule 28 (type -> TYPE_UINT32 .)
    CHANNEL_OPERATOR reduce using rule 28 (type -> TYPE_UINT32 .)
    NORMAL_ASSIGNMENT reduce using rule 28 (type -> TYPE_UINT32 .)
    $end            reduce using rule 28 (type -> TYPE_UINT32 .)
    RPAREN          reduce using rule 28 (type -> TYPE_UINT32 .)
    LBRACE          reduce using rule 28 (type -> TYPE_UINT32 .)
    RBRACKET        reduce using rule 28 (type -> TYPE_UINT32 .)
    RBRACE          reduce using rule 28 (type -> TYPE_UINT32 .)
    SEMICOLON       reduce using rule 28 (type -> TYPE_UINT32 .)
    COMMA           reduce using rule 28 (type -> TYPE_UINT32 .)


state 26

    (29) type -> TYPE_UINT64 .

    ARITHMETIC_OPERATOR reduce using rule 29 (type -> TYPE_UINT64 .)
    OR              reduce using rule 29 (type -> TYPE_UINT64 .)
    AND             reduce using rule 29 (type -> TYPE_UINT64 .)
    COMPARISON_OPERATOR reduce using rule 29 (type -> TYPE_UINT64 .)
    INTEGER         reduce using rule 29 (type -> TYPE_UINT64 .)
    FLOAT           reduce using rule 29 (type -> TYPE_UINT64 .)
    STRING_LITERAL  reduce using rule 29 (type -> TYPE_UINT64 .)
    ID              reduce using rule 29 (type -> TYPE_UINT64 .)
    LPAREN          reduce using rule 29 (type -> TYPE_UINT64 .)
    NOT             reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_BOOL       reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_STRING     reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_INT        reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_INT8       reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_INT16      reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_INT32      reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_INT64      reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINT       reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINT8      reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINT16     reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINT32     reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINT64     reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINTPTR    reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_FLOAT32    reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_FLOAT64    reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_COMPLEX64  reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_COMPLEX128 reduce using rule 29 (type -> TYPE_UINT64 .)
    CONST           reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE            reduce using rule 29 (type -> TYPE_UINT64 .)
    VAR             reduce using rule 29 (type -> TYPE_UINT64 .)
    FUNC            reduce using rule 29 (type -> TYPE_UINT64 .)
    IMPORT          reduce using rule 29 (type -> TYPE_UINT64 .)
    IF              reduce using rule 29 (type -> TYPE_UINT64 .)
    FOR             reduce using rule 29 (type -> TYPE_UINT64 .)
    RETURN          reduce using rule 29 (type -> TYPE_UINT64 .)
    LBRACKET        reduce using rule 29 (type -> TYPE_UINT64 .)
    STRUCT          reduce using rule 29 (type -> TYPE_UINT64 .)
    ASTERISKS       reduce using rule 29 (type -> TYPE_UINT64 .)
    INTERFACE       reduce using rule 29 (type -> TYPE_UINT64 .)
    MAP             reduce using rule 29 (type -> TYPE_UINT64 .)
    CHAN            reduce using rule 29 (type -> TYPE_UINT64 .)
    CHANNEL_OPERATOR reduce using rule 29 (type -> TYPE_UINT64 .)
    NORMAL_ASSIGNMENT reduce using rule 29 (type -> TYPE_UINT64 .)
    $end            reduce using rule 29 (type -> TYPE_UINT64 .)
    RPAREN          reduce using rule 29 (type -> TYPE_UINT64 .)
    LBRACE          reduce using rule 29 (type -> TYPE_UINT64 .)
    RBRACKET        reduce using rule 29 (type -> TYPE_UINT64 .)
    RBRACE          reduce using rule 29 (type -> TYPE_UINT64 .)
    SEMICOLON       reduce using rule 29 (type -> TYPE_UINT64 .)
    COMMA           reduce using rule 29 (type -> TYPE_UINT64 .)


state 27

    (30) type -> TYPE_UINTPTR .

    ARITHMETIC_OPERATOR reduce using rule 30 (type -> TYPE_UINTPTR .)
    OR              reduce using rule 30 (type -> TYPE_UINTPTR .)
    AND             reduce using rule 30 (type -> TYPE_UINTPTR .)
    COMPARISON_OPERATOR reduce using rule 30 (type -> TYPE_UINTPTR .)
    INTEGER         reduce using rule 30 (type -> TYPE_UINTPTR .)
    FLOAT           reduce using rule 30 (type -> TYPE_UINTPTR .)
    STRING_LITERAL  reduce using rule 30 (type -> TYPE_UINTPTR .)
    ID              reduce using rule 30 (type -> TYPE_UINTPTR .)
    LPAREN          reduce using rule 30 (type -> TYPE_UINTPTR .)
    NOT             reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_BOOL       reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_STRING     reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_INT        reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_INT8       reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_INT16      reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_INT32      reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_INT64      reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINT       reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINT8      reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINT16     reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINT32     reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINT64     reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINTPTR    reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_FLOAT32    reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_FLOAT64    reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_COMPLEX64  reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_COMPLEX128 reduce using rule 30 (type -> TYPE_UINTPTR .)
    CONST           reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE            reduce using rule 30 (type -> TYPE_UINTPTR .)
    VAR             reduce using rule 30 (type -> TYPE_UINTPTR .)
    FUNC            reduce using rule 30 (type -> TYPE_UINTPTR .)
    IMPORT          reduce using rule 30 (type -> TYPE_UINTPTR .)
    IF              reduce using rule 30 (type -> TYPE_UINTPTR .)
    FOR             reduce using rule 30 (type -> TYPE_UINTPTR .)
    RETURN          reduce using rule 30 (type -> TYPE_UINTPTR .)
    LBRACKET        reduce using rule 30 (type -> TYPE_UINTPTR .)
    STRUCT          reduce using rule 30 (type -> TYPE_UINTPTR .)
    ASTERISKS       reduce using rule 30 (type -> TYPE_UINTPTR .)
    INTERFACE       reduce using rule 30 (type -> TYPE_UINTPTR .)
    MAP             reduce using rule 30 (type -> TYPE_UINTPTR .)
    CHAN            reduce using rule 30 (type -> TYPE_UINTPTR .)
    CHANNEL_OPERATOR reduce using rule 30 (type -> TYPE_UINTPTR .)
    NORMAL_ASSIGNMENT reduce using rule 30 (type -> TYPE_UINTPTR .)
    $end            reduce using rule 30 (type -> TYPE_UINTPTR .)
    RPAREN          reduce using rule 30 (type -> TYPE_UINTPTR .)
    LBRACE          reduce using rule 30 (type -> TYPE_UINTPTR .)
    RBRACKET        reduce using rule 30 (type -> TYPE_UINTPTR .)
    RBRACE          reduce using rule 30 (type -> TYPE_UINTPTR .)
    SEMICOLON       reduce using rule 30 (type -> TYPE_UINTPTR .)
    COMMA           reduce using rule 30 (type -> TYPE_UINTPTR .)


state 28

    (31) type -> TYPE_FLOAT32 .

    ARITHMETIC_OPERATOR reduce using rule 31 (type -> TYPE_FLOAT32 .)
    OR              reduce using rule 31 (type -> TYPE_FLOAT32 .)
    AND             reduce using rule 31 (type -> TYPE_FLOAT32 .)
    COMPARISON_OPERATOR reduce using rule 31 (type -> TYPE_FLOAT32 .)
    INTEGER         reduce using rule 31 (type -> TYPE_FLOAT32 .)
    FLOAT           reduce using rule 31 (type -> TYPE_FLOAT32 .)
    STRING_LITERAL  reduce using rule 31 (type -> TYPE_FLOAT32 .)
    ID              reduce using rule 31 (type -> TYPE_FLOAT32 .)
    LPAREN          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    NOT             reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_BOOL       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_STRING     reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_INT        reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_INT8       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_INT16      reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_INT32      reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_INT64      reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINT       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINT8      reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINT16     reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINT32     reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINT64     reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINTPTR    reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_FLOAT32    reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_FLOAT64    reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_COMPLEX64  reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_COMPLEX128 reduce using rule 31 (type -> TYPE_FLOAT32 .)
    CONST           reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE            reduce using rule 31 (type -> TYPE_FLOAT32 .)
    VAR             reduce using rule 31 (type -> TYPE_FLOAT32 .)
    FUNC            reduce using rule 31 (type -> TYPE_FLOAT32 .)
    IMPORT          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    IF              reduce using rule 31 (type -> TYPE_FLOAT32 .)
    FOR             reduce using rule 31 (type -> TYPE_FLOAT32 .)
    RETURN          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    LBRACKET        reduce using rule 31 (type -> TYPE_FLOAT32 .)
    STRUCT          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    ASTERISKS       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    INTERFACE       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    MAP             reduce using rule 31 (type -> TYPE_FLOAT32 .)
    CHAN            reduce using rule 31 (type -> TYPE_FLOAT32 .)
    CHANNEL_OPERATOR reduce using rule 31 (type -> TYPE_FLOAT32 .)
    NORMAL_ASSIGNMENT reduce using rule 31 (type -> TYPE_FLOAT32 .)
    $end            reduce using rule 31 (type -> TYPE_FLOAT32 .)
    RPAREN          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    LBRACE          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    RBRACKET        reduce using rule 31 (type -> TYPE_FLOAT32 .)
    RBRACE          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    SEMICOLON       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    COMMA           reduce using rule 31 (type -> TYPE_FLOAT32 .)


state 29

    (32) type -> TYPE_FLOAT64 .

    ARITHMETIC_OPERATOR reduce using rule 32 (type -> TYPE_FLOAT64 .)
    OR              reduce using rule 32 (type -> TYPE_FLOAT64 .)
    AND             reduce using rule 32 (type -> TYPE_FLOAT64 .)
    COMPARISON_OPERATOR reduce using rule 32 (type -> TYPE_FLOAT64 .)
    INTEGER         reduce using rule 32 (type -> TYPE_FLOAT64 .)
    FLOAT           reduce using rule 32 (type -> TYPE_FLOAT64 .)
    STRING_LITERAL  reduce using rule 32 (type -> TYPE_FLOAT64 .)
    ID              reduce using rule 32 (type -> TYPE_FLOAT64 .)
    LPAREN          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    NOT             reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_BOOL       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_STRING     reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_INT        reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_INT8       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_INT16      reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_INT32      reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_INT64      reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINT       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINT8      reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINT16     reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINT32     reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINT64     reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINTPTR    reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_FLOAT32    reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_FLOAT64    reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_COMPLEX64  reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_COMPLEX128 reduce using rule 32 (type -> TYPE_FLOAT64 .)
    CONST           reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE            reduce using rule 32 (type -> TYPE_FLOAT64 .)
    VAR             reduce using rule 32 (type -> TYPE_FLOAT64 .)
    FUNC            reduce using rule 32 (type -> TYPE_FLOAT64 .)
    IMPORT          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    IF              reduce using rule 32 (type -> TYPE_FLOAT64 .)
    FOR             reduce using rule 32 (type -> TYPE_FLOAT64 .)
    RETURN          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    LBRACKET        reduce using rule 32 (type -> TYPE_FLOAT64 .)
    STRUCT          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    ASTERISKS       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    INTERFACE       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    MAP             reduce using rule 32 (type -> TYPE_FLOAT64 .)
    CHAN            reduce using rule 32 (type -> TYPE_FLOAT64 .)
    CHANNEL_OPERATOR reduce using rule 32 (type -> TYPE_FLOAT64 .)
    NORMAL_ASSIGNMENT reduce using rule 32 (type -> TYPE_FLOAT64 .)
    $end            reduce using rule 32 (type -> TYPE_FLOAT64 .)
    RPAREN          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    LBRACE          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    RBRACKET        reduce using rule 32 (type -> TYPE_FLOAT64 .)
    RBRACE          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    SEMICOLON       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    COMMA           reduce using rule 32 (type -> TYPE_FLOAT64 .)


state 30

    (33) type -> TYPE_COMPLEX64 .

    ARITHMETIC_OPERATOR reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    OR              reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    AND             reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    COMPARISON_OPERATOR reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    INTEGER         reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    FLOAT           reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    STRING_LITERAL  reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    ID              reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    LPAREN          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    NOT             reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_BOOL       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_STRING     reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_INT        reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_INT8       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_INT16      reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_INT32      reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_INT64      reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINT       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINT8      reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINT16     reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINT32     reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINT64     reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINTPTR    reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_FLOAT32    reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_FLOAT64    reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_COMPLEX64  reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_COMPLEX128 reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    CONST           reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE            reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    VAR             reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    FUNC            reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    IMPORT          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    IF              reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    FOR             reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    RETURN          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    LBRACKET        reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    STRUCT          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    ASTERISKS       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    INTERFACE       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    MAP             reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    CHAN            reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    CHANNEL_OPERATOR reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    NORMAL_ASSIGNMENT reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    $end            reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    RPAREN          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    LBRACE          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    RBRACKET        reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    RBRACE          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    SEMICOLON       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    COMMA           reduce using rule 33 (type -> TYPE_COMPLEX64 .)


state 31

    (34) type -> TYPE_COMPLEX128 .

    ARITHMETIC_OPERATOR reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    OR              reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    AND             reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    COMPARISON_OPERATOR reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    INTEGER         reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    FLOAT           reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    STRING_LITERAL  reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    ID              reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    LPAREN          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    NOT             reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_BOOL       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_STRING     reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_INT        reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_INT8       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_INT16      reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_INT32      reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_INT64      reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINT       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINT8      reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINT16     reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINT32     reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINT64     reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINTPTR    reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_FLOAT32    reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_FLOAT64    reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_COMPLEX64  reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_COMPLEX128 reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    CONST           reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE            reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    VAR             reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    FUNC            reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    IMPORT          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    IF              reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    FOR             reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    RETURN          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    LBRACKET        reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    STRUCT          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    ASTERISKS       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    INTERFACE       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    MAP             reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    CHAN            reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    CHANNEL_OPERATOR reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    NORMAL_ASSIGNMENT reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    $end            reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    RPAREN          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    LBRACE          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    RBRACKET        reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    RBRACE          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    SEMICOLON       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    COMMA           reduce using rule 34 (type -> TYPE_COMPLEX128 .)


state 32

    (43) type -> type_lit .

    ARITHMETIC_OPERATOR reduce using rule 43 (type -> type_lit .)
    OR              reduce using rule 43 (type -> type_lit .)
    AND             reduce using rule 43 (type -> type_lit .)
    COMPARISON_OPERATOR reduce using rule 43 (type -> type_lit .)
    INTEGER         reduce using rule 43 (type -> type_lit .)
    FLOAT           reduce using rule 43 (type -> type_lit .)
    STRING_LITERAL  reduce using rule 43 (type -> type_lit .)
    ID              reduce using rule 43 (type -> type_lit .)
    LPAREN          reduce using rule 43 (type -> type_lit .)
    NOT             reduce using rule 43 (type -> type_lit .)
    TYPE_BOOL       reduce using rule 43 (type -> type_lit .)
    TYPE_STRING     reduce using rule 43 (type -> type_lit .)
    TYPE_INT        reduce using rule 43 (type -> type_lit .)
    TYPE_INT8       reduce using rule 43 (type -> type_lit .)
    TYPE_INT16      reduce using rule 43 (type -> type_lit .)
    TYPE_INT32      reduce using rule 43 (type -> type_lit .)
    TYPE_INT64      reduce using rule 43 (type -> type_lit .)
    TYPE_UINT       reduce using rule 43 (type -> type_lit .)
    TYPE_UINT8      reduce using rule 43 (type -> type_lit .)
    TYPE_UINT16     reduce using rule 43 (type -> type_lit .)
    TYPE_UINT32     reduce using rule 43 (type -> type_lit .)
    TYPE_UINT64     reduce using rule 43 (type -> type_lit .)
    TYPE_UINTPTR    reduce using rule 43 (type -> type_lit .)
    TYPE_FLOAT32    reduce using rule 43 (type -> type_lit .)
    TYPE_FLOAT64    reduce using rule 43 (type -> type_lit .)
    TYPE_COMPLEX64  reduce using rule 43 (type -> type_lit .)
    TYPE_COMPLEX128 reduce using rule 43 (type -> type_lit .)
    CONST           reduce using rule 43 (type -> type_lit .)
    TYPE            reduce using rule 43 (type -> type_lit .)
    VAR             reduce using rule 43 (type -> type_lit .)
    FUNC            reduce using rule 43 (type -> type_lit .)
    IMPORT          reduce using rule 43 (type -> type_lit .)
    IF              reduce using rule 43 (type -> type_lit .)
    FOR             reduce using rule 43 (type -> type_lit .)
    RETURN          reduce using rule 43 (type -> type_lit .)
    LBRACKET        reduce using rule 43 (type -> type_lit .)
    STRUCT          reduce using rule 43 (type -> type_lit .)
    ASTERISKS       reduce using rule 43 (type -> type_lit .)
    INTERFACE       reduce using rule 43 (type -> type_lit .)
    MAP             reduce using rule 43 (type -> type_lit .)
    CHAN            reduce using rule 43 (type -> type_lit .)
    CHANNEL_OPERATOR reduce using rule 43 (type -> type_lit .)
    NORMAL_ASSIGNMENT reduce using rule 43 (type -> type_lit .)
    $end            reduce using rule 43 (type -> type_lit .)
    RPAREN          reduce using rule 43 (type -> type_lit .)
    LBRACE          reduce using rule 43 (type -> type_lit .)
    RBRACKET        reduce using rule 43 (type -> type_lit .)
    RBRACE          reduce using rule 43 (type -> type_lit .)
    SEMICOLON       reduce using rule 43 (type -> type_lit .)
    COMMA           reduce using rule 43 (type -> type_lit .)


state 33

    (81) declaration -> const_decl .

    ARITHMETIC_OPERATOR reduce using rule 81 (declaration -> const_decl .)
    OR              reduce using rule 81 (declaration -> const_decl .)
    AND             reduce using rule 81 (declaration -> const_decl .)
    COMPARISON_OPERATOR reduce using rule 81 (declaration -> const_decl .)
    INTEGER         reduce using rule 81 (declaration -> const_decl .)
    FLOAT           reduce using rule 81 (declaration -> const_decl .)
    STRING_LITERAL  reduce using rule 81 (declaration -> const_decl .)
    ID              reduce using rule 81 (declaration -> const_decl .)
    LPAREN          reduce using rule 81 (declaration -> const_decl .)
    NOT             reduce using rule 81 (declaration -> const_decl .)
    TYPE_BOOL       reduce using rule 81 (declaration -> const_decl .)
    TYPE_STRING     reduce using rule 81 (declaration -> const_decl .)
    TYPE_INT        reduce using rule 81 (declaration -> const_decl .)
    TYPE_INT8       reduce using rule 81 (declaration -> const_decl .)
    TYPE_INT16      reduce using rule 81 (declaration -> const_decl .)
    TYPE_INT32      reduce using rule 81 (declaration -> const_decl .)
    TYPE_INT64      reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINT       reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINT8      reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINT16     reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINT32     reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINT64     reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINTPTR    reduce using rule 81 (declaration -> const_decl .)
    TYPE_FLOAT32    reduce using rule 81 (declaration -> const_decl .)
    TYPE_FLOAT64    reduce using rule 81 (declaration -> const_decl .)
    TYPE_COMPLEX64  reduce using rule 81 (declaration -> const_decl .)
    TYPE_COMPLEX128 reduce using rule 81 (declaration -> const_decl .)
    CONST           reduce using rule 81 (declaration -> const_decl .)
    TYPE            reduce using rule 81 (declaration -> const_decl .)
    VAR             reduce using rule 81 (declaration -> const_decl .)
    FUNC            reduce using rule 81 (declaration -> const_decl .)
    IMPORT          reduce using rule 81 (declaration -> const_decl .)
    IF              reduce using rule 81 (declaration -> const_decl .)
    FOR             reduce using rule 81 (declaration -> const_decl .)
    RETURN          reduce using rule 81 (declaration -> const_decl .)
    LBRACKET        reduce using rule 81 (declaration -> const_decl .)
    STRUCT          reduce using rule 81 (declaration -> const_decl .)
    ASTERISKS       reduce using rule 81 (declaration -> const_decl .)
    INTERFACE       reduce using rule 81 (declaration -> const_decl .)
    MAP             reduce using rule 81 (declaration -> const_decl .)
    CHAN            reduce using rule 81 (declaration -> const_decl .)
    CHANNEL_OPERATOR reduce using rule 81 (declaration -> const_decl .)
    NORMAL_ASSIGNMENT reduce using rule 81 (declaration -> const_decl .)
    $end            reduce using rule 81 (declaration -> const_decl .)
    RPAREN          reduce using rule 81 (declaration -> const_decl .)
    LBRACE          reduce using rule 81 (declaration -> const_decl .)
    RBRACKET        reduce using rule 81 (declaration -> const_decl .)
    RBRACE          reduce using rule 81 (declaration -> const_decl .)
    SEMICOLON       reduce using rule 81 (declaration -> const_decl .)


state 34

    (82) declaration -> type_decl .

    ARITHMETIC_OPERATOR reduce using rule 82 (declaration -> type_decl .)
    OR              reduce using rule 82 (declaration -> type_decl .)
    AND             reduce using rule 82 (declaration -> type_decl .)
    COMPARISON_OPERATOR reduce using rule 82 (declaration -> type_decl .)
    INTEGER         reduce using rule 82 (declaration -> type_decl .)
    FLOAT           reduce using rule 82 (declaration -> type_decl .)
    STRING_LITERAL  reduce using rule 82 (declaration -> type_decl .)
    ID              reduce using rule 82 (declaration -> type_decl .)
    LPAREN          reduce using rule 82 (declaration -> type_decl .)
    NOT             reduce using rule 82 (declaration -> type_decl .)
    TYPE_BOOL       reduce using rule 82 (declaration -> type_decl .)
    TYPE_STRING     reduce using rule 82 (declaration -> type_decl .)
    TYPE_INT        reduce using rule 82 (declaration -> type_decl .)
    TYPE_INT8       reduce using rule 82 (declaration -> type_decl .)
    TYPE_INT16      reduce using rule 82 (declaration -> type_decl .)
    TYPE_INT32      reduce using rule 82 (declaration -> type_decl .)
    TYPE_INT64      reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINT       reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINT8      reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINT16     reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINT32     reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINT64     reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINTPTR    reduce using rule 82 (declaration -> type_decl .)
    TYPE_FLOAT32    reduce using rule 82 (declaration -> type_decl .)
    TYPE_FLOAT64    reduce using rule 82 (declaration -> type_decl .)
    TYPE_COMPLEX64  reduce using rule 82 (declaration -> type_decl .)
    TYPE_COMPLEX128 reduce using rule 82 (declaration -> type_decl .)
    CONST           reduce using rule 82 (declaration -> type_decl .)
    TYPE            reduce using rule 82 (declaration -> type_decl .)
    VAR             reduce using rule 82 (declaration -> type_decl .)
    FUNC            reduce using rule 82 (declaration -> type_decl .)
    IMPORT          reduce using rule 82 (declaration -> type_decl .)
    IF              reduce using rule 82 (declaration -> type_decl .)
    FOR             reduce using rule 82 (declaration -> type_decl .)
    RETURN          reduce using rule 82 (declaration -> type_decl .)
    LBRACKET        reduce using rule 82 (declaration -> type_decl .)
    STRUCT          reduce using rule 82 (declaration -> type_decl .)
    ASTERISKS       reduce using rule 82 (declaration -> type_decl .)
    INTERFACE       reduce using rule 82 (declaration -> type_decl .)
    MAP             reduce using rule 82 (declaration -> type_decl .)
    CHAN            reduce using rule 82 (declaration -> type_decl .)
    CHANNEL_OPERATOR reduce using rule 82 (declaration -> type_decl .)
    NORMAL_ASSIGNMENT reduce using rule 82 (declaration -> type_decl .)
    $end            reduce using rule 82 (declaration -> type_decl .)
    RPAREN          reduce using rule 82 (declaration -> type_decl .)
    LBRACE          reduce using rule 82 (declaration -> type_decl .)
    RBRACKET        reduce using rule 82 (declaration -> type_decl .)
    RBRACE          reduce using rule 82 (declaration -> type_decl .)
    SEMICOLON       reduce using rule 82 (declaration -> type_decl .)


state 35

    (83) declaration -> var_decl .

    ARITHMETIC_OPERATOR reduce using rule 83 (declaration -> var_decl .)
    OR              reduce using rule 83 (declaration -> var_decl .)
    AND             reduce using rule 83 (declaration -> var_decl .)
    COMPARISON_OPERATOR reduce using rule 83 (declaration -> var_decl .)
    INTEGER         reduce using rule 83 (declaration -> var_decl .)
    FLOAT           reduce using rule 83 (declaration -> var_decl .)
    STRING_LITERAL  reduce using rule 83 (declaration -> var_decl .)
    ID              reduce using rule 83 (declaration -> var_decl .)
    LPAREN          reduce using rule 83 (declaration -> var_decl .)
    NOT             reduce using rule 83 (declaration -> var_decl .)
    TYPE_BOOL       reduce using rule 83 (declaration -> var_decl .)
    TYPE_STRING     reduce using rule 83 (declaration -> var_decl .)
    TYPE_INT        reduce using rule 83 (declaration -> var_decl .)
    TYPE_INT8       reduce using rule 83 (declaration -> var_decl .)
    TYPE_INT16      reduce using rule 83 (declaration -> var_decl .)
    TYPE_INT32      reduce using rule 83 (declaration -> var_decl .)
    TYPE_INT64      reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINT       reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINT8      reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINT16     reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINT32     reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINT64     reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINTPTR    reduce using rule 83 (declaration -> var_decl .)
    TYPE_FLOAT32    reduce using rule 83 (declaration -> var_decl .)
    TYPE_FLOAT64    reduce using rule 83 (declaration -> var_decl .)
    TYPE_COMPLEX64  reduce using rule 83 (declaration -> var_decl .)
    TYPE_COMPLEX128 reduce using rule 83 (declaration -> var_decl .)
    CONST           reduce using rule 83 (declaration -> var_decl .)
    TYPE            reduce using rule 83 (declaration -> var_decl .)
    VAR             reduce using rule 83 (declaration -> var_decl .)
    FUNC            reduce using rule 83 (declaration -> var_decl .)
    IMPORT          reduce using rule 83 (declaration -> var_decl .)
    IF              reduce using rule 83 (declaration -> var_decl .)
    FOR             reduce using rule 83 (declaration -> var_decl .)
    RETURN          reduce using rule 83 (declaration -> var_decl .)
    LBRACKET        reduce using rule 83 (declaration -> var_decl .)
    STRUCT          reduce using rule 83 (declaration -> var_decl .)
    ASTERISKS       reduce using rule 83 (declaration -> var_decl .)
    INTERFACE       reduce using rule 83 (declaration -> var_decl .)
    MAP             reduce using rule 83 (declaration -> var_decl .)
    CHAN            reduce using rule 83 (declaration -> var_decl .)
    CHANNEL_OPERATOR reduce using rule 83 (declaration -> var_decl .)
    NORMAL_ASSIGNMENT reduce using rule 83 (declaration -> var_decl .)
    $end            reduce using rule 83 (declaration -> var_decl .)
    RPAREN          reduce using rule 83 (declaration -> var_decl .)
    LBRACE          reduce using rule 83 (declaration -> var_decl .)
    RBRACKET        reduce using rule 83 (declaration -> var_decl .)
    RBRACE          reduce using rule 83 (declaration -> var_decl .)
    SEMICOLON       reduce using rule 83 (declaration -> var_decl .)


state 36

    (84) declaration -> func_decl .

    ARITHMETIC_OPERATOR reduce using rule 84 (declaration -> func_decl .)
    OR              reduce using rule 84 (declaration -> func_decl .)
    AND             reduce using rule 84 (declaration -> func_decl .)
    COMPARISON_OPERATOR reduce using rule 84 (declaration -> func_decl .)
    INTEGER         reduce using rule 84 (declaration -> func_decl .)
    FLOAT           reduce using rule 84 (declaration -> func_decl .)
    STRING_LITERAL  reduce using rule 84 (declaration -> func_decl .)
    ID              reduce using rule 84 (declaration -> func_decl .)
    LPAREN          reduce using rule 84 (declaration -> func_decl .)
    NOT             reduce using rule 84 (declaration -> func_decl .)
    TYPE_BOOL       reduce using rule 84 (declaration -> func_decl .)
    TYPE_STRING     reduce using rule 84 (declaration -> func_decl .)
    TYPE_INT        reduce using rule 84 (declaration -> func_decl .)
    TYPE_INT8       reduce using rule 84 (declaration -> func_decl .)
    TYPE_INT16      reduce using rule 84 (declaration -> func_decl .)
    TYPE_INT32      reduce using rule 84 (declaration -> func_decl .)
    TYPE_INT64      reduce using rule 84 (declaration -> func_decl .)
    TYPE_UINT       reduce using rule 84 (declaration -> func_decl .)
    TYPE_UINT8      reduce using rule 84 (declaration -> func_decl .)
    TYPE_UINT16     reduce using rule 84 (declaration -> func_decl .)
    TYPE_UINT32     reduce using rule 84 (declaration -> func_decl .)
    TYPE_UINT64     reduce using rule 84 (declaration -> func_decl .)
    TYPE_UINTPTR    reduce using rule 84 (declaration -> func_decl .)
    TYPE_FLOAT32    reduce using rule 84 (declaration -> func_decl .)
    TYPE_FLOAT64    reduce using rule 84 (declaration -> func_decl .)
    TYPE_COMPLEX64  reduce using rule 84 (declaration -> func_decl .)
    TYPE_COMPLEX128 reduce using rule 84 (declaration -> func_decl .)
    CONST           reduce using rule 84 (declaration -> func_decl .)
    TYPE            reduce using rule 84 (declaration -> func_decl .)
    VAR             reduce using rule 84 (declaration -> func_decl .)
    FUNC            reduce using rule 84 (declaration -> func_decl .)
    IMPORT          reduce using rule 84 (declaration -> func_decl .)
    IF              reduce using rule 84 (declaration -> func_decl .)
    FOR             reduce using rule 84 (declaration -> func_decl .)
    RETURN          reduce using rule 84 (declaration -> func_decl .)
    LBRACKET        reduce using rule 84 (declaration -> func_decl .)
    STRUCT          reduce using rule 84 (declaration -> func_decl .)
    ASTERISKS       reduce using rule 84 (declaration -> func_decl .)
    INTERFACE       reduce using rule 84 (declaration -> func_decl .)
    MAP             reduce using rule 84 (declaration -> func_decl .)
    CHAN            reduce using rule 84 (declaration -> func_decl .)
    CHANNEL_OPERATOR reduce using rule 84 (declaration -> func_decl .)
    NORMAL_ASSIGNMENT reduce using rule 84 (declaration -> func_decl .)
    $end            reduce using rule 84 (declaration -> func_decl .)
    RPAREN          reduce using rule 84 (declaration -> func_decl .)
    LBRACE          reduce using rule 84 (declaration -> func_decl .)
    RBRACKET        reduce using rule 84 (declaration -> func_decl .)
    RBRACE          reduce using rule 84 (declaration -> func_decl .)
    SEMICOLON       reduce using rule 84 (declaration -> func_decl .)


state 37

    (85) declaration -> import_decl .

    ARITHMETIC_OPERATOR reduce using rule 85 (declaration -> import_decl .)
    OR              reduce using rule 85 (declaration -> import_decl .)
    AND             reduce using rule 85 (declaration -> import_decl .)
    COMPARISON_OPERATOR reduce using rule 85 (declaration -> import_decl .)
    INTEGER         reduce using rule 85 (declaration -> import_decl .)
    FLOAT           reduce using rule 85 (declaration -> import_decl .)
    STRING_LITERAL  reduce using rule 85 (declaration -> import_decl .)
    ID              reduce using rule 85 (declaration -> import_decl .)
    LPAREN          reduce using rule 85 (declaration -> import_decl .)
    NOT             reduce using rule 85 (declaration -> import_decl .)
    TYPE_BOOL       reduce using rule 85 (declaration -> import_decl .)
    TYPE_STRING     reduce using rule 85 (declaration -> import_decl .)
    TYPE_INT        reduce using rule 85 (declaration -> import_decl .)
    TYPE_INT8       reduce using rule 85 (declaration -> import_decl .)
    TYPE_INT16      reduce using rule 85 (declaration -> import_decl .)
    TYPE_INT32      reduce using rule 85 (declaration -> import_decl .)
    TYPE_INT64      reduce using rule 85 (declaration -> import_decl .)
    TYPE_UINT       reduce using rule 85 (declaration -> import_decl .)
    TYPE_UINT8      reduce using rule 85 (declaration -> import_decl .)
    TYPE_UINT16     reduce using rule 85 (declaration -> import_decl .)
    TYPE_UINT32     reduce using rule 85 (declaration -> import_decl .)
    TYPE_UINT64     reduce using rule 85 (declaration -> import_decl .)
    TYPE_UINTPTR    reduce using rule 85 (declaration -> import_decl .)
    TYPE_FLOAT32    reduce using rule 85 (declaration -> import_decl .)
    TYPE_FLOAT64    reduce using rule 85 (declaration -> import_decl .)
    TYPE_COMPLEX64  reduce using rule 85 (declaration -> import_decl .)
    TYPE_COMPLEX128 reduce using rule 85 (declaration -> import_decl .)
    CONST           reduce using rule 85 (declaration -> import_decl .)
    TYPE            reduce using rule 85 (declaration -> import_decl .)
    VAR             reduce using rule 85 (declaration -> import_decl .)
    FUNC            reduce using rule 85 (declaration -> import_decl .)
    IMPORT          reduce using rule 85 (declaration -> import_decl .)
    IF              reduce using rule 85 (declaration -> import_decl .)
    FOR             reduce using rule 85 (declaration -> import_decl .)
    RETURN          reduce using rule 85 (declaration -> import_decl .)
    LBRACKET        reduce using rule 85 (declaration -> import_decl .)
    STRUCT          reduce using rule 85 (declaration -> import_decl .)
    ASTERISKS       reduce using rule 85 (declaration -> import_decl .)
    INTERFACE       reduce using rule 85 (declaration -> import_decl .)
    MAP             reduce using rule 85 (declaration -> import_decl .)
    CHAN            reduce using rule 85 (declaration -> import_decl .)
    CHANNEL_OPERATOR reduce using rule 85 (declaration -> import_decl .)
    NORMAL_ASSIGNMENT reduce using rule 85 (declaration -> import_decl .)
    $end            reduce using rule 85 (declaration -> import_decl .)
    RPAREN          reduce using rule 85 (declaration -> import_decl .)
    LBRACE          reduce using rule 85 (declaration -> import_decl .)
    RBRACKET        reduce using rule 85 (declaration -> import_decl .)
    RBRACE          reduce using rule 85 (declaration -> import_decl .)
    SEMICOLON       reduce using rule 85 (declaration -> import_decl .)


state 38

    (106) statement -> if_statement .

    ARITHMETIC_OPERATOR reduce using rule 106 (statement -> if_statement .)
    OR              reduce using rule 106 (statement -> if_statement .)
    AND             reduce using rule 106 (statement -> if_statement .)
    COMPARISON_OPERATOR reduce using rule 106 (statement -> if_statement .)
    INTEGER         reduce using rule 106 (statement -> if_statement .)
    FLOAT           reduce using rule 106 (statement -> if_statement .)
    STRING_LITERAL  reduce using rule 106 (statement -> if_statement .)
    ID              reduce using rule 106 (statement -> if_statement .)
    LPAREN          reduce using rule 106 (statement -> if_statement .)
    NOT             reduce using rule 106 (statement -> if_statement .)
    TYPE_BOOL       reduce using rule 106 (statement -> if_statement .)
    TYPE_STRING     reduce using rule 106 (statement -> if_statement .)
    TYPE_INT        reduce using rule 106 (statement -> if_statement .)
    TYPE_INT8       reduce using rule 106 (statement -> if_statement .)
    TYPE_INT16      reduce using rule 106 (statement -> if_statement .)
    TYPE_INT32      reduce using rule 106 (statement -> if_statement .)
    TYPE_INT64      reduce using rule 106 (statement -> if_statement .)
    TYPE_UINT       reduce using rule 106 (statement -> if_statement .)
    TYPE_UINT8      reduce using rule 106 (statement -> if_statement .)
    TYPE_UINT16     reduce using rule 106 (statement -> if_statement .)
    TYPE_UINT32     reduce using rule 106 (statement -> if_statement .)
    TYPE_UINT64     reduce using rule 106 (statement -> if_statement .)
    TYPE_UINTPTR    reduce using rule 106 (statement -> if_statement .)
    TYPE_FLOAT32    reduce using rule 106 (statement -> if_statement .)
    TYPE_FLOAT64    reduce using rule 106 (statement -> if_statement .)
    TYPE_COMPLEX64  reduce using rule 106 (statement -> if_statement .)
    TYPE_COMPLEX128 reduce using rule 106 (statement -> if_statement .)
    CONST           reduce using rule 106 (statement -> if_statement .)
    TYPE            reduce using rule 106 (statement -> if_statement .)
    VAR             reduce using rule 106 (statement -> if_statement .)
    FUNC            reduce using rule 106 (statement -> if_statement .)
    IMPORT          reduce using rule 106 (statement -> if_statement .)
    IF              reduce using rule 106 (statement -> if_statement .)
    FOR             reduce using rule 106 (statement -> if_statement .)
    RETURN          reduce using rule 106 (statement -> if_statement .)
    LBRACKET        reduce using rule 106 (statement -> if_statement .)
    STRUCT          reduce using rule 106 (statement -> if_statement .)
    ASTERISKS       reduce using rule 106 (statement -> if_statement .)
    INTERFACE       reduce using rule 106 (statement -> if_statement .)
    MAP             reduce using rule 106 (statement -> if_statement .)
    CHAN            reduce using rule 106 (statement -> if_statement .)
    CHANNEL_OPERATOR reduce using rule 106 (statement -> if_statement .)
    NORMAL_ASSIGNMENT reduce using rule 106 (statement -> if_statement .)
    $end            reduce using rule 106 (statement -> if_statement .)
    RPAREN          reduce using rule 106 (statement -> if_statement .)
    LBRACE          reduce using rule 106 (statement -> if_statement .)
    RBRACKET        reduce using rule 106 (statement -> if_statement .)
    RBRACE          reduce using rule 106 (statement -> if_statement .)
    SEMICOLON       reduce using rule 106 (statement -> if_statement .)


state 39

    (107) statement -> for_statement .

    ARITHMETIC_OPERATOR reduce using rule 107 (statement -> for_statement .)
    OR              reduce using rule 107 (statement -> for_statement .)
    AND             reduce using rule 107 (statement -> for_statement .)
    COMPARISON_OPERATOR reduce using rule 107 (statement -> for_statement .)
    INTEGER         reduce using rule 107 (statement -> for_statement .)
    FLOAT           reduce using rule 107 (statement -> for_statement .)
    STRING_LITERAL  reduce using rule 107 (statement -> for_statement .)
    ID              reduce using rule 107 (statement -> for_statement .)
    LPAREN          reduce using rule 107 (statement -> for_statement .)
    NOT             reduce using rule 107 (statement -> for_statement .)
    TYPE_BOOL       reduce using rule 107 (statement -> for_statement .)
    TYPE_STRING     reduce using rule 107 (statement -> for_statement .)
    TYPE_INT        reduce using rule 107 (statement -> for_statement .)
    TYPE_INT8       reduce using rule 107 (statement -> for_statement .)
    TYPE_INT16      reduce using rule 107 (statement -> for_statement .)
    TYPE_INT32      reduce using rule 107 (statement -> for_statement .)
    TYPE_INT64      reduce using rule 107 (statement -> for_statement .)
    TYPE_UINT       reduce using rule 107 (statement -> for_statement .)
    TYPE_UINT8      reduce using rule 107 (statement -> for_statement .)
    TYPE_UINT16     reduce using rule 107 (statement -> for_statement .)
    TYPE_UINT32     reduce using rule 107 (statement -> for_statement .)
    TYPE_UINT64     reduce using rule 107 (statement -> for_statement .)
    TYPE_UINTPTR    reduce using rule 107 (statement -> for_statement .)
    TYPE_FLOAT32    reduce using rule 107 (statement -> for_statement .)
    TYPE_FLOAT64    reduce using rule 107 (statement -> for_statement .)
    TYPE_COMPLEX64  reduce using rule 107 (statement -> for_statement .)
    TYPE_COMPLEX128 reduce using rule 107 (statement -> for_statement .)
    CONST           reduce using rule 107 (statement -> for_statement .)
    TYPE            reduce using rule 107 (statement -> for_statement .)
    VAR             reduce using rule 107 (statement -> for_statement .)
    FUNC            reduce using rule 107 (statement -> for_statement .)
    IMPORT          reduce using rule 107 (statement -> for_statement .)
    IF              reduce using rule 107 (statement -> for_statement .)
    FOR             reduce using rule 107 (statement -> for_statement .)
    RETURN          reduce using rule 107 (statement -> for_statement .)
    LBRACKET        reduce using rule 107 (statement -> for_statement .)
    STRUCT          reduce using rule 107 (statement -> for_statement .)
    ASTERISKS       reduce using rule 107 (statement -> for_statement .)
    INTERFACE       reduce using rule 107 (statement -> for_statement .)
    MAP             reduce using rule 107 (statement -> for_statement .)
    CHAN            reduce using rule 107 (statement -> for_statement .)
    CHANNEL_OPERATOR reduce using rule 107 (statement -> for_statement .)
    NORMAL_ASSIGNMENT reduce using rule 107 (statement -> for_statement .)
    $end            reduce using rule 107 (statement -> for_statement .)
    RPAREN          reduce using rule 107 (statement -> for_statement .)
    LBRACE          reduce using rule 107 (statement -> for_statement .)
    RBRACKET        reduce using rule 107 (statement -> for_statement .)
    RBRACE          reduce using rule 107 (statement -> for_statement .)
    SEMICOLON       reduce using rule 107 (statement -> for_statement .)


state 40

    (108) statement -> assignment_statement .

    ARITHMETIC_OPERATOR reduce using rule 108 (statement -> assignment_statement .)
    OR              reduce using rule 108 (statement -> assignment_statement .)
    AND             reduce using rule 108 (statement -> assignment_statement .)
    COMPARISON_OPERATOR reduce using rule 108 (statement -> assignment_statement .)
    INTEGER         reduce using rule 108 (statement -> assignment_statement .)
    FLOAT           reduce using rule 108 (statement -> assignment_statement .)
    STRING_LITERAL  reduce using rule 108 (statement -> assignment_statement .)
    ID              reduce using rule 108 (statement -> assignment_statement .)
    LPAREN          reduce using rule 108 (statement -> assignment_statement .)
    NOT             reduce using rule 108 (statement -> assignment_statement .)
    TYPE_BOOL       reduce using rule 108 (statement -> assignment_statement .)
    TYPE_STRING     reduce using rule 108 (statement -> assignment_statement .)
    TYPE_INT        reduce using rule 108 (statement -> assignment_statement .)
    TYPE_INT8       reduce using rule 108 (statement -> assignment_statement .)
    TYPE_INT16      reduce using rule 108 (statement -> assignment_statement .)
    TYPE_INT32      reduce using rule 108 (statement -> assignment_statement .)
    TYPE_INT64      reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINT       reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINT8      reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINT16     reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINT32     reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINT64     reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINTPTR    reduce using rule 108 (statement -> assignment_statement .)
    TYPE_FLOAT32    reduce using rule 108 (statement -> assignment_statement .)
    TYPE_FLOAT64    reduce using rule 108 (statement -> assignment_statement .)
    TYPE_COMPLEX64  reduce using rule 108 (statement -> assignment_statement .)
    TYPE_COMPLEX128 reduce using rule 108 (statement -> assignment_statement .)
    CONST           reduce using rule 108 (statement -> assignment_statement .)
    TYPE            reduce using rule 108 (statement -> assignment_statement .)
    VAR             reduce using rule 108 (statement -> assignment_statement .)
    FUNC            reduce using rule 108 (statement -> assignment_statement .)
    IMPORT          reduce using rule 108 (statement -> assignment_statement .)
    IF              reduce using rule 108 (statement -> assignment_statement .)
    FOR             reduce using rule 108 (statement -> assignment_statement .)
    RETURN          reduce using rule 108 (statement -> assignment_statement .)
    LBRACKET        reduce using rule 108 (statement -> assignment_statement .)
    STRUCT          reduce using rule 108 (statement -> assignment_statement .)
    ASTERISKS       reduce using rule 108 (statement -> assignment_statement .)
    INTERFACE       reduce using rule 108 (statement -> assignment_statement .)
    MAP             reduce using rule 108 (statement -> assignment_statement .)
    CHAN            reduce using rule 108 (statement -> assignment_statement .)
    CHANNEL_OPERATOR reduce using rule 108 (statement -> assignment_statement .)
    NORMAL_ASSIGNMENT reduce using rule 108 (statement -> assignment_statement .)
    $end            reduce using rule 108 (statement -> assignment_statement .)
    RPAREN          reduce using rule 108 (statement -> assignment_statement .)
    LBRACE          reduce using rule 108 (statement -> assignment_statement .)
    RBRACKET        reduce using rule 108 (statement -> assignment_statement .)
    RBRACE          reduce using rule 108 (statement -> assignment_statement .)
    SEMICOLON       reduce using rule 108 (statement -> assignment_statement .)


state 41

    (109) statement -> return_statement .

    ARITHMETIC_OPERATOR reduce using rule 109 (statement -> return_statement .)
    OR              reduce using rule 109 (statement -> return_statement .)
    AND             reduce using rule 109 (statement -> return_statement .)
    COMPARISON_OPERATOR reduce using rule 109 (statement -> return_statement .)
    INTEGER         reduce using rule 109 (statement -> return_statement .)
    FLOAT           reduce using rule 109 (statement -> return_statement .)
    STRING_LITERAL  reduce using rule 109 (statement -> return_statement .)
    ID              reduce using rule 109 (statement -> return_statement .)
    LPAREN          reduce using rule 109 (statement -> return_statement .)
    NOT             reduce using rule 109 (statement -> return_statement .)
    TYPE_BOOL       reduce using rule 109 (statement -> return_statement .)
    TYPE_STRING     reduce using rule 109 (statement -> return_statement .)
    TYPE_INT        reduce using rule 109 (statement -> return_statement .)
    TYPE_INT8       reduce using rule 109 (statement -> return_statement .)
    TYPE_INT16      reduce using rule 109 (statement -> return_statement .)
    TYPE_INT32      reduce using rule 109 (statement -> return_statement .)
    TYPE_INT64      reduce using rule 109 (statement -> return_statement .)
    TYPE_UINT       reduce using rule 109 (statement -> return_statement .)
    TYPE_UINT8      reduce using rule 109 (statement -> return_statement .)
    TYPE_UINT16     reduce using rule 109 (statement -> return_statement .)
    TYPE_UINT32     reduce using rule 109 (statement -> return_statement .)
    TYPE_UINT64     reduce using rule 109 (statement -> return_statement .)
    TYPE_UINTPTR    reduce using rule 109 (statement -> return_statement .)
    TYPE_FLOAT32    reduce using rule 109 (statement -> return_statement .)
    TYPE_FLOAT64    reduce using rule 109 (statement -> return_statement .)
    TYPE_COMPLEX64  reduce using rule 109 (statement -> return_statement .)
    TYPE_COMPLEX128 reduce using rule 109 (statement -> return_statement .)
    CONST           reduce using rule 109 (statement -> return_statement .)
    TYPE            reduce using rule 109 (statement -> return_statement .)
    VAR             reduce using rule 109 (statement -> return_statement .)
    FUNC            reduce using rule 109 (statement -> return_statement .)
    IMPORT          reduce using rule 109 (statement -> return_statement .)
    IF              reduce using rule 109 (statement -> return_statement .)
    FOR             reduce using rule 109 (statement -> return_statement .)
    RETURN          reduce using rule 109 (statement -> return_statement .)
    LBRACKET        reduce using rule 109 (statement -> return_statement .)
    STRUCT          reduce using rule 109 (statement -> return_statement .)
    ASTERISKS       reduce using rule 109 (statement -> return_statement .)
    INTERFACE       reduce using rule 109 (statement -> return_statement .)
    MAP             reduce using rule 109 (statement -> return_statement .)
    CHAN            reduce using rule 109 (statement -> return_statement .)
    CHANNEL_OPERATOR reduce using rule 109 (statement -> return_statement .)
    NORMAL_ASSIGNMENT reduce using rule 109 (statement -> return_statement .)
    $end            reduce using rule 109 (statement -> return_statement .)
    RPAREN          reduce using rule 109 (statement -> return_statement .)
    LBRACE          reduce using rule 109 (statement -> return_statement .)
    RBRACKET        reduce using rule 109 (statement -> return_statement .)
    RBRACE          reduce using rule 109 (statement -> return_statement .)
    SEMICOLON       reduce using rule 109 (statement -> return_statement .)


state 42

    (35) type_lit -> array_type .

    ARITHMETIC_OPERATOR reduce using rule 35 (type_lit -> array_type .)
    OR              reduce using rule 35 (type_lit -> array_type .)
    AND             reduce using rule 35 (type_lit -> array_type .)
    COMPARISON_OPERATOR reduce using rule 35 (type_lit -> array_type .)
    INTEGER         reduce using rule 35 (type_lit -> array_type .)
    FLOAT           reduce using rule 35 (type_lit -> array_type .)
    STRING_LITERAL  reduce using rule 35 (type_lit -> array_type .)
    ID              reduce using rule 35 (type_lit -> array_type .)
    LPAREN          reduce using rule 35 (type_lit -> array_type .)
    NOT             reduce using rule 35 (type_lit -> array_type .)
    TYPE_BOOL       reduce using rule 35 (type_lit -> array_type .)
    TYPE_STRING     reduce using rule 35 (type_lit -> array_type .)
    TYPE_INT        reduce using rule 35 (type_lit -> array_type .)
    TYPE_INT8       reduce using rule 35 (type_lit -> array_type .)
    TYPE_INT16      reduce using rule 35 (type_lit -> array_type .)
    TYPE_INT32      reduce using rule 35 (type_lit -> array_type .)
    TYPE_INT64      reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINT       reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINT8      reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINT16     reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINT32     reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINT64     reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINTPTR    reduce using rule 35 (type_lit -> array_type .)
    TYPE_FLOAT32    reduce using rule 35 (type_lit -> array_type .)
    TYPE_FLOAT64    reduce using rule 35 (type_lit -> array_type .)
    TYPE_COMPLEX64  reduce using rule 35 (type_lit -> array_type .)
    TYPE_COMPLEX128 reduce using rule 35 (type_lit -> array_type .)
    CONST           reduce using rule 35 (type_lit -> array_type .)
    TYPE            reduce using rule 35 (type_lit -> array_type .)
    VAR             reduce using rule 35 (type_lit -> array_type .)
    FUNC            reduce using rule 35 (type_lit -> array_type .)
    IMPORT          reduce using rule 35 (type_lit -> array_type .)
    IF              reduce using rule 35 (type_lit -> array_type .)
    FOR             reduce using rule 35 (type_lit -> array_type .)
    RETURN          reduce using rule 35 (type_lit -> array_type .)
    LBRACKET        reduce using rule 35 (type_lit -> array_type .)
    STRUCT          reduce using rule 35 (type_lit -> array_type .)
    ASTERISKS       reduce using rule 35 (type_lit -> array_type .)
    INTERFACE       reduce using rule 35 (type_lit -> array_type .)
    MAP             reduce using rule 35 (type_lit -> array_type .)
    CHAN            reduce using rule 35 (type_lit -> array_type .)
    CHANNEL_OPERATOR reduce using rule 35 (type_lit -> array_type .)
    NORMAL_ASSIGNMENT reduce using rule 35 (type_lit -> array_type .)
    $end            reduce using rule 35 (type_lit -> array_type .)
    RPAREN          reduce using rule 35 (type_lit -> array_type .)
    LBRACE          reduce using rule 35 (type_lit -> array_type .)
    RBRACKET        reduce using rule 35 (type_lit -> array_type .)
    RBRACE          reduce using rule 35 (type_lit -> array_type .)
    SEMICOLON       reduce using rule 35 (type_lit -> array_type .)
    COMMA           reduce using rule 35 (type_lit -> array_type .)


state 43

    (36) type_lit -> slice_type .

    ARITHMETIC_OPERATOR reduce using rule 36 (type_lit -> slice_type .)
    OR              reduce using rule 36 (type_lit -> slice_type .)
    AND             reduce using rule 36 (type_lit -> slice_type .)
    COMPARISON_OPERATOR reduce using rule 36 (type_lit -> slice_type .)
    INTEGER         reduce using rule 36 (type_lit -> slice_type .)
    FLOAT           reduce using rule 36 (type_lit -> slice_type .)
    STRING_LITERAL  reduce using rule 36 (type_lit -> slice_type .)
    ID              reduce using rule 36 (type_lit -> slice_type .)
    LPAREN          reduce using rule 36 (type_lit -> slice_type .)
    NOT             reduce using rule 36 (type_lit -> slice_type .)
    TYPE_BOOL       reduce using rule 36 (type_lit -> slice_type .)
    TYPE_STRING     reduce using rule 36 (type_lit -> slice_type .)
    TYPE_INT        reduce using rule 36 (type_lit -> slice_type .)
    TYPE_INT8       reduce using rule 36 (type_lit -> slice_type .)
    TYPE_INT16      reduce using rule 36 (type_lit -> slice_type .)
    TYPE_INT32      reduce using rule 36 (type_lit -> slice_type .)
    TYPE_INT64      reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINT       reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINT8      reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINT16     reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINT32     reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINT64     reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINTPTR    reduce using rule 36 (type_lit -> slice_type .)
    TYPE_FLOAT32    reduce using rule 36 (type_lit -> slice_type .)
    TYPE_FLOAT64    reduce using rule 36 (type_lit -> slice_type .)
    TYPE_COMPLEX64  reduce using rule 36 (type_lit -> slice_type .)
    TYPE_COMPLEX128 reduce using rule 36 (type_lit -> slice_type .)
    CONST           reduce using rule 36 (type_lit -> slice_type .)
    TYPE            reduce using rule 36 (type_lit -> slice_type .)
    VAR             reduce using rule 36 (type_lit -> slice_type .)
    FUNC            reduce using rule 36 (type_lit -> slice_type .)
    IMPORT          reduce using rule 36 (type_lit -> slice_type .)
    IF              reduce using rule 36 (type_lit -> slice_type .)
    FOR             reduce using rule 36 (type_lit -> slice_type .)
    RETURN          reduce using rule 36 (type_lit -> slice_type .)
    LBRACKET        reduce using rule 36 (type_lit -> slice_type .)
    STRUCT          reduce using rule 36 (type_lit -> slice_type .)
    ASTERISKS       reduce using rule 36 (type_lit -> slice_type .)
    INTERFACE       reduce using rule 36 (type_lit -> slice_type .)
    MAP             reduce using rule 36 (type_lit -> slice_type .)
    CHAN            reduce using rule 36 (type_lit -> slice_type .)
    CHANNEL_OPERATOR reduce using rule 36 (type_lit -> slice_type .)
    NORMAL_ASSIGNMENT reduce using rule 36 (type_lit -> slice_type .)
    $end            reduce using rule 36 (type_lit -> slice_type .)
    RPAREN          reduce using rule 36 (type_lit -> slice_type .)
    LBRACE          reduce using rule 36 (type_lit -> slice_type .)
    RBRACKET        reduce using rule 36 (type_lit -> slice_type .)
    RBRACE          reduce using rule 36 (type_lit -> slice_type .)
    SEMICOLON       reduce using rule 36 (type_lit -> slice_type .)
    COMMA           reduce using rule 36 (type_lit -> slice_type .)


state 44

    (37) type_lit -> struct_type .

    ARITHMETIC_OPERATOR reduce using rule 37 (type_lit -> struct_type .)
    OR              reduce using rule 37 (type_lit -> struct_type .)
    AND             reduce using rule 37 (type_lit -> struct_type .)
    COMPARISON_OPERATOR reduce using rule 37 (type_lit -> struct_type .)
    INTEGER         reduce using rule 37 (type_lit -> struct_type .)
    FLOAT           reduce using rule 37 (type_lit -> struct_type .)
    STRING_LITERAL  reduce using rule 37 (type_lit -> struct_type .)
    ID              reduce using rule 37 (type_lit -> struct_type .)
    LPAREN          reduce using rule 37 (type_lit -> struct_type .)
    NOT             reduce using rule 37 (type_lit -> struct_type .)
    TYPE_BOOL       reduce using rule 37 (type_lit -> struct_type .)
    TYPE_STRING     reduce using rule 37 (type_lit -> struct_type .)
    TYPE_INT        reduce using rule 37 (type_lit -> struct_type .)
    TYPE_INT8       reduce using rule 37 (type_lit -> struct_type .)
    TYPE_INT16      reduce using rule 37 (type_lit -> struct_type .)
    TYPE_INT32      reduce using rule 37 (type_lit -> struct_type .)
    TYPE_INT64      reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINT       reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINT8      reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINT16     reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINT32     reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINT64     reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINTPTR    reduce using rule 37 (type_lit -> struct_type .)
    TYPE_FLOAT32    reduce using rule 37 (type_lit -> struct_type .)
    TYPE_FLOAT64    reduce using rule 37 (type_lit -> struct_type .)
    TYPE_COMPLEX64  reduce using rule 37 (type_lit -> struct_type .)
    TYPE_COMPLEX128 reduce using rule 37 (type_lit -> struct_type .)
    CONST           reduce using rule 37 (type_lit -> struct_type .)
    TYPE            reduce using rule 37 (type_lit -> struct_type .)
    VAR             reduce using rule 37 (type_lit -> struct_type .)
    FUNC            reduce using rule 37 (type_lit -> struct_type .)
    IMPORT          reduce using rule 37 (type_lit -> struct_type .)
    IF              reduce using rule 37 (type_lit -> struct_type .)
    FOR             reduce using rule 37 (type_lit -> struct_type .)
    RETURN          reduce using rule 37 (type_lit -> struct_type .)
    LBRACKET        reduce using rule 37 (type_lit -> struct_type .)
    STRUCT          reduce using rule 37 (type_lit -> struct_type .)
    ASTERISKS       reduce using rule 37 (type_lit -> struct_type .)
    INTERFACE       reduce using rule 37 (type_lit -> struct_type .)
    MAP             reduce using rule 37 (type_lit -> struct_type .)
    CHAN            reduce using rule 37 (type_lit -> struct_type .)
    CHANNEL_OPERATOR reduce using rule 37 (type_lit -> struct_type .)
    NORMAL_ASSIGNMENT reduce using rule 37 (type_lit -> struct_type .)
    $end            reduce using rule 37 (type_lit -> struct_type .)
    RPAREN          reduce using rule 37 (type_lit -> struct_type .)
    LBRACE          reduce using rule 37 (type_lit -> struct_type .)
    RBRACKET        reduce using rule 37 (type_lit -> struct_type .)
    RBRACE          reduce using rule 37 (type_lit -> struct_type .)
    SEMICOLON       reduce using rule 37 (type_lit -> struct_type .)
    COMMA           reduce using rule 37 (type_lit -> struct_type .)


state 45

    (38) type_lit -> pointer_type .

    ARITHMETIC_OPERATOR reduce using rule 38 (type_lit -> pointer_type .)
    OR              reduce using rule 38 (type_lit -> pointer_type .)
    AND             reduce using rule 38 (type_lit -> pointer_type .)
    COMPARISON_OPERATOR reduce using rule 38 (type_lit -> pointer_type .)
    INTEGER         reduce using rule 38 (type_lit -> pointer_type .)
    FLOAT           reduce using rule 38 (type_lit -> pointer_type .)
    STRING_LITERAL  reduce using rule 38 (type_lit -> pointer_type .)
    ID              reduce using rule 38 (type_lit -> pointer_type .)
    LPAREN          reduce using rule 38 (type_lit -> pointer_type .)
    NOT             reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_BOOL       reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_STRING     reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_INT        reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_INT8       reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_INT16      reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_INT32      reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_INT64      reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINT       reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINT8      reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINT16     reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINT32     reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINT64     reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINTPTR    reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_FLOAT32    reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_FLOAT64    reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_COMPLEX64  reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_COMPLEX128 reduce using rule 38 (type_lit -> pointer_type .)
    CONST           reduce using rule 38 (type_lit -> pointer_type .)
    TYPE            reduce using rule 38 (type_lit -> pointer_type .)
    VAR             reduce using rule 38 (type_lit -> pointer_type .)
    FUNC            reduce using rule 38 (type_lit -> pointer_type .)
    IMPORT          reduce using rule 38 (type_lit -> pointer_type .)
    IF              reduce using rule 38 (type_lit -> pointer_type .)
    FOR             reduce using rule 38 (type_lit -> pointer_type .)
    RETURN          reduce using rule 38 (type_lit -> pointer_type .)
    LBRACKET        reduce using rule 38 (type_lit -> pointer_type .)
    STRUCT          reduce using rule 38 (type_lit -> pointer_type .)
    ASTERISKS       reduce using rule 38 (type_lit -> pointer_type .)
    INTERFACE       reduce using rule 38 (type_lit -> pointer_type .)
    MAP             reduce using rule 38 (type_lit -> pointer_type .)
    CHAN            reduce using rule 38 (type_lit -> pointer_type .)
    CHANNEL_OPERATOR reduce using rule 38 (type_lit -> pointer_type .)
    NORMAL_ASSIGNMENT reduce using rule 38 (type_lit -> pointer_type .)
    $end            reduce using rule 38 (type_lit -> pointer_type .)
    RPAREN          reduce using rule 38 (type_lit -> pointer_type .)
    LBRACE          reduce using rule 38 (type_lit -> pointer_type .)
    RBRACKET        reduce using rule 38 (type_lit -> pointer_type .)
    RBRACE          reduce using rule 38 (type_lit -> pointer_type .)
    SEMICOLON       reduce using rule 38 (type_lit -> pointer_type .)
    COMMA           reduce using rule 38 (type_lit -> pointer_type .)


state 46

    (39) type_lit -> function_type .

    ARITHMETIC_OPERATOR reduce using rule 39 (type_lit -> function_type .)
    OR              reduce using rule 39 (type_lit -> function_type .)
    AND             reduce using rule 39 (type_lit -> function_type .)
    COMPARISON_OPERATOR reduce using rule 39 (type_lit -> function_type .)
    INTEGER         reduce using rule 39 (type_lit -> function_type .)
    FLOAT           reduce using rule 39 (type_lit -> function_type .)
    STRING_LITERAL  reduce using rule 39 (type_lit -> function_type .)
    ID              reduce using rule 39 (type_lit -> function_type .)
    LPAREN          reduce using rule 39 (type_lit -> function_type .)
    NOT             reduce using rule 39 (type_lit -> function_type .)
    TYPE_BOOL       reduce using rule 39 (type_lit -> function_type .)
    TYPE_STRING     reduce using rule 39 (type_lit -> function_type .)
    TYPE_INT        reduce using rule 39 (type_lit -> function_type .)
    TYPE_INT8       reduce using rule 39 (type_lit -> function_type .)
    TYPE_INT16      reduce using rule 39 (type_lit -> function_type .)
    TYPE_INT32      reduce using rule 39 (type_lit -> function_type .)
    TYPE_INT64      reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINT       reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINT8      reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINT16     reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINT32     reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINT64     reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINTPTR    reduce using rule 39 (type_lit -> function_type .)
    TYPE_FLOAT32    reduce using rule 39 (type_lit -> function_type .)
    TYPE_FLOAT64    reduce using rule 39 (type_lit -> function_type .)
    TYPE_COMPLEX64  reduce using rule 39 (type_lit -> function_type .)
    TYPE_COMPLEX128 reduce using rule 39 (type_lit -> function_type .)
    CONST           reduce using rule 39 (type_lit -> function_type .)
    TYPE            reduce using rule 39 (type_lit -> function_type .)
    VAR             reduce using rule 39 (type_lit -> function_type .)
    FUNC            reduce using rule 39 (type_lit -> function_type .)
    IMPORT          reduce using rule 39 (type_lit -> function_type .)
    IF              reduce using rule 39 (type_lit -> function_type .)
    FOR             reduce using rule 39 (type_lit -> function_type .)
    RETURN          reduce using rule 39 (type_lit -> function_type .)
    LBRACKET        reduce using rule 39 (type_lit -> function_type .)
    STRUCT          reduce using rule 39 (type_lit -> function_type .)
    ASTERISKS       reduce using rule 39 (type_lit -> function_type .)
    INTERFACE       reduce using rule 39 (type_lit -> function_type .)
    MAP             reduce using rule 39 (type_lit -> function_type .)
    CHAN            reduce using rule 39 (type_lit -> function_type .)
    CHANNEL_OPERATOR reduce using rule 39 (type_lit -> function_type .)
    NORMAL_ASSIGNMENT reduce using rule 39 (type_lit -> function_type .)
    $end            reduce using rule 39 (type_lit -> function_type .)
    RPAREN          reduce using rule 39 (type_lit -> function_type .)
    LBRACE          reduce using rule 39 (type_lit -> function_type .)
    RBRACKET        reduce using rule 39 (type_lit -> function_type .)
    RBRACE          reduce using rule 39 (type_lit -> function_type .)
    SEMICOLON       reduce using rule 39 (type_lit -> function_type .)
    COMMA           reduce using rule 39 (type_lit -> function_type .)


state 47

    (40) type_lit -> interface_type .

    ARITHMETIC_OPERATOR reduce using rule 40 (type_lit -> interface_type .)
    OR              reduce using rule 40 (type_lit -> interface_type .)
    AND             reduce using rule 40 (type_lit -> interface_type .)
    COMPARISON_OPERATOR reduce using rule 40 (type_lit -> interface_type .)
    INTEGER         reduce using rule 40 (type_lit -> interface_type .)
    FLOAT           reduce using rule 40 (type_lit -> interface_type .)
    STRING_LITERAL  reduce using rule 40 (type_lit -> interface_type .)
    ID              reduce using rule 40 (type_lit -> interface_type .)
    LPAREN          reduce using rule 40 (type_lit -> interface_type .)
    NOT             reduce using rule 40 (type_lit -> interface_type .)
    TYPE_BOOL       reduce using rule 40 (type_lit -> interface_type .)
    TYPE_STRING     reduce using rule 40 (type_lit -> interface_type .)
    TYPE_INT        reduce using rule 40 (type_lit -> interface_type .)
    TYPE_INT8       reduce using rule 40 (type_lit -> interface_type .)
    TYPE_INT16      reduce using rule 40 (type_lit -> interface_type .)
    TYPE_INT32      reduce using rule 40 (type_lit -> interface_type .)
    TYPE_INT64      reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINT       reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINT8      reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINT16     reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINT32     reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINT64     reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINTPTR    reduce using rule 40 (type_lit -> interface_type .)
    TYPE_FLOAT32    reduce using rule 40 (type_lit -> interface_type .)
    TYPE_FLOAT64    reduce using rule 40 (type_lit -> interface_type .)
    TYPE_COMPLEX64  reduce using rule 40 (type_lit -> interface_type .)
    TYPE_COMPLEX128 reduce using rule 40 (type_lit -> interface_type .)
    CONST           reduce using rule 40 (type_lit -> interface_type .)
    TYPE            reduce using rule 40 (type_lit -> interface_type .)
    VAR             reduce using rule 40 (type_lit -> interface_type .)
    FUNC            reduce using rule 40 (type_lit -> interface_type .)
    IMPORT          reduce using rule 40 (type_lit -> interface_type .)
    IF              reduce using rule 40 (type_lit -> interface_type .)
    FOR             reduce using rule 40 (type_lit -> interface_type .)
    RETURN          reduce using rule 40 (type_lit -> interface_type .)
    LBRACKET        reduce using rule 40 (type_lit -> interface_type .)
    STRUCT          reduce using rule 40 (type_lit -> interface_type .)
    ASTERISKS       reduce using rule 40 (type_lit -> interface_type .)
    INTERFACE       reduce using rule 40 (type_lit -> interface_type .)
    MAP             reduce using rule 40 (type_lit -> interface_type .)
    CHAN            reduce using rule 40 (type_lit -> interface_type .)
    CHANNEL_OPERATOR reduce using rule 40 (type_lit -> interface_type .)
    NORMAL_ASSIGNMENT reduce using rule 40 (type_lit -> interface_type .)
    $end            reduce using rule 40 (type_lit -> interface_type .)
    RPAREN          reduce using rule 40 (type_lit -> interface_type .)
    LBRACE          reduce using rule 40 (type_lit -> interface_type .)
    RBRACKET        reduce using rule 40 (type_lit -> interface_type .)
    RBRACE          reduce using rule 40 (type_lit -> interface_type .)
    SEMICOLON       reduce using rule 40 (type_lit -> interface_type .)
    COMMA           reduce using rule 40 (type_lit -> interface_type .)


state 48

    (41) type_lit -> map_type .

    ARITHMETIC_OPERATOR reduce using rule 41 (type_lit -> map_type .)
    OR              reduce using rule 41 (type_lit -> map_type .)
    AND             reduce using rule 41 (type_lit -> map_type .)
    COMPARISON_OPERATOR reduce using rule 41 (type_lit -> map_type .)
    INTEGER         reduce using rule 41 (type_lit -> map_type .)
    FLOAT           reduce using rule 41 (type_lit -> map_type .)
    STRING_LITERAL  reduce using rule 41 (type_lit -> map_type .)
    ID              reduce using rule 41 (type_lit -> map_type .)
    LPAREN          reduce using rule 41 (type_lit -> map_type .)
    NOT             reduce using rule 41 (type_lit -> map_type .)
    TYPE_BOOL       reduce using rule 41 (type_lit -> map_type .)
    TYPE_STRING     reduce using rule 41 (type_lit -> map_type .)
    TYPE_INT        reduce using rule 41 (type_lit -> map_type .)
    TYPE_INT8       reduce using rule 41 (type_lit -> map_type .)
    TYPE_INT16      reduce using rule 41 (type_lit -> map_type .)
    TYPE_INT32      reduce using rule 41 (type_lit -> map_type .)
    TYPE_INT64      reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINT       reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINT8      reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINT16     reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINT32     reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINT64     reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINTPTR    reduce using rule 41 (type_lit -> map_type .)
    TYPE_FLOAT32    reduce using rule 41 (type_lit -> map_type .)
    TYPE_FLOAT64    reduce using rule 41 (type_lit -> map_type .)
    TYPE_COMPLEX64  reduce using rule 41 (type_lit -> map_type .)
    TYPE_COMPLEX128 reduce using rule 41 (type_lit -> map_type .)
    CONST           reduce using rule 41 (type_lit -> map_type .)
    TYPE            reduce using rule 41 (type_lit -> map_type .)
    VAR             reduce using rule 41 (type_lit -> map_type .)
    FUNC            reduce using rule 41 (type_lit -> map_type .)
    IMPORT          reduce using rule 41 (type_lit -> map_type .)
    IF              reduce using rule 41 (type_lit -> map_type .)
    FOR             reduce using rule 41 (type_lit -> map_type .)
    RETURN          reduce using rule 41 (type_lit -> map_type .)
    LBRACKET        reduce using rule 41 (type_lit -> map_type .)
    STRUCT          reduce using rule 41 (type_lit -> map_type .)
    ASTERISKS       reduce using rule 41 (type_lit -> map_type .)
    INTERFACE       reduce using rule 41 (type_lit -> map_type .)
    MAP             reduce using rule 41 (type_lit -> map_type .)
    CHAN            reduce using rule 41 (type_lit -> map_type .)
    CHANNEL_OPERATOR reduce using rule 41 (type_lit -> map_type .)
    NORMAL_ASSIGNMENT reduce using rule 41 (type_lit -> map_type .)
    $end            reduce using rule 41 (type_lit -> map_type .)
    RPAREN          reduce using rule 41 (type_lit -> map_type .)
    LBRACE          reduce using rule 41 (type_lit -> map_type .)
    RBRACKET        reduce using rule 41 (type_lit -> map_type .)
    RBRACE          reduce using rule 41 (type_lit -> map_type .)
    SEMICOLON       reduce using rule 41 (type_lit -> map_type .)
    COMMA           reduce using rule 41 (type_lit -> map_type .)


state 49

    (42) type_lit -> channel_type .

    ARITHMETIC_OPERATOR reduce using rule 42 (type_lit -> channel_type .)
    OR              reduce using rule 42 (type_lit -> channel_type .)
    AND             reduce using rule 42 (type_lit -> channel_type .)
    COMPARISON_OPERATOR reduce using rule 42 (type_lit -> channel_type .)
    INTEGER         reduce using rule 42 (type_lit -> channel_type .)
    FLOAT           reduce using rule 42 (type_lit -> channel_type .)
    STRING_LITERAL  reduce using rule 42 (type_lit -> channel_type .)
    ID              reduce using rule 42 (type_lit -> channel_type .)
    LPAREN          reduce using rule 42 (type_lit -> channel_type .)
    NOT             reduce using rule 42 (type_lit -> channel_type .)
    TYPE_BOOL       reduce using rule 42 (type_lit -> channel_type .)
    TYPE_STRING     reduce using rule 42 (type_lit -> channel_type .)
    TYPE_INT        reduce using rule 42 (type_lit -> channel_type .)
    TYPE_INT8       reduce using rule 42 (type_lit -> channel_type .)
    TYPE_INT16      reduce using rule 42 (type_lit -> channel_type .)
    TYPE_INT32      reduce using rule 42 (type_lit -> channel_type .)
    TYPE_INT64      reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINT       reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINT8      reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINT16     reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINT32     reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINT64     reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINTPTR    reduce using rule 42 (type_lit -> channel_type .)
    TYPE_FLOAT32    reduce using rule 42 (type_lit -> channel_type .)
    TYPE_FLOAT64    reduce using rule 42 (type_lit -> channel_type .)
    TYPE_COMPLEX64  reduce using rule 42 (type_lit -> channel_type .)
    TYPE_COMPLEX128 reduce using rule 42 (type_lit -> channel_type .)
    CONST           reduce using rule 42 (type_lit -> channel_type .)
    TYPE            reduce using rule 42 (type_lit -> channel_type .)
    VAR             reduce using rule 42 (type_lit -> channel_type .)
    FUNC            reduce using rule 42 (type_lit -> channel_type .)
    IMPORT          reduce using rule 42 (type_lit -> channel_type .)
    IF              reduce using rule 42 (type_lit -> channel_type .)
    FOR             reduce using rule 42 (type_lit -> channel_type .)
    RETURN          reduce using rule 42 (type_lit -> channel_type .)
    LBRACKET        reduce using rule 42 (type_lit -> channel_type .)
    STRUCT          reduce using rule 42 (type_lit -> channel_type .)
    ASTERISKS       reduce using rule 42 (type_lit -> channel_type .)
    INTERFACE       reduce using rule 42 (type_lit -> channel_type .)
    MAP             reduce using rule 42 (type_lit -> channel_type .)
    CHAN            reduce using rule 42 (type_lit -> channel_type .)
    CHANNEL_OPERATOR reduce using rule 42 (type_lit -> channel_type .)
    NORMAL_ASSIGNMENT reduce using rule 42 (type_lit -> channel_type .)
    $end            reduce using rule 42 (type_lit -> channel_type .)
    RPAREN          reduce using rule 42 (type_lit -> channel_type .)
    LBRACE          reduce using rule 42 (type_lit -> channel_type .)
    RBRACKET        reduce using rule 42 (type_lit -> channel_type .)
    RBRACE          reduce using rule 42 (type_lit -> channel_type .)
    SEMICOLON       reduce using rule 42 (type_lit -> channel_type .)
    COMMA           reduce using rule 42 (type_lit -> channel_type .)


state 50

    (87) const_decl -> CONST . const_spec
    (88) const_decl -> CONST . LPAREN const_spec RPAREN
    (89) const_spec -> . identifier_list NORMAL_ASSIGNMENT expression_list
    (90) const_spec -> . identifier_list type NORMAL_ASSIGNMENT expression_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    LPAREN          shift and go to state 77
    ID              shift and go to state 79

    const_spec                     shift and go to state 76
    identifier_list                shift and go to state 78

state 51

    (91) type_decl -> TYPE . type_spec
    (92) type_decl -> TYPE . LPAREN type_spec RPAREN
    (93) type_spec -> . alias_decl
    (94) type_spec -> . type_def
    (95) alias_decl -> . ID NORMAL_ASSIGNMENT type
    (96) type_def -> . ID type

    LPAREN          shift and go to state 81
    ID              shift and go to state 84

    type_spec                      shift and go to state 80
    alias_decl                     shift and go to state 82
    type_def                       shift and go to state 83

state 52

    (97) var_decl -> VAR . var_spec
    (98) var_decl -> VAR . LPAREN var_spec RPAREN
    (99) var_spec -> . identifier_list type
    (100) var_spec -> . identifier_list type NORMAL_ASSIGNMENT expression_list
    (101) var_spec -> . identifier_list NORMAL_ASSIGNMENT expression_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    LPAREN          shift and go to state 86
    ID              shift and go to state 79

    var_spec                       shift and go to state 85
    identifier_list                shift and go to state 87

state 53

    (102) func_decl -> FUNC . ID signature
    (103) func_decl -> FUNC . ID signature block
    (57) function_type -> FUNC . signature
    (58) signature -> . parameters
    (59) signature -> . parameters result
    (63) parameters -> . LPAREN RPAREN
    (64) parameters -> . LPAREN parameter_list RPAREN

    ID              shift and go to state 88
    LPAREN          shift and go to state 91

    signature                      shift and go to state 89
    parameters                     shift and go to state 90

state 54

    (104) import_decl -> IMPORT . string_lit
    (105) import_decl -> IMPORT . LPAREN string_lit RPAREN
    (55) string_lit -> . STRING_LITERAL

    LPAREN          shift and go to state 93
    STRING_LITERAL  shift and go to state 94

    string_lit                     shift and go to state 92

state 55

    (112) if_statement -> IF . expression block
    (113) if_statement -> IF . expression block ELSE block
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 95
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 56

    (114) for_statement -> FOR . expression block
    (115) for_statement -> FOR . for_clause block
    (116) for_statement -> FOR . range_clause block
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (117) for_clause -> . assignment_statement SEMICOLON expression SEMICOLON expression
    (119) range_clause -> . expression_list NORMAL_ASSIGNMENT RANGE expression
    (120) range_clause -> . identifier_list NORMAL_ASSIGNMENT RANGE expression
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 99
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 96
    for_clause                     shift and go to state 97
    range_clause                   shift and go to state 98
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    assignment_statement           shift and go to state 100
    expression_list                shift and go to state 101
    identifier_list                shift and go to state 102
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 57

    (121) return_statement -> RETURN . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression_list                shift and go to state 103
    expression                     shift and go to state 3
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 58

    (44) array_type -> LBRACKET . expression RBRACKET type
    (45) slice_type -> LBRACKET . RBRACKET type
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    RBRACKET        shift and go to state 105
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 104
    type                           shift and go to state 12
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 59

    (46) struct_type -> STRUCT . LBRACE RBRACE
    (47) struct_type -> STRUCT . LBRACE field_decl RBRACE

    LBRACE          shift and go to state 106


state 60

    (56) pointer_type -> ASTERISKS . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 107
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 61

    (71) interface_type -> INTERFACE . LBRACE method_spec RBRACE

    LBRACE          shift and go to state 109


state 62

    (76) map_type -> MAP . LBRACKET key_type RBRACKET type

    LBRACKET        shift and go to state 110


state 63

    (78) channel_type -> CHAN . type
    (79) channel_type -> CHAN . CHANNEL_OPERATOR type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    CHANNEL_OPERATOR shift and go to state 112
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63

    type                           shift and go to state 111
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 64

    (80) channel_type -> CHANNEL_OPERATOR . CHAN type

    CHAN            shift and go to state 113


state 65

    (118) assignment_statement -> expression_list NORMAL_ASSIGNMENT . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression_list                shift and go to state 114
    expression                     shift and go to state 3
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 66

    (8) expression_list -> expression expression_list .
    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

  ! shift/reduce conflict for NORMAL_ASSIGNMENT resolved as shift
    $end            reduce using rule 8 (expression_list -> expression expression_list .)
    ARITHMETIC_OPERATOR reduce using rule 8 (expression_list -> expression expression_list .)
    OR              reduce using rule 8 (expression_list -> expression expression_list .)
    AND             reduce using rule 8 (expression_list -> expression expression_list .)
    COMPARISON_OPERATOR reduce using rule 8 (expression_list -> expression expression_list .)
    INTEGER         reduce using rule 8 (expression_list -> expression expression_list .)
    FLOAT           reduce using rule 8 (expression_list -> expression expression_list .)
    STRING_LITERAL  reduce using rule 8 (expression_list -> expression expression_list .)
    ID              reduce using rule 8 (expression_list -> expression expression_list .)
    LPAREN          reduce using rule 8 (expression_list -> expression expression_list .)
    NOT             reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_BOOL       reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_STRING     reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_INT        reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_INT8       reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_INT16      reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_INT32      reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_INT64      reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINT       reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINT8      reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINT16     reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINT32     reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINT64     reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINTPTR    reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_FLOAT32    reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_FLOAT64    reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_COMPLEX64  reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_COMPLEX128 reduce using rule 8 (expression_list -> expression expression_list .)
    CONST           reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE            reduce using rule 8 (expression_list -> expression expression_list .)
    VAR             reduce using rule 8 (expression_list -> expression expression_list .)
    FUNC            reduce using rule 8 (expression_list -> expression expression_list .)
    IMPORT          reduce using rule 8 (expression_list -> expression expression_list .)
    IF              reduce using rule 8 (expression_list -> expression expression_list .)
    FOR             reduce using rule 8 (expression_list -> expression expression_list .)
    RETURN          reduce using rule 8 (expression_list -> expression expression_list .)
    LBRACKET        reduce using rule 8 (expression_list -> expression expression_list .)
    STRUCT          reduce using rule 8 (expression_list -> expression expression_list .)
    ASTERISKS       reduce using rule 8 (expression_list -> expression expression_list .)
    INTERFACE       reduce using rule 8 (expression_list -> expression expression_list .)
    MAP             reduce using rule 8 (expression_list -> expression expression_list .)
    CHAN            reduce using rule 8 (expression_list -> expression expression_list .)
    CHANNEL_OPERATOR reduce using rule 8 (expression_list -> expression expression_list .)
    RPAREN          reduce using rule 8 (expression_list -> expression expression_list .)
    LBRACE          reduce using rule 8 (expression_list -> expression expression_list .)
    RBRACKET        reduce using rule 8 (expression_list -> expression expression_list .)
    RBRACE          reduce using rule 8 (expression_list -> expression expression_list .)
    SEMICOLON       reduce using rule 8 (expression_list -> expression expression_list .)
    NORMAL_ASSIGNMENT shift and go to state 65

  ! NORMAL_ASSIGNMENT [ reduce using rule 8 (expression_list -> expression expression_list .) ]


state 67

    (6) expression -> expression ARITHMETIC_OPERATOR . expression
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 115
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 68

    (9) expression -> expression OR . expression
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 116
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 69

    (10) expression -> expression AND . expression
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 117
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 70

    (12) expression -> expression COMPARISON_OPERATOR . expression
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 118
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 71

    (13) arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT . expression
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 119
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 72

    (14) unary_assignment -> ID UNARY_ASSIGNMENT .

    ARITHMETIC_OPERATOR reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    OR              reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    AND             reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    COMPARISON_OPERATOR reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    INTEGER         reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    FLOAT           reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    STRING_LITERAL  reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    ID              reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    LPAREN          reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    NOT             reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_BOOL       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_STRING     reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_INT        reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_INT8       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_INT16      reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_INT32      reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_INT64      reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINT       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINT8      reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINT16     reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINT32     reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINT64     reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINTPTR    reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_FLOAT32    reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_FLOAT64    reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_COMPLEX64  reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_COMPLEX128 reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    CONST           reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE            reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    VAR             reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    FUNC            reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    IMPORT          reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    IF              reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    FOR             reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    RETURN          reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    LBRACKET        reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    STRUCT          reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    ASTERISKS       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    INTERFACE       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    MAP             reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    CHAN            reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    CHANNEL_OPERATOR reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    NORMAL_ASSIGNMENT reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    $end            reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    RPAREN          reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    LBRACE          reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    RBRACKET        reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    RBRACE          reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    SEMICOLON       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)


state 73

    (5) expression -> LPAREN expression . RPAREN
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    RPAREN          shift and go to state 120
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 74

    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

    NORMAL_ASSIGNMENT shift and go to state 65


state 75

    (11) expression -> NOT expression .
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
  ! reduce/reduce conflict for NORMAL_ASSIGNMENT resolved using rule 7 (expression_list -> expression .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TYPE_BOOL resolved as shift
  ! shift/reduce conflict for TYPE_STRING resolved as shift
  ! shift/reduce conflict for TYPE_INT resolved as shift
  ! shift/reduce conflict for TYPE_INT8 resolved as shift
  ! shift/reduce conflict for TYPE_INT16 resolved as shift
  ! shift/reduce conflict for TYPE_INT32 resolved as shift
  ! shift/reduce conflict for TYPE_INT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINT resolved as shift
  ! shift/reduce conflict for TYPE_UINT8 resolved as shift
  ! shift/reduce conflict for TYPE_UINT16 resolved as shift
  ! shift/reduce conflict for TYPE_UINT32 resolved as shift
  ! shift/reduce conflict for TYPE_UINT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINTPTR resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT32 resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX128 resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ASTERISKS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for CHAN resolved as shift
  ! shift/reduce conflict for CHANNEL_OPERATOR resolved as shift
    $end            reduce using rule 11 (expression -> NOT expression .)
    RPAREN          reduce using rule 11 (expression -> NOT expression .)
    LBRACE          reduce using rule 11 (expression -> NOT expression .)
    RBRACKET        reduce using rule 11 (expression -> NOT expression .)
    RBRACE          reduce using rule 11 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 11 (expression -> NOT expression .)
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

  ! ARITHMETIC_OPERATOR [ reduce using rule 11 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 11 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 11 (expression -> NOT expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 11 (expression -> NOT expression .) ]
  ! INTEGER         [ reduce using rule 11 (expression -> NOT expression .) ]
  ! FLOAT           [ reduce using rule 11 (expression -> NOT expression .) ]
  ! STRING_LITERAL  [ reduce using rule 11 (expression -> NOT expression .) ]
  ! ID              [ reduce using rule 11 (expression -> NOT expression .) ]
  ! LPAREN          [ reduce using rule 11 (expression -> NOT expression .) ]
  ! NOT             [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_BOOL       [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_STRING     [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_INT        [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_INT8       [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_INT16      [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_INT32      [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_INT64      [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_UINT       [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_UINT8      [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_UINT16     [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_UINT32     [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_UINT64     [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_UINTPTR    [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_FLOAT32    [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_FLOAT64    [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 11 (expression -> NOT expression .) ]
  ! CONST           [ reduce using rule 11 (expression -> NOT expression .) ]
  ! TYPE            [ reduce using rule 11 (expression -> NOT expression .) ]
  ! VAR             [ reduce using rule 11 (expression -> NOT expression .) ]
  ! FUNC            [ reduce using rule 11 (expression -> NOT expression .) ]
  ! IMPORT          [ reduce using rule 11 (expression -> NOT expression .) ]
  ! IF              [ reduce using rule 11 (expression -> NOT expression .) ]
  ! FOR             [ reduce using rule 11 (expression -> NOT expression .) ]
  ! RETURN          [ reduce using rule 11 (expression -> NOT expression .) ]
  ! LBRACKET        [ reduce using rule 11 (expression -> NOT expression .) ]
  ! STRUCT          [ reduce using rule 11 (expression -> NOT expression .) ]
  ! ASTERISKS       [ reduce using rule 11 (expression -> NOT expression .) ]
  ! INTERFACE       [ reduce using rule 11 (expression -> NOT expression .) ]
  ! MAP             [ reduce using rule 11 (expression -> NOT expression .) ]
  ! CHAN            [ reduce using rule 11 (expression -> NOT expression .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 11 (expression -> NOT expression .) ]
  ! NORMAL_ASSIGNMENT [ reduce using rule 11 (expression -> NOT expression .) ]

    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 76

    (87) const_decl -> CONST const_spec .

    ARITHMETIC_OPERATOR reduce using rule 87 (const_decl -> CONST const_spec .)
    OR              reduce using rule 87 (const_decl -> CONST const_spec .)
    AND             reduce using rule 87 (const_decl -> CONST const_spec .)
    COMPARISON_OPERATOR reduce using rule 87 (const_decl -> CONST const_spec .)
    INTEGER         reduce using rule 87 (const_decl -> CONST const_spec .)
    FLOAT           reduce using rule 87 (const_decl -> CONST const_spec .)
    STRING_LITERAL  reduce using rule 87 (const_decl -> CONST const_spec .)
    ID              reduce using rule 87 (const_decl -> CONST const_spec .)
    LPAREN          reduce using rule 87 (const_decl -> CONST const_spec .)
    NOT             reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_BOOL       reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_STRING     reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_INT        reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_INT8       reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_INT16      reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_INT32      reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_INT64      reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_UINT       reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_UINT8      reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_UINT16     reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_UINT32     reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_UINT64     reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_UINTPTR    reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_FLOAT32    reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_FLOAT64    reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_COMPLEX64  reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE_COMPLEX128 reduce using rule 87 (const_decl -> CONST const_spec .)
    CONST           reduce using rule 87 (const_decl -> CONST const_spec .)
    TYPE            reduce using rule 87 (const_decl -> CONST const_spec .)
    VAR             reduce using rule 87 (const_decl -> CONST const_spec .)
    FUNC            reduce using rule 87 (const_decl -> CONST const_spec .)
    IMPORT          reduce using rule 87 (const_decl -> CONST const_spec .)
    IF              reduce using rule 87 (const_decl -> CONST const_spec .)
    FOR             reduce using rule 87 (const_decl -> CONST const_spec .)
    RETURN          reduce using rule 87 (const_decl -> CONST const_spec .)
    LBRACKET        reduce using rule 87 (const_decl -> CONST const_spec .)
    STRUCT          reduce using rule 87 (const_decl -> CONST const_spec .)
    ASTERISKS       reduce using rule 87 (const_decl -> CONST const_spec .)
    INTERFACE       reduce using rule 87 (const_decl -> CONST const_spec .)
    MAP             reduce using rule 87 (const_decl -> CONST const_spec .)
    CHAN            reduce using rule 87 (const_decl -> CONST const_spec .)
    CHANNEL_OPERATOR reduce using rule 87 (const_decl -> CONST const_spec .)
    NORMAL_ASSIGNMENT reduce using rule 87 (const_decl -> CONST const_spec .)
    $end            reduce using rule 87 (const_decl -> CONST const_spec .)
    RPAREN          reduce using rule 87 (const_decl -> CONST const_spec .)
    LBRACE          reduce using rule 87 (const_decl -> CONST const_spec .)
    RBRACKET        reduce using rule 87 (const_decl -> CONST const_spec .)
    RBRACE          reduce using rule 87 (const_decl -> CONST const_spec .)
    SEMICOLON       reduce using rule 87 (const_decl -> CONST const_spec .)


state 77

    (88) const_decl -> CONST LPAREN . const_spec RPAREN
    (89) const_spec -> . identifier_list NORMAL_ASSIGNMENT expression_list
    (90) const_spec -> . identifier_list type NORMAL_ASSIGNMENT expression_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 79

    const_spec                     shift and go to state 121
    identifier_list                shift and go to state 78

state 78

    (89) const_spec -> identifier_list . NORMAL_ASSIGNMENT expression_list
    (90) const_spec -> identifier_list . type NORMAL_ASSIGNMENT expression_list
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    NORMAL_ASSIGNMENT shift and go to state 122
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 123
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 79

    (52) identifier_list -> ID .
    (53) identifier_list -> ID . COMMA identifier_list

  ! shift/reduce conflict for COMMA resolved as shift
    NORMAL_ASSIGNMENT reduce using rule 52 (identifier_list -> ID .)
    TYPE_BOOL       reduce using rule 52 (identifier_list -> ID .)
    TYPE_STRING     reduce using rule 52 (identifier_list -> ID .)
    TYPE_INT        reduce using rule 52 (identifier_list -> ID .)
    TYPE_INT8       reduce using rule 52 (identifier_list -> ID .)
    TYPE_INT16      reduce using rule 52 (identifier_list -> ID .)
    TYPE_INT32      reduce using rule 52 (identifier_list -> ID .)
    TYPE_INT64      reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINT       reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINT8      reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINT16     reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINT32     reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINT64     reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINTPTR    reduce using rule 52 (identifier_list -> ID .)
    TYPE_FLOAT32    reduce using rule 52 (identifier_list -> ID .)
    TYPE_FLOAT64    reduce using rule 52 (identifier_list -> ID .)
    TYPE_COMPLEX64  reduce using rule 52 (identifier_list -> ID .)
    TYPE_COMPLEX128 reduce using rule 52 (identifier_list -> ID .)
    LBRACKET        reduce using rule 52 (identifier_list -> ID .)
    STRUCT          reduce using rule 52 (identifier_list -> ID .)
    ASTERISKS       reduce using rule 52 (identifier_list -> ID .)
    FUNC            reduce using rule 52 (identifier_list -> ID .)
    INTERFACE       reduce using rule 52 (identifier_list -> ID .)
    MAP             reduce using rule 52 (identifier_list -> ID .)
    CHAN            reduce using rule 52 (identifier_list -> ID .)
    CHANNEL_OPERATOR reduce using rule 52 (identifier_list -> ID .)
    ELLIPSIS        reduce using rule 52 (identifier_list -> ID .)
    RPAREN          reduce using rule 52 (identifier_list -> ID .)
    COMMA           shift and go to state 124

  ! COMMA           [ reduce using rule 52 (identifier_list -> ID .) ]


state 80

    (91) type_decl -> TYPE type_spec .

    ARITHMETIC_OPERATOR reduce using rule 91 (type_decl -> TYPE type_spec .)
    OR              reduce using rule 91 (type_decl -> TYPE type_spec .)
    AND             reduce using rule 91 (type_decl -> TYPE type_spec .)
    COMPARISON_OPERATOR reduce using rule 91 (type_decl -> TYPE type_spec .)
    INTEGER         reduce using rule 91 (type_decl -> TYPE type_spec .)
    FLOAT           reduce using rule 91 (type_decl -> TYPE type_spec .)
    STRING_LITERAL  reduce using rule 91 (type_decl -> TYPE type_spec .)
    ID              reduce using rule 91 (type_decl -> TYPE type_spec .)
    LPAREN          reduce using rule 91 (type_decl -> TYPE type_spec .)
    NOT             reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_BOOL       reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_STRING     reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_INT        reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_INT8       reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_INT16      reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_INT32      reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_INT64      reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_UINT       reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_UINT8      reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_UINT16     reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_UINT32     reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_UINT64     reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_UINTPTR    reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_FLOAT32    reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_FLOAT64    reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_COMPLEX64  reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE_COMPLEX128 reduce using rule 91 (type_decl -> TYPE type_spec .)
    CONST           reduce using rule 91 (type_decl -> TYPE type_spec .)
    TYPE            reduce using rule 91 (type_decl -> TYPE type_spec .)
    VAR             reduce using rule 91 (type_decl -> TYPE type_spec .)
    FUNC            reduce using rule 91 (type_decl -> TYPE type_spec .)
    IMPORT          reduce using rule 91 (type_decl -> TYPE type_spec .)
    IF              reduce using rule 91 (type_decl -> TYPE type_spec .)
    FOR             reduce using rule 91 (type_decl -> TYPE type_spec .)
    RETURN          reduce using rule 91 (type_decl -> TYPE type_spec .)
    LBRACKET        reduce using rule 91 (type_decl -> TYPE type_spec .)
    STRUCT          reduce using rule 91 (type_decl -> TYPE type_spec .)
    ASTERISKS       reduce using rule 91 (type_decl -> TYPE type_spec .)
    INTERFACE       reduce using rule 91 (type_decl -> TYPE type_spec .)
    MAP             reduce using rule 91 (type_decl -> TYPE type_spec .)
    CHAN            reduce using rule 91 (type_decl -> TYPE type_spec .)
    CHANNEL_OPERATOR reduce using rule 91 (type_decl -> TYPE type_spec .)
    NORMAL_ASSIGNMENT reduce using rule 91 (type_decl -> TYPE type_spec .)
    $end            reduce using rule 91 (type_decl -> TYPE type_spec .)
    RPAREN          reduce using rule 91 (type_decl -> TYPE type_spec .)
    LBRACE          reduce using rule 91 (type_decl -> TYPE type_spec .)
    RBRACKET        reduce using rule 91 (type_decl -> TYPE type_spec .)
    RBRACE          reduce using rule 91 (type_decl -> TYPE type_spec .)
    SEMICOLON       reduce using rule 91 (type_decl -> TYPE type_spec .)


state 81

    (92) type_decl -> TYPE LPAREN . type_spec RPAREN
    (93) type_spec -> . alias_decl
    (94) type_spec -> . type_def
    (95) alias_decl -> . ID NORMAL_ASSIGNMENT type
    (96) type_def -> . ID type

    ID              shift and go to state 84

    type_spec                      shift and go to state 125
    alias_decl                     shift and go to state 82
    type_def                       shift and go to state 83

state 82

    (93) type_spec -> alias_decl .

    ARITHMETIC_OPERATOR reduce using rule 93 (type_spec -> alias_decl .)
    OR              reduce using rule 93 (type_spec -> alias_decl .)
    AND             reduce using rule 93 (type_spec -> alias_decl .)
    COMPARISON_OPERATOR reduce using rule 93 (type_spec -> alias_decl .)
    INTEGER         reduce using rule 93 (type_spec -> alias_decl .)
    FLOAT           reduce using rule 93 (type_spec -> alias_decl .)
    STRING_LITERAL  reduce using rule 93 (type_spec -> alias_decl .)
    ID              reduce using rule 93 (type_spec -> alias_decl .)
    LPAREN          reduce using rule 93 (type_spec -> alias_decl .)
    NOT             reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_BOOL       reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_STRING     reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_INT        reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_INT8       reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_INT16      reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_INT32      reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_INT64      reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_UINT       reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_UINT8      reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_UINT16     reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_UINT32     reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_UINT64     reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_UINTPTR    reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_FLOAT32    reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_FLOAT64    reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_COMPLEX64  reduce using rule 93 (type_spec -> alias_decl .)
    TYPE_COMPLEX128 reduce using rule 93 (type_spec -> alias_decl .)
    CONST           reduce using rule 93 (type_spec -> alias_decl .)
    TYPE            reduce using rule 93 (type_spec -> alias_decl .)
    VAR             reduce using rule 93 (type_spec -> alias_decl .)
    FUNC            reduce using rule 93 (type_spec -> alias_decl .)
    IMPORT          reduce using rule 93 (type_spec -> alias_decl .)
    IF              reduce using rule 93 (type_spec -> alias_decl .)
    FOR             reduce using rule 93 (type_spec -> alias_decl .)
    RETURN          reduce using rule 93 (type_spec -> alias_decl .)
    LBRACKET        reduce using rule 93 (type_spec -> alias_decl .)
    STRUCT          reduce using rule 93 (type_spec -> alias_decl .)
    ASTERISKS       reduce using rule 93 (type_spec -> alias_decl .)
    INTERFACE       reduce using rule 93 (type_spec -> alias_decl .)
    MAP             reduce using rule 93 (type_spec -> alias_decl .)
    CHAN            reduce using rule 93 (type_spec -> alias_decl .)
    CHANNEL_OPERATOR reduce using rule 93 (type_spec -> alias_decl .)
    NORMAL_ASSIGNMENT reduce using rule 93 (type_spec -> alias_decl .)
    $end            reduce using rule 93 (type_spec -> alias_decl .)
    RPAREN          reduce using rule 93 (type_spec -> alias_decl .)
    LBRACE          reduce using rule 93 (type_spec -> alias_decl .)
    RBRACKET        reduce using rule 93 (type_spec -> alias_decl .)
    RBRACE          reduce using rule 93 (type_spec -> alias_decl .)
    SEMICOLON       reduce using rule 93 (type_spec -> alias_decl .)


state 83

    (94) type_spec -> type_def .

    ARITHMETIC_OPERATOR reduce using rule 94 (type_spec -> type_def .)
    OR              reduce using rule 94 (type_spec -> type_def .)
    AND             reduce using rule 94 (type_spec -> type_def .)
    COMPARISON_OPERATOR reduce using rule 94 (type_spec -> type_def .)
    INTEGER         reduce using rule 94 (type_spec -> type_def .)
    FLOAT           reduce using rule 94 (type_spec -> type_def .)
    STRING_LITERAL  reduce using rule 94 (type_spec -> type_def .)
    ID              reduce using rule 94 (type_spec -> type_def .)
    LPAREN          reduce using rule 94 (type_spec -> type_def .)
    NOT             reduce using rule 94 (type_spec -> type_def .)
    TYPE_BOOL       reduce using rule 94 (type_spec -> type_def .)
    TYPE_STRING     reduce using rule 94 (type_spec -> type_def .)
    TYPE_INT        reduce using rule 94 (type_spec -> type_def .)
    TYPE_INT8       reduce using rule 94 (type_spec -> type_def .)
    TYPE_INT16      reduce using rule 94 (type_spec -> type_def .)
    TYPE_INT32      reduce using rule 94 (type_spec -> type_def .)
    TYPE_INT64      reduce using rule 94 (type_spec -> type_def .)
    TYPE_UINT       reduce using rule 94 (type_spec -> type_def .)
    TYPE_UINT8      reduce using rule 94 (type_spec -> type_def .)
    TYPE_UINT16     reduce using rule 94 (type_spec -> type_def .)
    TYPE_UINT32     reduce using rule 94 (type_spec -> type_def .)
    TYPE_UINT64     reduce using rule 94 (type_spec -> type_def .)
    TYPE_UINTPTR    reduce using rule 94 (type_spec -> type_def .)
    TYPE_FLOAT32    reduce using rule 94 (type_spec -> type_def .)
    TYPE_FLOAT64    reduce using rule 94 (type_spec -> type_def .)
    TYPE_COMPLEX64  reduce using rule 94 (type_spec -> type_def .)
    TYPE_COMPLEX128 reduce using rule 94 (type_spec -> type_def .)
    CONST           reduce using rule 94 (type_spec -> type_def .)
    TYPE            reduce using rule 94 (type_spec -> type_def .)
    VAR             reduce using rule 94 (type_spec -> type_def .)
    FUNC            reduce using rule 94 (type_spec -> type_def .)
    IMPORT          reduce using rule 94 (type_spec -> type_def .)
    IF              reduce using rule 94 (type_spec -> type_def .)
    FOR             reduce using rule 94 (type_spec -> type_def .)
    RETURN          reduce using rule 94 (type_spec -> type_def .)
    LBRACKET        reduce using rule 94 (type_spec -> type_def .)
    STRUCT          reduce using rule 94 (type_spec -> type_def .)
    ASTERISKS       reduce using rule 94 (type_spec -> type_def .)
    INTERFACE       reduce using rule 94 (type_spec -> type_def .)
    MAP             reduce using rule 94 (type_spec -> type_def .)
    CHAN            reduce using rule 94 (type_spec -> type_def .)
    CHANNEL_OPERATOR reduce using rule 94 (type_spec -> type_def .)
    NORMAL_ASSIGNMENT reduce using rule 94 (type_spec -> type_def .)
    $end            reduce using rule 94 (type_spec -> type_def .)
    RPAREN          reduce using rule 94 (type_spec -> type_def .)
    LBRACE          reduce using rule 94 (type_spec -> type_def .)
    RBRACKET        reduce using rule 94 (type_spec -> type_def .)
    RBRACE          reduce using rule 94 (type_spec -> type_def .)
    SEMICOLON       reduce using rule 94 (type_spec -> type_def .)


state 84

    (95) alias_decl -> ID . NORMAL_ASSIGNMENT type
    (96) type_def -> ID . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    NORMAL_ASSIGNMENT shift and go to state 126
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 127
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 85

    (97) var_decl -> VAR var_spec .

    ARITHMETIC_OPERATOR reduce using rule 97 (var_decl -> VAR var_spec .)
    OR              reduce using rule 97 (var_decl -> VAR var_spec .)
    AND             reduce using rule 97 (var_decl -> VAR var_spec .)
    COMPARISON_OPERATOR reduce using rule 97 (var_decl -> VAR var_spec .)
    INTEGER         reduce using rule 97 (var_decl -> VAR var_spec .)
    FLOAT           reduce using rule 97 (var_decl -> VAR var_spec .)
    STRING_LITERAL  reduce using rule 97 (var_decl -> VAR var_spec .)
    ID              reduce using rule 97 (var_decl -> VAR var_spec .)
    LPAREN          reduce using rule 97 (var_decl -> VAR var_spec .)
    NOT             reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_BOOL       reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_STRING     reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_INT        reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_INT8       reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_INT16      reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_INT32      reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_INT64      reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_UINT       reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_UINT8      reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_UINT16     reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_UINT32     reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_UINT64     reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_UINTPTR    reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_FLOAT32    reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_FLOAT64    reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_COMPLEX64  reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE_COMPLEX128 reduce using rule 97 (var_decl -> VAR var_spec .)
    CONST           reduce using rule 97 (var_decl -> VAR var_spec .)
    TYPE            reduce using rule 97 (var_decl -> VAR var_spec .)
    VAR             reduce using rule 97 (var_decl -> VAR var_spec .)
    FUNC            reduce using rule 97 (var_decl -> VAR var_spec .)
    IMPORT          reduce using rule 97 (var_decl -> VAR var_spec .)
    IF              reduce using rule 97 (var_decl -> VAR var_spec .)
    FOR             reduce using rule 97 (var_decl -> VAR var_spec .)
    RETURN          reduce using rule 97 (var_decl -> VAR var_spec .)
    LBRACKET        reduce using rule 97 (var_decl -> VAR var_spec .)
    STRUCT          reduce using rule 97 (var_decl -> VAR var_spec .)
    ASTERISKS       reduce using rule 97 (var_decl -> VAR var_spec .)
    INTERFACE       reduce using rule 97 (var_decl -> VAR var_spec .)
    MAP             reduce using rule 97 (var_decl -> VAR var_spec .)
    CHAN            reduce using rule 97 (var_decl -> VAR var_spec .)
    CHANNEL_OPERATOR reduce using rule 97 (var_decl -> VAR var_spec .)
    NORMAL_ASSIGNMENT reduce using rule 97 (var_decl -> VAR var_spec .)
    $end            reduce using rule 97 (var_decl -> VAR var_spec .)
    RPAREN          reduce using rule 97 (var_decl -> VAR var_spec .)
    LBRACE          reduce using rule 97 (var_decl -> VAR var_spec .)
    RBRACKET        reduce using rule 97 (var_decl -> VAR var_spec .)
    RBRACE          reduce using rule 97 (var_decl -> VAR var_spec .)
    SEMICOLON       reduce using rule 97 (var_decl -> VAR var_spec .)


state 86

    (98) var_decl -> VAR LPAREN . var_spec RPAREN
    (99) var_spec -> . identifier_list type
    (100) var_spec -> . identifier_list type NORMAL_ASSIGNMENT expression_list
    (101) var_spec -> . identifier_list NORMAL_ASSIGNMENT expression_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 79

    var_spec                       shift and go to state 128
    identifier_list                shift and go to state 87

state 87

    (99) var_spec -> identifier_list . type
    (100) var_spec -> identifier_list . type NORMAL_ASSIGNMENT expression_list
    (101) var_spec -> identifier_list . NORMAL_ASSIGNMENT expression_list
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    NORMAL_ASSIGNMENT shift and go to state 130
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 129
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 88

    (102) func_decl -> FUNC ID . signature
    (103) func_decl -> FUNC ID . signature block
    (58) signature -> . parameters
    (59) signature -> . parameters result
    (63) parameters -> . LPAREN RPAREN
    (64) parameters -> . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 91

    signature                      shift and go to state 131
    parameters                     shift and go to state 90

state 89

    (57) function_type -> FUNC signature .

    ARITHMETIC_OPERATOR reduce using rule 57 (function_type -> FUNC signature .)
    OR              reduce using rule 57 (function_type -> FUNC signature .)
    AND             reduce using rule 57 (function_type -> FUNC signature .)
    COMPARISON_OPERATOR reduce using rule 57 (function_type -> FUNC signature .)
    INTEGER         reduce using rule 57 (function_type -> FUNC signature .)
    FLOAT           reduce using rule 57 (function_type -> FUNC signature .)
    STRING_LITERAL  reduce using rule 57 (function_type -> FUNC signature .)
    ID              reduce using rule 57 (function_type -> FUNC signature .)
    LPAREN          reduce using rule 57 (function_type -> FUNC signature .)
    NOT             reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_BOOL       reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_STRING     reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_INT        reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_INT8       reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_INT16      reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_INT32      reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_INT64      reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINT       reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINT8      reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINT16     reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINT32     reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINT64     reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINTPTR    reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_FLOAT32    reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_FLOAT64    reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_COMPLEX64  reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_COMPLEX128 reduce using rule 57 (function_type -> FUNC signature .)
    CONST           reduce using rule 57 (function_type -> FUNC signature .)
    TYPE            reduce using rule 57 (function_type -> FUNC signature .)
    VAR             reduce using rule 57 (function_type -> FUNC signature .)
    FUNC            reduce using rule 57 (function_type -> FUNC signature .)
    IMPORT          reduce using rule 57 (function_type -> FUNC signature .)
    IF              reduce using rule 57 (function_type -> FUNC signature .)
    FOR             reduce using rule 57 (function_type -> FUNC signature .)
    RETURN          reduce using rule 57 (function_type -> FUNC signature .)
    LBRACKET        reduce using rule 57 (function_type -> FUNC signature .)
    STRUCT          reduce using rule 57 (function_type -> FUNC signature .)
    ASTERISKS       reduce using rule 57 (function_type -> FUNC signature .)
    INTERFACE       reduce using rule 57 (function_type -> FUNC signature .)
    MAP             reduce using rule 57 (function_type -> FUNC signature .)
    CHAN            reduce using rule 57 (function_type -> FUNC signature .)
    CHANNEL_OPERATOR reduce using rule 57 (function_type -> FUNC signature .)
    NORMAL_ASSIGNMENT reduce using rule 57 (function_type -> FUNC signature .)
    $end            reduce using rule 57 (function_type -> FUNC signature .)
    RPAREN          reduce using rule 57 (function_type -> FUNC signature .)
    LBRACE          reduce using rule 57 (function_type -> FUNC signature .)
    RBRACKET        reduce using rule 57 (function_type -> FUNC signature .)
    RBRACE          reduce using rule 57 (function_type -> FUNC signature .)
    SEMICOLON       reduce using rule 57 (function_type -> FUNC signature .)
    COMMA           reduce using rule 57 (function_type -> FUNC signature .)


state 90

    (58) signature -> parameters .
    (59) signature -> parameters . result
    (60) result -> . parameters
    (61) result -> . type
    (62) result -> . LPAREN type RPAREN
    (63) parameters -> . LPAREN RPAREN
    (64) parameters -> . LPAREN parameter_list RPAREN
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TYPE_BOOL resolved as shift
  ! shift/reduce conflict for TYPE_STRING resolved as shift
  ! shift/reduce conflict for TYPE_INT resolved as shift
  ! shift/reduce conflict for TYPE_INT8 resolved as shift
  ! shift/reduce conflict for TYPE_INT16 resolved as shift
  ! shift/reduce conflict for TYPE_INT32 resolved as shift
  ! shift/reduce conflict for TYPE_INT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINT resolved as shift
  ! shift/reduce conflict for TYPE_UINT8 resolved as shift
  ! shift/reduce conflict for TYPE_UINT16 resolved as shift
  ! shift/reduce conflict for TYPE_UINT32 resolved as shift
  ! shift/reduce conflict for TYPE_UINT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINTPTR resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT32 resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX128 resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ASTERISKS resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for CHAN resolved as shift
  ! shift/reduce conflict for CHANNEL_OPERATOR resolved as shift
    ARITHMETIC_OPERATOR reduce using rule 58 (signature -> parameters .)
    OR              reduce using rule 58 (signature -> parameters .)
    AND             reduce using rule 58 (signature -> parameters .)
    COMPARISON_OPERATOR reduce using rule 58 (signature -> parameters .)
    INTEGER         reduce using rule 58 (signature -> parameters .)
    FLOAT           reduce using rule 58 (signature -> parameters .)
    STRING_LITERAL  reduce using rule 58 (signature -> parameters .)
    ID              reduce using rule 58 (signature -> parameters .)
    NOT             reduce using rule 58 (signature -> parameters .)
    CONST           reduce using rule 58 (signature -> parameters .)
    TYPE            reduce using rule 58 (signature -> parameters .)
    VAR             reduce using rule 58 (signature -> parameters .)
    IMPORT          reduce using rule 58 (signature -> parameters .)
    IF              reduce using rule 58 (signature -> parameters .)
    FOR             reduce using rule 58 (signature -> parameters .)
    RETURN          reduce using rule 58 (signature -> parameters .)
    NORMAL_ASSIGNMENT reduce using rule 58 (signature -> parameters .)
    $end            reduce using rule 58 (signature -> parameters .)
    RPAREN          reduce using rule 58 (signature -> parameters .)
    LBRACE          reduce using rule 58 (signature -> parameters .)
    RBRACKET        reduce using rule 58 (signature -> parameters .)
    RBRACE          reduce using rule 58 (signature -> parameters .)
    SEMICOLON       reduce using rule 58 (signature -> parameters .)
    COMMA           reduce using rule 58 (signature -> parameters .)
    LPAREN          shift and go to state 135
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

  ! LPAREN          [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_BOOL       [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_STRING     [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_INT        [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_INT8       [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_INT16      [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_INT32      [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_INT64      [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINT       [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINT8      [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINT16     [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINT32     [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINT64     [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINTPTR    [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_FLOAT32    [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_FLOAT64    [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 58 (signature -> parameters .) ]
  ! FUNC            [ reduce using rule 58 (signature -> parameters .) ]
  ! LBRACKET        [ reduce using rule 58 (signature -> parameters .) ]
  ! STRUCT          [ reduce using rule 58 (signature -> parameters .) ]
  ! ASTERISKS       [ reduce using rule 58 (signature -> parameters .) ]
  ! INTERFACE       [ reduce using rule 58 (signature -> parameters .) ]
  ! MAP             [ reduce using rule 58 (signature -> parameters .) ]
  ! CHAN            [ reduce using rule 58 (signature -> parameters .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 58 (signature -> parameters .) ]

    parameters                     shift and go to state 132
    result                         shift and go to state 133
    type                           shift and go to state 134
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 91

    (63) parameters -> LPAREN . RPAREN
    (64) parameters -> LPAREN . parameter_list RPAREN
    (65) parameter_list -> . parameter_decl
    (66) parameter_list -> . parameter_decl COMMA parameter_list
    (67) parameter_decl -> . identifier_list
    (68) parameter_decl -> . identifier_list type
    (69) parameter_decl -> . ELLIPSIS type
    (70) parameter_decl -> . identifier_list ELLIPSIS type
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    RPAREN          shift and go to state 136
    ELLIPSIS        shift and go to state 140
    ID              shift and go to state 79

    parameter_list                 shift and go to state 137
    parameter_decl                 shift and go to state 138
    identifier_list                shift and go to state 139

state 92

    (104) import_decl -> IMPORT string_lit .

    ARITHMETIC_OPERATOR reduce using rule 104 (import_decl -> IMPORT string_lit .)
    OR              reduce using rule 104 (import_decl -> IMPORT string_lit .)
    AND             reduce using rule 104 (import_decl -> IMPORT string_lit .)
    COMPARISON_OPERATOR reduce using rule 104 (import_decl -> IMPORT string_lit .)
    INTEGER         reduce using rule 104 (import_decl -> IMPORT string_lit .)
    FLOAT           reduce using rule 104 (import_decl -> IMPORT string_lit .)
    STRING_LITERAL  reduce using rule 104 (import_decl -> IMPORT string_lit .)
    ID              reduce using rule 104 (import_decl -> IMPORT string_lit .)
    LPAREN          reduce using rule 104 (import_decl -> IMPORT string_lit .)
    NOT             reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_BOOL       reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_STRING     reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_INT        reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_INT8       reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_INT16      reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_INT32      reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_INT64      reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_UINT       reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_UINT8      reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_UINT16     reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_UINT32     reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_UINT64     reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_UINTPTR    reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_FLOAT32    reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_FLOAT64    reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_COMPLEX64  reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE_COMPLEX128 reduce using rule 104 (import_decl -> IMPORT string_lit .)
    CONST           reduce using rule 104 (import_decl -> IMPORT string_lit .)
    TYPE            reduce using rule 104 (import_decl -> IMPORT string_lit .)
    VAR             reduce using rule 104 (import_decl -> IMPORT string_lit .)
    FUNC            reduce using rule 104 (import_decl -> IMPORT string_lit .)
    IMPORT          reduce using rule 104 (import_decl -> IMPORT string_lit .)
    IF              reduce using rule 104 (import_decl -> IMPORT string_lit .)
    FOR             reduce using rule 104 (import_decl -> IMPORT string_lit .)
    RETURN          reduce using rule 104 (import_decl -> IMPORT string_lit .)
    LBRACKET        reduce using rule 104 (import_decl -> IMPORT string_lit .)
    STRUCT          reduce using rule 104 (import_decl -> IMPORT string_lit .)
    ASTERISKS       reduce using rule 104 (import_decl -> IMPORT string_lit .)
    INTERFACE       reduce using rule 104 (import_decl -> IMPORT string_lit .)
    MAP             reduce using rule 104 (import_decl -> IMPORT string_lit .)
    CHAN            reduce using rule 104 (import_decl -> IMPORT string_lit .)
    CHANNEL_OPERATOR reduce using rule 104 (import_decl -> IMPORT string_lit .)
    NORMAL_ASSIGNMENT reduce using rule 104 (import_decl -> IMPORT string_lit .)
    $end            reduce using rule 104 (import_decl -> IMPORT string_lit .)
    RPAREN          reduce using rule 104 (import_decl -> IMPORT string_lit .)
    LBRACE          reduce using rule 104 (import_decl -> IMPORT string_lit .)
    RBRACKET        reduce using rule 104 (import_decl -> IMPORT string_lit .)
    RBRACE          reduce using rule 104 (import_decl -> IMPORT string_lit .)
    SEMICOLON       reduce using rule 104 (import_decl -> IMPORT string_lit .)


state 93

    (105) import_decl -> IMPORT LPAREN . string_lit RPAREN
    (55) string_lit -> . STRING_LITERAL

    STRING_LITERAL  shift and go to state 94

    string_lit                     shift and go to state 141

state 94

    (55) string_lit -> STRING_LITERAL .

    ARITHMETIC_OPERATOR reduce using rule 55 (string_lit -> STRING_LITERAL .)
    OR              reduce using rule 55 (string_lit -> STRING_LITERAL .)
    AND             reduce using rule 55 (string_lit -> STRING_LITERAL .)
    COMPARISON_OPERATOR reduce using rule 55 (string_lit -> STRING_LITERAL .)
    INTEGER         reduce using rule 55 (string_lit -> STRING_LITERAL .)
    FLOAT           reduce using rule 55 (string_lit -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 55 (string_lit -> STRING_LITERAL .)
    ID              reduce using rule 55 (string_lit -> STRING_LITERAL .)
    LPAREN          reduce using rule 55 (string_lit -> STRING_LITERAL .)
    NOT             reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_BOOL       reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_STRING     reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_INT        reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_INT8       reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_INT16      reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_INT32      reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_INT64      reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_UINT       reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_UINT8      reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_UINT16     reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_UINT32     reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_UINT64     reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_UINTPTR    reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_FLOAT32    reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_FLOAT64    reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_COMPLEX64  reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE_COMPLEX128 reduce using rule 55 (string_lit -> STRING_LITERAL .)
    CONST           reduce using rule 55 (string_lit -> STRING_LITERAL .)
    TYPE            reduce using rule 55 (string_lit -> STRING_LITERAL .)
    VAR             reduce using rule 55 (string_lit -> STRING_LITERAL .)
    FUNC            reduce using rule 55 (string_lit -> STRING_LITERAL .)
    IMPORT          reduce using rule 55 (string_lit -> STRING_LITERAL .)
    IF              reduce using rule 55 (string_lit -> STRING_LITERAL .)
    FOR             reduce using rule 55 (string_lit -> STRING_LITERAL .)
    RETURN          reduce using rule 55 (string_lit -> STRING_LITERAL .)
    LBRACKET        reduce using rule 55 (string_lit -> STRING_LITERAL .)
    STRUCT          reduce using rule 55 (string_lit -> STRING_LITERAL .)
    ASTERISKS       reduce using rule 55 (string_lit -> STRING_LITERAL .)
    INTERFACE       reduce using rule 55 (string_lit -> STRING_LITERAL .)
    MAP             reduce using rule 55 (string_lit -> STRING_LITERAL .)
    CHAN            reduce using rule 55 (string_lit -> STRING_LITERAL .)
    CHANNEL_OPERATOR reduce using rule 55 (string_lit -> STRING_LITERAL .)
    NORMAL_ASSIGNMENT reduce using rule 55 (string_lit -> STRING_LITERAL .)
    $end            reduce using rule 55 (string_lit -> STRING_LITERAL .)
    RPAREN          reduce using rule 55 (string_lit -> STRING_LITERAL .)
    LBRACE          reduce using rule 55 (string_lit -> STRING_LITERAL .)
    RBRACKET        reduce using rule 55 (string_lit -> STRING_LITERAL .)
    RBRACE          reduce using rule 55 (string_lit -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 55 (string_lit -> STRING_LITERAL .)


state 95

    (112) if_statement -> IF expression . block
    (113) if_statement -> IF expression . block ELSE block
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (111) block -> . LBRACE expression_list RBRACE
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    LBRACE          shift and go to state 143
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 3
    block                          shift and go to state 142
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 96

    (114) for_statement -> FOR expression . block
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (111) block -> . LBRACE expression_list RBRACE
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    LBRACE          shift and go to state 143
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 3
    block                          shift and go to state 144
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 97

    (115) for_statement -> FOR for_clause . block
    (111) block -> . LBRACE expression_list RBRACE

    LBRACE          shift and go to state 143

    block                          shift and go to state 145

state 98

    (116) for_statement -> FOR range_clause . block
    (111) block -> . LBRACE expression_list RBRACE

    LBRACE          shift and go to state 143

    block                          shift and go to state 146

state 99

    (4) expression -> ID .
    (13) arithmetical_assignment -> ID . ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> ID . UNARY_ASSIGNMENT
    (52) identifier_list -> ID .
    (53) identifier_list -> ID . COMMA identifier_list

  ! reduce/reduce conflict for NORMAL_ASSIGNMENT resolved using rule 4 (expression -> ID .)
    ARITHMETIC_OPERATOR reduce using rule 4 (expression -> ID .)
    OR              reduce using rule 4 (expression -> ID .)
    AND             reduce using rule 4 (expression -> ID .)
    COMPARISON_OPERATOR reduce using rule 4 (expression -> ID .)
    LBRACE          reduce using rule 4 (expression -> ID .)
    INTEGER         reduce using rule 4 (expression -> ID .)
    FLOAT           reduce using rule 4 (expression -> ID .)
    STRING_LITERAL  reduce using rule 4 (expression -> ID .)
    ID              reduce using rule 4 (expression -> ID .)
    LPAREN          reduce using rule 4 (expression -> ID .)
    NOT             reduce using rule 4 (expression -> ID .)
    TYPE_BOOL       reduce using rule 4 (expression -> ID .)
    TYPE_STRING     reduce using rule 4 (expression -> ID .)
    TYPE_INT        reduce using rule 4 (expression -> ID .)
    TYPE_INT8       reduce using rule 4 (expression -> ID .)
    TYPE_INT16      reduce using rule 4 (expression -> ID .)
    TYPE_INT32      reduce using rule 4 (expression -> ID .)
    TYPE_INT64      reduce using rule 4 (expression -> ID .)
    TYPE_UINT       reduce using rule 4 (expression -> ID .)
    TYPE_UINT8      reduce using rule 4 (expression -> ID .)
    TYPE_UINT16     reduce using rule 4 (expression -> ID .)
    TYPE_UINT32     reduce using rule 4 (expression -> ID .)
    TYPE_UINT64     reduce using rule 4 (expression -> ID .)
    TYPE_UINTPTR    reduce using rule 4 (expression -> ID .)
    TYPE_FLOAT32    reduce using rule 4 (expression -> ID .)
    TYPE_FLOAT64    reduce using rule 4 (expression -> ID .)
    TYPE_COMPLEX64  reduce using rule 4 (expression -> ID .)
    TYPE_COMPLEX128 reduce using rule 4 (expression -> ID .)
    CONST           reduce using rule 4 (expression -> ID .)
    TYPE            reduce using rule 4 (expression -> ID .)
    VAR             reduce using rule 4 (expression -> ID .)
    FUNC            reduce using rule 4 (expression -> ID .)
    IMPORT          reduce using rule 4 (expression -> ID .)
    IF              reduce using rule 4 (expression -> ID .)
    FOR             reduce using rule 4 (expression -> ID .)
    RETURN          reduce using rule 4 (expression -> ID .)
    LBRACKET        reduce using rule 4 (expression -> ID .)
    STRUCT          reduce using rule 4 (expression -> ID .)
    ASTERISKS       reduce using rule 4 (expression -> ID .)
    INTERFACE       reduce using rule 4 (expression -> ID .)
    MAP             reduce using rule 4 (expression -> ID .)
    CHAN            reduce using rule 4 (expression -> ID .)
    CHANNEL_OPERATOR reduce using rule 4 (expression -> ID .)
    NORMAL_ASSIGNMENT reduce using rule 4 (expression -> ID .)
    ARITHMETICAL_ASSIGNMENT shift and go to state 71
    UNARY_ASSIGNMENT shift and go to state 72
    COMMA           shift and go to state 124

  ! NORMAL_ASSIGNMENT [ reduce using rule 52 (identifier_list -> ID .) ]


state 100

    (117) for_clause -> assignment_statement . SEMICOLON expression SEMICOLON expression
    (108) statement -> assignment_statement .

    SEMICOLON       shift and go to state 147
    ARITHMETIC_OPERATOR reduce using rule 108 (statement -> assignment_statement .)
    OR              reduce using rule 108 (statement -> assignment_statement .)
    AND             reduce using rule 108 (statement -> assignment_statement .)
    COMPARISON_OPERATOR reduce using rule 108 (statement -> assignment_statement .)
    LBRACE          reduce using rule 108 (statement -> assignment_statement .)
    INTEGER         reduce using rule 108 (statement -> assignment_statement .)
    FLOAT           reduce using rule 108 (statement -> assignment_statement .)
    STRING_LITERAL  reduce using rule 108 (statement -> assignment_statement .)
    ID              reduce using rule 108 (statement -> assignment_statement .)
    LPAREN          reduce using rule 108 (statement -> assignment_statement .)
    NOT             reduce using rule 108 (statement -> assignment_statement .)
    TYPE_BOOL       reduce using rule 108 (statement -> assignment_statement .)
    TYPE_STRING     reduce using rule 108 (statement -> assignment_statement .)
    TYPE_INT        reduce using rule 108 (statement -> assignment_statement .)
    TYPE_INT8       reduce using rule 108 (statement -> assignment_statement .)
    TYPE_INT16      reduce using rule 108 (statement -> assignment_statement .)
    TYPE_INT32      reduce using rule 108 (statement -> assignment_statement .)
    TYPE_INT64      reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINT       reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINT8      reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINT16     reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINT32     reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINT64     reduce using rule 108 (statement -> assignment_statement .)
    TYPE_UINTPTR    reduce using rule 108 (statement -> assignment_statement .)
    TYPE_FLOAT32    reduce using rule 108 (statement -> assignment_statement .)
    TYPE_FLOAT64    reduce using rule 108 (statement -> assignment_statement .)
    TYPE_COMPLEX64  reduce using rule 108 (statement -> assignment_statement .)
    TYPE_COMPLEX128 reduce using rule 108 (statement -> assignment_statement .)
    CONST           reduce using rule 108 (statement -> assignment_statement .)
    TYPE            reduce using rule 108 (statement -> assignment_statement .)
    VAR             reduce using rule 108 (statement -> assignment_statement .)
    FUNC            reduce using rule 108 (statement -> assignment_statement .)
    IMPORT          reduce using rule 108 (statement -> assignment_statement .)
    IF              reduce using rule 108 (statement -> assignment_statement .)
    FOR             reduce using rule 108 (statement -> assignment_statement .)
    RETURN          reduce using rule 108 (statement -> assignment_statement .)
    LBRACKET        reduce using rule 108 (statement -> assignment_statement .)
    STRUCT          reduce using rule 108 (statement -> assignment_statement .)
    ASTERISKS       reduce using rule 108 (statement -> assignment_statement .)
    INTERFACE       reduce using rule 108 (statement -> assignment_statement .)
    MAP             reduce using rule 108 (statement -> assignment_statement .)
    CHAN            reduce using rule 108 (statement -> assignment_statement .)
    CHANNEL_OPERATOR reduce using rule 108 (statement -> assignment_statement .)
    NORMAL_ASSIGNMENT reduce using rule 108 (statement -> assignment_statement .)


state 101

    (119) range_clause -> expression_list . NORMAL_ASSIGNMENT RANGE expression
    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

    NORMAL_ASSIGNMENT shift and go to state 148


state 102

    (120) range_clause -> identifier_list . NORMAL_ASSIGNMENT RANGE expression

    NORMAL_ASSIGNMENT shift and go to state 149


state 103

    (121) return_statement -> RETURN expression_list .
    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

  ! shift/reduce conflict for NORMAL_ASSIGNMENT resolved as shift
    ARITHMETIC_OPERATOR reduce using rule 121 (return_statement -> RETURN expression_list .)
    OR              reduce using rule 121 (return_statement -> RETURN expression_list .)
    AND             reduce using rule 121 (return_statement -> RETURN expression_list .)
    COMPARISON_OPERATOR reduce using rule 121 (return_statement -> RETURN expression_list .)
    INTEGER         reduce using rule 121 (return_statement -> RETURN expression_list .)
    FLOAT           reduce using rule 121 (return_statement -> RETURN expression_list .)
    STRING_LITERAL  reduce using rule 121 (return_statement -> RETURN expression_list .)
    ID              reduce using rule 121 (return_statement -> RETURN expression_list .)
    LPAREN          reduce using rule 121 (return_statement -> RETURN expression_list .)
    NOT             reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_BOOL       reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_STRING     reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_INT        reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_INT8       reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_INT16      reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_INT32      reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_INT64      reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_UINT       reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_UINT8      reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_UINT16     reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_UINT32     reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_UINT64     reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_UINTPTR    reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_FLOAT32    reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_FLOAT64    reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_COMPLEX64  reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE_COMPLEX128 reduce using rule 121 (return_statement -> RETURN expression_list .)
    CONST           reduce using rule 121 (return_statement -> RETURN expression_list .)
    TYPE            reduce using rule 121 (return_statement -> RETURN expression_list .)
    VAR             reduce using rule 121 (return_statement -> RETURN expression_list .)
    FUNC            reduce using rule 121 (return_statement -> RETURN expression_list .)
    IMPORT          reduce using rule 121 (return_statement -> RETURN expression_list .)
    IF              reduce using rule 121 (return_statement -> RETURN expression_list .)
    FOR             reduce using rule 121 (return_statement -> RETURN expression_list .)
    RETURN          reduce using rule 121 (return_statement -> RETURN expression_list .)
    LBRACKET        reduce using rule 121 (return_statement -> RETURN expression_list .)
    STRUCT          reduce using rule 121 (return_statement -> RETURN expression_list .)
    ASTERISKS       reduce using rule 121 (return_statement -> RETURN expression_list .)
    INTERFACE       reduce using rule 121 (return_statement -> RETURN expression_list .)
    MAP             reduce using rule 121 (return_statement -> RETURN expression_list .)
    CHAN            reduce using rule 121 (return_statement -> RETURN expression_list .)
    CHANNEL_OPERATOR reduce using rule 121 (return_statement -> RETURN expression_list .)
    $end            reduce using rule 121 (return_statement -> RETURN expression_list .)
    RPAREN          reduce using rule 121 (return_statement -> RETURN expression_list .)
    LBRACE          reduce using rule 121 (return_statement -> RETURN expression_list .)
    RBRACKET        reduce using rule 121 (return_statement -> RETURN expression_list .)
    RBRACE          reduce using rule 121 (return_statement -> RETURN expression_list .)
    SEMICOLON       reduce using rule 121 (return_statement -> RETURN expression_list .)
    NORMAL_ASSIGNMENT shift and go to state 65

  ! NORMAL_ASSIGNMENT [ reduce using rule 121 (return_statement -> RETURN expression_list .) ]


state 104

    (44) array_type -> LBRACKET expression . RBRACKET type
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    RBRACKET        shift and go to state 150
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 3
    type                           shift and go to state 12
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 105

    (45) slice_type -> LBRACKET RBRACKET . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 151
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 106

    (46) struct_type -> STRUCT LBRACE . RBRACE
    (47) struct_type -> STRUCT LBRACE . field_decl RBRACE
    (48) field_decl -> . identifier_list type string_lit
    (49) field_decl -> . identifier_list type
    (50) field_decl -> . embedded_field string_lit
    (51) field_decl -> . embedded_field
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list
    (54) embedded_field -> . ASTERISKS ID

    RBRACE          shift and go to state 152
    ID              shift and go to state 79
    ASTERISKS       shift and go to state 156

    field_decl                     shift and go to state 153
    identifier_list                shift and go to state 154
    embedded_field                 shift and go to state 155

state 107

    (56) pointer_type -> ASTERISKS type .

    ARITHMETIC_OPERATOR reduce using rule 56 (pointer_type -> ASTERISKS type .)
    OR              reduce using rule 56 (pointer_type -> ASTERISKS type .)
    AND             reduce using rule 56 (pointer_type -> ASTERISKS type .)
    COMPARISON_OPERATOR reduce using rule 56 (pointer_type -> ASTERISKS type .)
    INTEGER         reduce using rule 56 (pointer_type -> ASTERISKS type .)
    FLOAT           reduce using rule 56 (pointer_type -> ASTERISKS type .)
    STRING_LITERAL  reduce using rule 56 (pointer_type -> ASTERISKS type .)
    ID              reduce using rule 56 (pointer_type -> ASTERISKS type .)
    LPAREN          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    NOT             reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_BOOL       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_STRING     reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_INT        reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_INT8       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_INT16      reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_INT32      reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_INT64      reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINT       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINT8      reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINT16     reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINT32     reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINT64     reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINTPTR    reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_FLOAT32    reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_FLOAT64    reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_COMPLEX64  reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_COMPLEX128 reduce using rule 56 (pointer_type -> ASTERISKS type .)
    CONST           reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE            reduce using rule 56 (pointer_type -> ASTERISKS type .)
    VAR             reduce using rule 56 (pointer_type -> ASTERISKS type .)
    FUNC            reduce using rule 56 (pointer_type -> ASTERISKS type .)
    IMPORT          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    IF              reduce using rule 56 (pointer_type -> ASTERISKS type .)
    FOR             reduce using rule 56 (pointer_type -> ASTERISKS type .)
    RETURN          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    LBRACKET        reduce using rule 56 (pointer_type -> ASTERISKS type .)
    STRUCT          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    ASTERISKS       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    INTERFACE       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    MAP             reduce using rule 56 (pointer_type -> ASTERISKS type .)
    CHAN            reduce using rule 56 (pointer_type -> ASTERISKS type .)
    CHANNEL_OPERATOR reduce using rule 56 (pointer_type -> ASTERISKS type .)
    NORMAL_ASSIGNMENT reduce using rule 56 (pointer_type -> ASTERISKS type .)
    $end            reduce using rule 56 (pointer_type -> ASTERISKS type .)
    RPAREN          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    LBRACE          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    RBRACKET        reduce using rule 56 (pointer_type -> ASTERISKS type .)
    RBRACE          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    SEMICOLON       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    COMMA           reduce using rule 56 (pointer_type -> ASTERISKS type .)


state 108

    (57) function_type -> FUNC . signature
    (58) signature -> . parameters
    (59) signature -> . parameters result
    (63) parameters -> . LPAREN RPAREN
    (64) parameters -> . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 91

    signature                      shift and go to state 89
    parameters                     shift and go to state 90

state 109

    (71) interface_type -> INTERFACE LBRACE . method_spec RBRACE
    (72) method_spec -> . method_name signature
    (73) method_spec -> . interface_type_name
    (74) method_name -> . ID
    (75) interface_type_name -> . ID

    ID              shift and go to state 160

    method_spec                    shift and go to state 157
    method_name                    shift and go to state 158
    interface_type_name            shift and go to state 159

state 110

    (76) map_type -> MAP LBRACKET . key_type RBRACKET type
    (77) key_type -> . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    key_type                       shift and go to state 161
    type                           shift and go to state 162
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 111

    (78) channel_type -> CHAN type .

    ARITHMETIC_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    OR              reduce using rule 78 (channel_type -> CHAN type .)
    AND             reduce using rule 78 (channel_type -> CHAN type .)
    COMPARISON_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    INTEGER         reduce using rule 78 (channel_type -> CHAN type .)
    FLOAT           reduce using rule 78 (channel_type -> CHAN type .)
    STRING_LITERAL  reduce using rule 78 (channel_type -> CHAN type .)
    ID              reduce using rule 78 (channel_type -> CHAN type .)
    LPAREN          reduce using rule 78 (channel_type -> CHAN type .)
    NOT             reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_BOOL       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_STRING     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT        reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT8       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT16      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT32      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT64      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT8      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT16     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT32     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT64     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINTPTR    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_FLOAT32    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_FLOAT64    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_COMPLEX64  reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_COMPLEX128 reduce using rule 78 (channel_type -> CHAN type .)
    CONST           reduce using rule 78 (channel_type -> CHAN type .)
    TYPE            reduce using rule 78 (channel_type -> CHAN type .)
    VAR             reduce using rule 78 (channel_type -> CHAN type .)
    FUNC            reduce using rule 78 (channel_type -> CHAN type .)
    IMPORT          reduce using rule 78 (channel_type -> CHAN type .)
    IF              reduce using rule 78 (channel_type -> CHAN type .)
    FOR             reduce using rule 78 (channel_type -> CHAN type .)
    RETURN          reduce using rule 78 (channel_type -> CHAN type .)
    LBRACKET        reduce using rule 78 (channel_type -> CHAN type .)
    STRUCT          reduce using rule 78 (channel_type -> CHAN type .)
    ASTERISKS       reduce using rule 78 (channel_type -> CHAN type .)
    INTERFACE       reduce using rule 78 (channel_type -> CHAN type .)
    MAP             reduce using rule 78 (channel_type -> CHAN type .)
    CHAN            reduce using rule 78 (channel_type -> CHAN type .)
    CHANNEL_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    NORMAL_ASSIGNMENT reduce using rule 78 (channel_type -> CHAN type .)
    $end            reduce using rule 78 (channel_type -> CHAN type .)
    RPAREN          reduce using rule 78 (channel_type -> CHAN type .)
    LBRACE          reduce using rule 78 (channel_type -> CHAN type .)
    RBRACKET        reduce using rule 78 (channel_type -> CHAN type .)
    RBRACE          reduce using rule 78 (channel_type -> CHAN type .)
    SEMICOLON       reduce using rule 78 (channel_type -> CHAN type .)
    COMMA           reduce using rule 78 (channel_type -> CHAN type .)


state 112

    (79) channel_type -> CHAN CHANNEL_OPERATOR . type
    (80) channel_type -> CHANNEL_OPERATOR . CHAN type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    CHAN            shift and go to state 163
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 164
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 113

    (80) channel_type -> CHANNEL_OPERATOR CHAN . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 165
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 114

    (118) assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .
    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

  ! shift/reduce conflict for NORMAL_ASSIGNMENT resolved as shift
    ARITHMETIC_OPERATOR reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    OR              reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    AND             reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    COMPARISON_OPERATOR reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    INTEGER         reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    FLOAT           reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    STRING_LITERAL  reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    ID              reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    LPAREN          reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    NOT             reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_BOOL       reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_STRING     reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT        reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT8       reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT16      reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT32      reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT64      reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT       reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT8      reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT16     reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT32     reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT64     reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINTPTR    reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT32    reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT64    reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX64  reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX128 reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    CONST           reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    TYPE            reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    VAR             reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    FUNC            reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    IMPORT          reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    IF              reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    FOR             reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    RETURN          reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    LBRACKET        reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    STRUCT          reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    ASTERISKS       reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    INTERFACE       reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    MAP             reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    CHAN            reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    CHANNEL_OPERATOR reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    $end            reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    RPAREN          reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    LBRACE          reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    RBRACKET        reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    RBRACE          reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    SEMICOLON       reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .)
    NORMAL_ASSIGNMENT shift and go to state 65

  ! NORMAL_ASSIGNMENT [ reduce using rule 118 (assignment_statement -> expression_list NORMAL_ASSIGNMENT expression_list .) ]


state 115

    (6) expression -> expression ARITHMETIC_OPERATOR expression .
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
  ! reduce/reduce conflict for NORMAL_ASSIGNMENT resolved using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TYPE_BOOL resolved as shift
  ! shift/reduce conflict for TYPE_STRING resolved as shift
  ! shift/reduce conflict for TYPE_INT resolved as shift
  ! shift/reduce conflict for TYPE_INT8 resolved as shift
  ! shift/reduce conflict for TYPE_INT16 resolved as shift
  ! shift/reduce conflict for TYPE_INT32 resolved as shift
  ! shift/reduce conflict for TYPE_INT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINT resolved as shift
  ! shift/reduce conflict for TYPE_UINT8 resolved as shift
  ! shift/reduce conflict for TYPE_UINT16 resolved as shift
  ! shift/reduce conflict for TYPE_UINT32 resolved as shift
  ! shift/reduce conflict for TYPE_UINT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINTPTR resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT32 resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX128 resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ASTERISKS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for CHAN resolved as shift
  ! shift/reduce conflict for CHANNEL_OPERATOR resolved as shift
    NORMAL_ASSIGNMENT reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .)
    $end            reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .)
    RPAREN          reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .)
    LBRACE          reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .)
    RBRACKET        reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .)
    RBRACE          reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .)
    SEMICOLON       reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .)
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

  ! ARITHMETIC_OPERATOR [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! OR              [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! AND             [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! INTEGER         [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! FLOAT           [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! STRING_LITERAL  [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! ID              [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! LPAREN          [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! NOT             [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_BOOL       [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_STRING     [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_INT        [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_INT8       [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_INT16      [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_INT32      [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_INT64      [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_UINT       [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_UINT8      [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_UINT16     [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_UINT32     [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_UINT64     [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_UINTPTR    [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_FLOAT32    [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_FLOAT64    [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! CONST           [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! TYPE            [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! VAR             [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! FUNC            [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! IMPORT          [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! IF              [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! FOR             [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! RETURN          [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! LBRACKET        [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! STRUCT          [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! ASTERISKS       [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! INTERFACE       [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! MAP             [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! CHAN            [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 6 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! NORMAL_ASSIGNMENT [ reduce using rule 7 (expression_list -> expression .) ]

    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 116

    (9) expression -> expression OR expression .
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
  ! reduce/reduce conflict for NORMAL_ASSIGNMENT resolved using rule 7 (expression_list -> expression .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TYPE_BOOL resolved as shift
  ! shift/reduce conflict for TYPE_STRING resolved as shift
  ! shift/reduce conflict for TYPE_INT resolved as shift
  ! shift/reduce conflict for TYPE_INT8 resolved as shift
  ! shift/reduce conflict for TYPE_INT16 resolved as shift
  ! shift/reduce conflict for TYPE_INT32 resolved as shift
  ! shift/reduce conflict for TYPE_INT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINT resolved as shift
  ! shift/reduce conflict for TYPE_UINT8 resolved as shift
  ! shift/reduce conflict for TYPE_UINT16 resolved as shift
  ! shift/reduce conflict for TYPE_UINT32 resolved as shift
  ! shift/reduce conflict for TYPE_UINT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINTPTR resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT32 resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX128 resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ASTERISKS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for CHAN resolved as shift
  ! shift/reduce conflict for CHANNEL_OPERATOR resolved as shift
    $end            reduce using rule 9 (expression -> expression OR expression .)
    RPAREN          reduce using rule 9 (expression -> expression OR expression .)
    LBRACE          reduce using rule 9 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 9 (expression -> expression OR expression .)
    RBRACE          reduce using rule 9 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 9 (expression -> expression OR expression .)
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

  ! ARITHMETIC_OPERATOR [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! INTEGER         [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! FLOAT           [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! STRING_LITERAL  [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! ID              [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! LPAREN          [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! NOT             [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_BOOL       [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_STRING     [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_INT        [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_INT8       [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_INT16      [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_INT32      [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_INT64      [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_UINT       [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_UINT8      [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_UINT16     [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_UINT32     [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_UINT64     [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_UINTPTR    [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_FLOAT32    [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_FLOAT64    [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! CONST           [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! TYPE            [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! VAR             [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! FUNC            [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! IMPORT          [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! IF              [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! FOR             [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! RETURN          [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! LBRACKET        [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! STRUCT          [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! ASTERISKS       [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! INTERFACE       [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! MAP             [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! CHAN            [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! NORMAL_ASSIGNMENT [ reduce using rule 9 (expression -> expression OR expression .) ]

    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 117

    (10) expression -> expression AND expression .
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
  ! reduce/reduce conflict for NORMAL_ASSIGNMENT resolved using rule 7 (expression_list -> expression .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TYPE_BOOL resolved as shift
  ! shift/reduce conflict for TYPE_STRING resolved as shift
  ! shift/reduce conflict for TYPE_INT resolved as shift
  ! shift/reduce conflict for TYPE_INT8 resolved as shift
  ! shift/reduce conflict for TYPE_INT16 resolved as shift
  ! shift/reduce conflict for TYPE_INT32 resolved as shift
  ! shift/reduce conflict for TYPE_INT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINT resolved as shift
  ! shift/reduce conflict for TYPE_UINT8 resolved as shift
  ! shift/reduce conflict for TYPE_UINT16 resolved as shift
  ! shift/reduce conflict for TYPE_UINT32 resolved as shift
  ! shift/reduce conflict for TYPE_UINT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINTPTR resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT32 resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX128 resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ASTERISKS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for CHAN resolved as shift
  ! shift/reduce conflict for CHANNEL_OPERATOR resolved as shift
    $end            reduce using rule 10 (expression -> expression AND expression .)
    RPAREN          reduce using rule 10 (expression -> expression AND expression .)
    LBRACE          reduce using rule 10 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 10 (expression -> expression AND expression .)
    RBRACE          reduce using rule 10 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 10 (expression -> expression AND expression .)
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

  ! ARITHMETIC_OPERATOR [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! INTEGER         [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! FLOAT           [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! STRING_LITERAL  [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! ID              [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! LPAREN          [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! NOT             [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_BOOL       [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_STRING     [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_INT        [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_INT8       [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_INT16      [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_INT32      [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_INT64      [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_UINT       [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_UINT8      [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_UINT16     [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_UINT32     [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_UINT64     [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_UINTPTR    [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_FLOAT32    [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_FLOAT64    [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! CONST           [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! TYPE            [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! VAR             [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! FUNC            [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! IMPORT          [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! IF              [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! FOR             [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! RETURN          [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! LBRACKET        [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! STRUCT          [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! ASTERISKS       [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! INTERFACE       [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! MAP             [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! CHAN            [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! NORMAL_ASSIGNMENT [ reduce using rule 10 (expression -> expression AND expression .) ]

    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 118

    (12) expression -> expression COMPARISON_OPERATOR expression .
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
  ! reduce/reduce conflict for NORMAL_ASSIGNMENT resolved using rule 7 (expression_list -> expression .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TYPE_BOOL resolved as shift
  ! shift/reduce conflict for TYPE_STRING resolved as shift
  ! shift/reduce conflict for TYPE_INT resolved as shift
  ! shift/reduce conflict for TYPE_INT8 resolved as shift
  ! shift/reduce conflict for TYPE_INT16 resolved as shift
  ! shift/reduce conflict for TYPE_INT32 resolved as shift
  ! shift/reduce conflict for TYPE_INT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINT resolved as shift
  ! shift/reduce conflict for TYPE_UINT8 resolved as shift
  ! shift/reduce conflict for TYPE_UINT16 resolved as shift
  ! shift/reduce conflict for TYPE_UINT32 resolved as shift
  ! shift/reduce conflict for TYPE_UINT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINTPTR resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT32 resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX128 resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ASTERISKS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for CHAN resolved as shift
  ! shift/reduce conflict for CHANNEL_OPERATOR resolved as shift
    $end            reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    RPAREN          reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    LBRACE          reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    RBRACKET        reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    RBRACE          reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    SEMICOLON       reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

  ! ARITHMETIC_OPERATOR [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! OR              [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! AND             [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! INTEGER         [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! FLOAT           [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! STRING_LITERAL  [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! ID              [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! LPAREN          [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! NOT             [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_BOOL       [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_STRING     [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_INT        [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_INT8       [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_INT16      [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_INT32      [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_INT64      [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_UINT       [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_UINT8      [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_UINT16     [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_UINT32     [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_UINT64     [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_UINTPTR    [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_FLOAT32    [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_FLOAT64    [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! CONST           [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! TYPE            [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! VAR             [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! FUNC            [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! IMPORT          [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! IF              [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! FOR             [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! RETURN          [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! LBRACKET        [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! STRUCT          [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! ASTERISKS       [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! INTERFACE       [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! MAP             [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! CHAN            [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! NORMAL_ASSIGNMENT [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]

    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 119

    (13) arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
  ! reduce/reduce conflict for NORMAL_ASSIGNMENT resolved using rule 7 (expression_list -> expression .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TYPE_BOOL resolved as shift
  ! shift/reduce conflict for TYPE_STRING resolved as shift
  ! shift/reduce conflict for TYPE_INT resolved as shift
  ! shift/reduce conflict for TYPE_INT8 resolved as shift
  ! shift/reduce conflict for TYPE_INT16 resolved as shift
  ! shift/reduce conflict for TYPE_INT32 resolved as shift
  ! shift/reduce conflict for TYPE_INT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINT resolved as shift
  ! shift/reduce conflict for TYPE_UINT8 resolved as shift
  ! shift/reduce conflict for TYPE_UINT16 resolved as shift
  ! shift/reduce conflict for TYPE_UINT32 resolved as shift
  ! shift/reduce conflict for TYPE_UINT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINTPTR resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT32 resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX128 resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ASTERISKS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for CHAN resolved as shift
  ! shift/reduce conflict for CHANNEL_OPERATOR resolved as shift
    $end            reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    RPAREN          reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    LBRACE          reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    RBRACKET        reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    RBRACE          reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    SEMICOLON       reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

  ! ARITHMETIC_OPERATOR [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! OR              [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! AND             [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! INTEGER         [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! FLOAT           [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! STRING_LITERAL  [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! ID              [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! LPAREN          [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! NOT             [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_BOOL       [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_STRING     [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_INT        [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_INT8       [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_INT16      [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_INT32      [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_INT64      [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_UINT       [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_UINT8      [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_UINT16     [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_UINT32     [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_UINT64     [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_UINTPTR    [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_FLOAT32    [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_FLOAT64    [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! CONST           [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! TYPE            [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! VAR             [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! FUNC            [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! IMPORT          [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! IF              [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! FOR             [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! RETURN          [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! LBRACKET        [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! STRUCT          [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! ASTERISKS       [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! INTERFACE       [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! MAP             [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! CHAN            [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! NORMAL_ASSIGNMENT [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]

    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 120

    (5) expression -> LPAREN expression RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    COMPARISON_OPERATOR reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_BOOL       reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_STRING     reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_INT        reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_INT8       reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_INT16      reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_INT32      reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_INT64      reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_UINT       reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_UINT8      reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_UINT16     reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_UINT32     reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_UINT64     reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_UINTPTR    reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_FLOAT32    reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_FLOAT64    reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_COMPLEX64  reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE_COMPLEX128 reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    STRUCT          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    ASTERISKS       reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    INTERFACE       reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    MAP             reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    CHAN            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    CHANNEL_OPERATOR reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 5 (expression -> LPAREN expression RPAREN .)


state 121

    (88) const_decl -> CONST LPAREN const_spec . RPAREN

    RPAREN          shift and go to state 166


state 122

    (89) const_spec -> identifier_list NORMAL_ASSIGNMENT . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression_list                shift and go to state 167
    expression                     shift and go to state 3
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 123

    (90) const_spec -> identifier_list type . NORMAL_ASSIGNMENT expression_list

    NORMAL_ASSIGNMENT shift and go to state 168


state 124

    (53) identifier_list -> ID COMMA . identifier_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 79

    identifier_list                shift and go to state 169

state 125

    (92) type_decl -> TYPE LPAREN type_spec . RPAREN

    RPAREN          shift and go to state 170


state 126

    (95) alias_decl -> ID NORMAL_ASSIGNMENT . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 171
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 127

    (96) type_def -> ID type .

    ARITHMETIC_OPERATOR reduce using rule 96 (type_def -> ID type .)
    OR              reduce using rule 96 (type_def -> ID type .)
    AND             reduce using rule 96 (type_def -> ID type .)
    COMPARISON_OPERATOR reduce using rule 96 (type_def -> ID type .)
    INTEGER         reduce using rule 96 (type_def -> ID type .)
    FLOAT           reduce using rule 96 (type_def -> ID type .)
    STRING_LITERAL  reduce using rule 96 (type_def -> ID type .)
    ID              reduce using rule 96 (type_def -> ID type .)
    LPAREN          reduce using rule 96 (type_def -> ID type .)
    NOT             reduce using rule 96 (type_def -> ID type .)
    TYPE_BOOL       reduce using rule 96 (type_def -> ID type .)
    TYPE_STRING     reduce using rule 96 (type_def -> ID type .)
    TYPE_INT        reduce using rule 96 (type_def -> ID type .)
    TYPE_INT8       reduce using rule 96 (type_def -> ID type .)
    TYPE_INT16      reduce using rule 96 (type_def -> ID type .)
    TYPE_INT32      reduce using rule 96 (type_def -> ID type .)
    TYPE_INT64      reduce using rule 96 (type_def -> ID type .)
    TYPE_UINT       reduce using rule 96 (type_def -> ID type .)
    TYPE_UINT8      reduce using rule 96 (type_def -> ID type .)
    TYPE_UINT16     reduce using rule 96 (type_def -> ID type .)
    TYPE_UINT32     reduce using rule 96 (type_def -> ID type .)
    TYPE_UINT64     reduce using rule 96 (type_def -> ID type .)
    TYPE_UINTPTR    reduce using rule 96 (type_def -> ID type .)
    TYPE_FLOAT32    reduce using rule 96 (type_def -> ID type .)
    TYPE_FLOAT64    reduce using rule 96 (type_def -> ID type .)
    TYPE_COMPLEX64  reduce using rule 96 (type_def -> ID type .)
    TYPE_COMPLEX128 reduce using rule 96 (type_def -> ID type .)
    CONST           reduce using rule 96 (type_def -> ID type .)
    TYPE            reduce using rule 96 (type_def -> ID type .)
    VAR             reduce using rule 96 (type_def -> ID type .)
    FUNC            reduce using rule 96 (type_def -> ID type .)
    IMPORT          reduce using rule 96 (type_def -> ID type .)
    IF              reduce using rule 96 (type_def -> ID type .)
    FOR             reduce using rule 96 (type_def -> ID type .)
    RETURN          reduce using rule 96 (type_def -> ID type .)
    LBRACKET        reduce using rule 96 (type_def -> ID type .)
    STRUCT          reduce using rule 96 (type_def -> ID type .)
    ASTERISKS       reduce using rule 96 (type_def -> ID type .)
    INTERFACE       reduce using rule 96 (type_def -> ID type .)
    MAP             reduce using rule 96 (type_def -> ID type .)
    CHAN            reduce using rule 96 (type_def -> ID type .)
    CHANNEL_OPERATOR reduce using rule 96 (type_def -> ID type .)
    NORMAL_ASSIGNMENT reduce using rule 96 (type_def -> ID type .)
    $end            reduce using rule 96 (type_def -> ID type .)
    RPAREN          reduce using rule 96 (type_def -> ID type .)
    LBRACE          reduce using rule 96 (type_def -> ID type .)
    RBRACKET        reduce using rule 96 (type_def -> ID type .)
    RBRACE          reduce using rule 96 (type_def -> ID type .)
    SEMICOLON       reduce using rule 96 (type_def -> ID type .)


state 128

    (98) var_decl -> VAR LPAREN var_spec . RPAREN

    RPAREN          shift and go to state 172


state 129

    (99) var_spec -> identifier_list type .
    (100) var_spec -> identifier_list type . NORMAL_ASSIGNMENT expression_list

  ! shift/reduce conflict for NORMAL_ASSIGNMENT resolved as shift
    $end            reduce using rule 99 (var_spec -> identifier_list type .)
    ARITHMETIC_OPERATOR reduce using rule 99 (var_spec -> identifier_list type .)
    OR              reduce using rule 99 (var_spec -> identifier_list type .)
    AND             reduce using rule 99 (var_spec -> identifier_list type .)
    COMPARISON_OPERATOR reduce using rule 99 (var_spec -> identifier_list type .)
    INTEGER         reduce using rule 99 (var_spec -> identifier_list type .)
    FLOAT           reduce using rule 99 (var_spec -> identifier_list type .)
    STRING_LITERAL  reduce using rule 99 (var_spec -> identifier_list type .)
    ID              reduce using rule 99 (var_spec -> identifier_list type .)
    LPAREN          reduce using rule 99 (var_spec -> identifier_list type .)
    NOT             reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_BOOL       reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_STRING     reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_INT        reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_INT8       reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_INT16      reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_INT32      reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_INT64      reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_UINT       reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_UINT8      reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_UINT16     reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_UINT32     reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_UINT64     reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_UINTPTR    reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_FLOAT32    reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_FLOAT64    reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_COMPLEX64  reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE_COMPLEX128 reduce using rule 99 (var_spec -> identifier_list type .)
    CONST           reduce using rule 99 (var_spec -> identifier_list type .)
    TYPE            reduce using rule 99 (var_spec -> identifier_list type .)
    VAR             reduce using rule 99 (var_spec -> identifier_list type .)
    FUNC            reduce using rule 99 (var_spec -> identifier_list type .)
    IMPORT          reduce using rule 99 (var_spec -> identifier_list type .)
    IF              reduce using rule 99 (var_spec -> identifier_list type .)
    FOR             reduce using rule 99 (var_spec -> identifier_list type .)
    RETURN          reduce using rule 99 (var_spec -> identifier_list type .)
    LBRACKET        reduce using rule 99 (var_spec -> identifier_list type .)
    STRUCT          reduce using rule 99 (var_spec -> identifier_list type .)
    ASTERISKS       reduce using rule 99 (var_spec -> identifier_list type .)
    INTERFACE       reduce using rule 99 (var_spec -> identifier_list type .)
    MAP             reduce using rule 99 (var_spec -> identifier_list type .)
    CHAN            reduce using rule 99 (var_spec -> identifier_list type .)
    CHANNEL_OPERATOR reduce using rule 99 (var_spec -> identifier_list type .)
    RPAREN          reduce using rule 99 (var_spec -> identifier_list type .)
    LBRACE          reduce using rule 99 (var_spec -> identifier_list type .)
    RBRACKET        reduce using rule 99 (var_spec -> identifier_list type .)
    RBRACE          reduce using rule 99 (var_spec -> identifier_list type .)
    SEMICOLON       reduce using rule 99 (var_spec -> identifier_list type .)
    NORMAL_ASSIGNMENT shift and go to state 173

  ! NORMAL_ASSIGNMENT [ reduce using rule 99 (var_spec -> identifier_list type .) ]


state 130

    (101) var_spec -> identifier_list NORMAL_ASSIGNMENT . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression_list                shift and go to state 174
    expression                     shift and go to state 3
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 131

    (102) func_decl -> FUNC ID signature .
    (103) func_decl -> FUNC ID signature . block
    (111) block -> . LBRACE expression_list RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    ARITHMETIC_OPERATOR reduce using rule 102 (func_decl -> FUNC ID signature .)
    OR              reduce using rule 102 (func_decl -> FUNC ID signature .)
    AND             reduce using rule 102 (func_decl -> FUNC ID signature .)
    COMPARISON_OPERATOR reduce using rule 102 (func_decl -> FUNC ID signature .)
    INTEGER         reduce using rule 102 (func_decl -> FUNC ID signature .)
    FLOAT           reduce using rule 102 (func_decl -> FUNC ID signature .)
    STRING_LITERAL  reduce using rule 102 (func_decl -> FUNC ID signature .)
    ID              reduce using rule 102 (func_decl -> FUNC ID signature .)
    LPAREN          reduce using rule 102 (func_decl -> FUNC ID signature .)
    NOT             reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_BOOL       reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_STRING     reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_INT        reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_INT8       reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_INT16      reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_INT32      reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_INT64      reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_UINT       reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_UINT8      reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_UINT16     reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_UINT32     reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_UINT64     reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_UINTPTR    reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_FLOAT32    reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_FLOAT64    reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_COMPLEX64  reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE_COMPLEX128 reduce using rule 102 (func_decl -> FUNC ID signature .)
    CONST           reduce using rule 102 (func_decl -> FUNC ID signature .)
    TYPE            reduce using rule 102 (func_decl -> FUNC ID signature .)
    VAR             reduce using rule 102 (func_decl -> FUNC ID signature .)
    FUNC            reduce using rule 102 (func_decl -> FUNC ID signature .)
    IMPORT          reduce using rule 102 (func_decl -> FUNC ID signature .)
    IF              reduce using rule 102 (func_decl -> FUNC ID signature .)
    FOR             reduce using rule 102 (func_decl -> FUNC ID signature .)
    RETURN          reduce using rule 102 (func_decl -> FUNC ID signature .)
    LBRACKET        reduce using rule 102 (func_decl -> FUNC ID signature .)
    STRUCT          reduce using rule 102 (func_decl -> FUNC ID signature .)
    ASTERISKS       reduce using rule 102 (func_decl -> FUNC ID signature .)
    INTERFACE       reduce using rule 102 (func_decl -> FUNC ID signature .)
    MAP             reduce using rule 102 (func_decl -> FUNC ID signature .)
    CHAN            reduce using rule 102 (func_decl -> FUNC ID signature .)
    CHANNEL_OPERATOR reduce using rule 102 (func_decl -> FUNC ID signature .)
    NORMAL_ASSIGNMENT reduce using rule 102 (func_decl -> FUNC ID signature .)
    $end            reduce using rule 102 (func_decl -> FUNC ID signature .)
    RPAREN          reduce using rule 102 (func_decl -> FUNC ID signature .)
    RBRACKET        reduce using rule 102 (func_decl -> FUNC ID signature .)
    RBRACE          reduce using rule 102 (func_decl -> FUNC ID signature .)
    SEMICOLON       reduce using rule 102 (func_decl -> FUNC ID signature .)
    LBRACE          shift and go to state 143

  ! LBRACE          [ reduce using rule 102 (func_decl -> FUNC ID signature .) ]

    block                          shift and go to state 175

state 132

    (60) result -> parameters .

    ARITHMETIC_OPERATOR reduce using rule 60 (result -> parameters .)
    OR              reduce using rule 60 (result -> parameters .)
    AND             reduce using rule 60 (result -> parameters .)
    COMPARISON_OPERATOR reduce using rule 60 (result -> parameters .)
    INTEGER         reduce using rule 60 (result -> parameters .)
    FLOAT           reduce using rule 60 (result -> parameters .)
    STRING_LITERAL  reduce using rule 60 (result -> parameters .)
    ID              reduce using rule 60 (result -> parameters .)
    LPAREN          reduce using rule 60 (result -> parameters .)
    NOT             reduce using rule 60 (result -> parameters .)
    TYPE_BOOL       reduce using rule 60 (result -> parameters .)
    TYPE_STRING     reduce using rule 60 (result -> parameters .)
    TYPE_INT        reduce using rule 60 (result -> parameters .)
    TYPE_INT8       reduce using rule 60 (result -> parameters .)
    TYPE_INT16      reduce using rule 60 (result -> parameters .)
    TYPE_INT32      reduce using rule 60 (result -> parameters .)
    TYPE_INT64      reduce using rule 60 (result -> parameters .)
    TYPE_UINT       reduce using rule 60 (result -> parameters .)
    TYPE_UINT8      reduce using rule 60 (result -> parameters .)
    TYPE_UINT16     reduce using rule 60 (result -> parameters .)
    TYPE_UINT32     reduce using rule 60 (result -> parameters .)
    TYPE_UINT64     reduce using rule 60 (result -> parameters .)
    TYPE_UINTPTR    reduce using rule 60 (result -> parameters .)
    TYPE_FLOAT32    reduce using rule 60 (result -> parameters .)
    TYPE_FLOAT64    reduce using rule 60 (result -> parameters .)
    TYPE_COMPLEX64  reduce using rule 60 (result -> parameters .)
    TYPE_COMPLEX128 reduce using rule 60 (result -> parameters .)
    CONST           reduce using rule 60 (result -> parameters .)
    TYPE            reduce using rule 60 (result -> parameters .)
    VAR             reduce using rule 60 (result -> parameters .)
    FUNC            reduce using rule 60 (result -> parameters .)
    IMPORT          reduce using rule 60 (result -> parameters .)
    IF              reduce using rule 60 (result -> parameters .)
    FOR             reduce using rule 60 (result -> parameters .)
    RETURN          reduce using rule 60 (result -> parameters .)
    LBRACKET        reduce using rule 60 (result -> parameters .)
    STRUCT          reduce using rule 60 (result -> parameters .)
    ASTERISKS       reduce using rule 60 (result -> parameters .)
    INTERFACE       reduce using rule 60 (result -> parameters .)
    MAP             reduce using rule 60 (result -> parameters .)
    CHAN            reduce using rule 60 (result -> parameters .)
    CHANNEL_OPERATOR reduce using rule 60 (result -> parameters .)
    NORMAL_ASSIGNMENT reduce using rule 60 (result -> parameters .)
    $end            reduce using rule 60 (result -> parameters .)
    RPAREN          reduce using rule 60 (result -> parameters .)
    LBRACE          reduce using rule 60 (result -> parameters .)
    RBRACKET        reduce using rule 60 (result -> parameters .)
    RBRACE          reduce using rule 60 (result -> parameters .)
    SEMICOLON       reduce using rule 60 (result -> parameters .)
    COMMA           reduce using rule 60 (result -> parameters .)


state 133

    (59) signature -> parameters result .

    ARITHMETIC_OPERATOR reduce using rule 59 (signature -> parameters result .)
    OR              reduce using rule 59 (signature -> parameters result .)
    AND             reduce using rule 59 (signature -> parameters result .)
    COMPARISON_OPERATOR reduce using rule 59 (signature -> parameters result .)
    INTEGER         reduce using rule 59 (signature -> parameters result .)
    FLOAT           reduce using rule 59 (signature -> parameters result .)
    STRING_LITERAL  reduce using rule 59 (signature -> parameters result .)
    ID              reduce using rule 59 (signature -> parameters result .)
    LPAREN          reduce using rule 59 (signature -> parameters result .)
    NOT             reduce using rule 59 (signature -> parameters result .)
    TYPE_BOOL       reduce using rule 59 (signature -> parameters result .)
    TYPE_STRING     reduce using rule 59 (signature -> parameters result .)
    TYPE_INT        reduce using rule 59 (signature -> parameters result .)
    TYPE_INT8       reduce using rule 59 (signature -> parameters result .)
    TYPE_INT16      reduce using rule 59 (signature -> parameters result .)
    TYPE_INT32      reduce using rule 59 (signature -> parameters result .)
    TYPE_INT64      reduce using rule 59 (signature -> parameters result .)
    TYPE_UINT       reduce using rule 59 (signature -> parameters result .)
    TYPE_UINT8      reduce using rule 59 (signature -> parameters result .)
    TYPE_UINT16     reduce using rule 59 (signature -> parameters result .)
    TYPE_UINT32     reduce using rule 59 (signature -> parameters result .)
    TYPE_UINT64     reduce using rule 59 (signature -> parameters result .)
    TYPE_UINTPTR    reduce using rule 59 (signature -> parameters result .)
    TYPE_FLOAT32    reduce using rule 59 (signature -> parameters result .)
    TYPE_FLOAT64    reduce using rule 59 (signature -> parameters result .)
    TYPE_COMPLEX64  reduce using rule 59 (signature -> parameters result .)
    TYPE_COMPLEX128 reduce using rule 59 (signature -> parameters result .)
    CONST           reduce using rule 59 (signature -> parameters result .)
    TYPE            reduce using rule 59 (signature -> parameters result .)
    VAR             reduce using rule 59 (signature -> parameters result .)
    FUNC            reduce using rule 59 (signature -> parameters result .)
    IMPORT          reduce using rule 59 (signature -> parameters result .)
    IF              reduce using rule 59 (signature -> parameters result .)
    FOR             reduce using rule 59 (signature -> parameters result .)
    RETURN          reduce using rule 59 (signature -> parameters result .)
    LBRACKET        reduce using rule 59 (signature -> parameters result .)
    STRUCT          reduce using rule 59 (signature -> parameters result .)
    ASTERISKS       reduce using rule 59 (signature -> parameters result .)
    INTERFACE       reduce using rule 59 (signature -> parameters result .)
    MAP             reduce using rule 59 (signature -> parameters result .)
    CHAN            reduce using rule 59 (signature -> parameters result .)
    CHANNEL_OPERATOR reduce using rule 59 (signature -> parameters result .)
    NORMAL_ASSIGNMENT reduce using rule 59 (signature -> parameters result .)
    $end            reduce using rule 59 (signature -> parameters result .)
    RPAREN          reduce using rule 59 (signature -> parameters result .)
    LBRACE          reduce using rule 59 (signature -> parameters result .)
    RBRACKET        reduce using rule 59 (signature -> parameters result .)
    RBRACE          reduce using rule 59 (signature -> parameters result .)
    SEMICOLON       reduce using rule 59 (signature -> parameters result .)
    COMMA           reduce using rule 59 (signature -> parameters result .)


state 134

    (61) result -> type .

    ARITHMETIC_OPERATOR reduce using rule 61 (result -> type .)
    OR              reduce using rule 61 (result -> type .)
    AND             reduce using rule 61 (result -> type .)
    COMPARISON_OPERATOR reduce using rule 61 (result -> type .)
    INTEGER         reduce using rule 61 (result -> type .)
    FLOAT           reduce using rule 61 (result -> type .)
    STRING_LITERAL  reduce using rule 61 (result -> type .)
    ID              reduce using rule 61 (result -> type .)
    LPAREN          reduce using rule 61 (result -> type .)
    NOT             reduce using rule 61 (result -> type .)
    TYPE_BOOL       reduce using rule 61 (result -> type .)
    TYPE_STRING     reduce using rule 61 (result -> type .)
    TYPE_INT        reduce using rule 61 (result -> type .)
    TYPE_INT8       reduce using rule 61 (result -> type .)
    TYPE_INT16      reduce using rule 61 (result -> type .)
    TYPE_INT32      reduce using rule 61 (result -> type .)
    TYPE_INT64      reduce using rule 61 (result -> type .)
    TYPE_UINT       reduce using rule 61 (result -> type .)
    TYPE_UINT8      reduce using rule 61 (result -> type .)
    TYPE_UINT16     reduce using rule 61 (result -> type .)
    TYPE_UINT32     reduce using rule 61 (result -> type .)
    TYPE_UINT64     reduce using rule 61 (result -> type .)
    TYPE_UINTPTR    reduce using rule 61 (result -> type .)
    TYPE_FLOAT32    reduce using rule 61 (result -> type .)
    TYPE_FLOAT64    reduce using rule 61 (result -> type .)
    TYPE_COMPLEX64  reduce using rule 61 (result -> type .)
    TYPE_COMPLEX128 reduce using rule 61 (result -> type .)
    CONST           reduce using rule 61 (result -> type .)
    TYPE            reduce using rule 61 (result -> type .)
    VAR             reduce using rule 61 (result -> type .)
    FUNC            reduce using rule 61 (result -> type .)
    IMPORT          reduce using rule 61 (result -> type .)
    IF              reduce using rule 61 (result -> type .)
    FOR             reduce using rule 61 (result -> type .)
    RETURN          reduce using rule 61 (result -> type .)
    LBRACKET        reduce using rule 61 (result -> type .)
    STRUCT          reduce using rule 61 (result -> type .)
    ASTERISKS       reduce using rule 61 (result -> type .)
    INTERFACE       reduce using rule 61 (result -> type .)
    MAP             reduce using rule 61 (result -> type .)
    CHAN            reduce using rule 61 (result -> type .)
    CHANNEL_OPERATOR reduce using rule 61 (result -> type .)
    NORMAL_ASSIGNMENT reduce using rule 61 (result -> type .)
    $end            reduce using rule 61 (result -> type .)
    RPAREN          reduce using rule 61 (result -> type .)
    LBRACE          reduce using rule 61 (result -> type .)
    RBRACKET        reduce using rule 61 (result -> type .)
    RBRACE          reduce using rule 61 (result -> type .)
    SEMICOLON       reduce using rule 61 (result -> type .)
    COMMA           reduce using rule 61 (result -> type .)


state 135

    (62) result -> LPAREN . type RPAREN
    (63) parameters -> LPAREN . RPAREN
    (64) parameters -> LPAREN . parameter_list RPAREN
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (65) parameter_list -> . parameter_decl
    (66) parameter_list -> . parameter_decl COMMA parameter_list
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (67) parameter_decl -> . identifier_list
    (68) parameter_decl -> . identifier_list type
    (69) parameter_decl -> . ELLIPSIS type
    (70) parameter_decl -> . identifier_list ELLIPSIS type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    RPAREN          shift and go to state 136
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    ELLIPSIS        shift and go to state 140
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64
    ID              shift and go to state 79

    type                           shift and go to state 176
    parameter_list                 shift and go to state 137
    type_lit                       shift and go to state 32
    parameter_decl                 shift and go to state 138
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    identifier_list                shift and go to state 139

state 136

    (63) parameters -> LPAREN RPAREN .

    LPAREN          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_BOOL       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_STRING     reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_INT        reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_INT8       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_INT16      reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_INT32      reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_INT64      reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINT       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINT8      reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINT16     reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINT32     reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINT64     reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINTPTR    reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_FLOAT32    reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_FLOAT64    reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_COMPLEX64  reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_COMPLEX128 reduce using rule 63 (parameters -> LPAREN RPAREN .)
    LBRACKET        reduce using rule 63 (parameters -> LPAREN RPAREN .)
    STRUCT          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    ASTERISKS       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    FUNC            reduce using rule 63 (parameters -> LPAREN RPAREN .)
    INTERFACE       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    MAP             reduce using rule 63 (parameters -> LPAREN RPAREN .)
    CHAN            reduce using rule 63 (parameters -> LPAREN RPAREN .)
    CHANNEL_OPERATOR reduce using rule 63 (parameters -> LPAREN RPAREN .)
    ARITHMETIC_OPERATOR reduce using rule 63 (parameters -> LPAREN RPAREN .)
    OR              reduce using rule 63 (parameters -> LPAREN RPAREN .)
    AND             reduce using rule 63 (parameters -> LPAREN RPAREN .)
    COMPARISON_OPERATOR reduce using rule 63 (parameters -> LPAREN RPAREN .)
    INTEGER         reduce using rule 63 (parameters -> LPAREN RPAREN .)
    FLOAT           reduce using rule 63 (parameters -> LPAREN RPAREN .)
    STRING_LITERAL  reduce using rule 63 (parameters -> LPAREN RPAREN .)
    ID              reduce using rule 63 (parameters -> LPAREN RPAREN .)
    NOT             reduce using rule 63 (parameters -> LPAREN RPAREN .)
    CONST           reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE            reduce using rule 63 (parameters -> LPAREN RPAREN .)
    VAR             reduce using rule 63 (parameters -> LPAREN RPAREN .)
    IMPORT          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    IF              reduce using rule 63 (parameters -> LPAREN RPAREN .)
    FOR             reduce using rule 63 (parameters -> LPAREN RPAREN .)
    RETURN          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 63 (parameters -> LPAREN RPAREN .)
    $end            reduce using rule 63 (parameters -> LPAREN RPAREN .)
    RPAREN          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    LBRACE          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 63 (parameters -> LPAREN RPAREN .)
    RBRACE          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    COMMA           reduce using rule 63 (parameters -> LPAREN RPAREN .)


state 137

    (64) parameters -> LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 177


state 138

    (65) parameter_list -> parameter_decl .
    (66) parameter_list -> parameter_decl . COMMA parameter_list

    RPAREN          reduce using rule 65 (parameter_list -> parameter_decl .)
    COMMA           shift and go to state 178


state 139

    (67) parameter_decl -> identifier_list .
    (68) parameter_decl -> identifier_list . type
    (70) parameter_decl -> identifier_list . ELLIPSIS type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    COMMA           reduce using rule 67 (parameter_decl -> identifier_list .)
    RPAREN          reduce using rule 67 (parameter_decl -> identifier_list .)
    ELLIPSIS        shift and go to state 180
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 179
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 140

    (69) parameter_decl -> ELLIPSIS . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 181
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 141

    (105) import_decl -> IMPORT LPAREN string_lit . RPAREN

    RPAREN          shift and go to state 182


state 142

    (112) if_statement -> IF expression block .
    (113) if_statement -> IF expression block . ELSE block

    ARITHMETIC_OPERATOR reduce using rule 112 (if_statement -> IF expression block .)
    OR              reduce using rule 112 (if_statement -> IF expression block .)
    AND             reduce using rule 112 (if_statement -> IF expression block .)
    COMPARISON_OPERATOR reduce using rule 112 (if_statement -> IF expression block .)
    INTEGER         reduce using rule 112 (if_statement -> IF expression block .)
    FLOAT           reduce using rule 112 (if_statement -> IF expression block .)
    STRING_LITERAL  reduce using rule 112 (if_statement -> IF expression block .)
    ID              reduce using rule 112 (if_statement -> IF expression block .)
    LPAREN          reduce using rule 112 (if_statement -> IF expression block .)
    NOT             reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_BOOL       reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_STRING     reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_INT        reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_INT8       reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_INT16      reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_INT32      reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_INT64      reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_UINT       reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_UINT8      reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_UINT16     reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_UINT32     reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_UINT64     reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_UINTPTR    reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_FLOAT32    reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_FLOAT64    reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_COMPLEX64  reduce using rule 112 (if_statement -> IF expression block .)
    TYPE_COMPLEX128 reduce using rule 112 (if_statement -> IF expression block .)
    CONST           reduce using rule 112 (if_statement -> IF expression block .)
    TYPE            reduce using rule 112 (if_statement -> IF expression block .)
    VAR             reduce using rule 112 (if_statement -> IF expression block .)
    FUNC            reduce using rule 112 (if_statement -> IF expression block .)
    IMPORT          reduce using rule 112 (if_statement -> IF expression block .)
    IF              reduce using rule 112 (if_statement -> IF expression block .)
    FOR             reduce using rule 112 (if_statement -> IF expression block .)
    RETURN          reduce using rule 112 (if_statement -> IF expression block .)
    LBRACKET        reduce using rule 112 (if_statement -> IF expression block .)
    STRUCT          reduce using rule 112 (if_statement -> IF expression block .)
    ASTERISKS       reduce using rule 112 (if_statement -> IF expression block .)
    INTERFACE       reduce using rule 112 (if_statement -> IF expression block .)
    MAP             reduce using rule 112 (if_statement -> IF expression block .)
    CHAN            reduce using rule 112 (if_statement -> IF expression block .)
    CHANNEL_OPERATOR reduce using rule 112 (if_statement -> IF expression block .)
    NORMAL_ASSIGNMENT reduce using rule 112 (if_statement -> IF expression block .)
    $end            reduce using rule 112 (if_statement -> IF expression block .)
    RPAREN          reduce using rule 112 (if_statement -> IF expression block .)
    LBRACE          reduce using rule 112 (if_statement -> IF expression block .)
    RBRACKET        reduce using rule 112 (if_statement -> IF expression block .)
    RBRACE          reduce using rule 112 (if_statement -> IF expression block .)
    SEMICOLON       reduce using rule 112 (if_statement -> IF expression block .)
    ELSE            shift and go to state 183


state 143

    (111) block -> LBRACE . expression_list RBRACE
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression_list                shift and go to state 184
    expression                     shift and go to state 3
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 144

    (114) for_statement -> FOR expression block .

    ARITHMETIC_OPERATOR reduce using rule 114 (for_statement -> FOR expression block .)
    OR              reduce using rule 114 (for_statement -> FOR expression block .)
    AND             reduce using rule 114 (for_statement -> FOR expression block .)
    COMPARISON_OPERATOR reduce using rule 114 (for_statement -> FOR expression block .)
    INTEGER         reduce using rule 114 (for_statement -> FOR expression block .)
    FLOAT           reduce using rule 114 (for_statement -> FOR expression block .)
    STRING_LITERAL  reduce using rule 114 (for_statement -> FOR expression block .)
    ID              reduce using rule 114 (for_statement -> FOR expression block .)
    LPAREN          reduce using rule 114 (for_statement -> FOR expression block .)
    NOT             reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_BOOL       reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_STRING     reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_INT        reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_INT8       reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_INT16      reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_INT32      reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_INT64      reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_UINT       reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_UINT8      reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_UINT16     reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_UINT32     reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_UINT64     reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_UINTPTR    reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_FLOAT32    reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_FLOAT64    reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_COMPLEX64  reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE_COMPLEX128 reduce using rule 114 (for_statement -> FOR expression block .)
    CONST           reduce using rule 114 (for_statement -> FOR expression block .)
    TYPE            reduce using rule 114 (for_statement -> FOR expression block .)
    VAR             reduce using rule 114 (for_statement -> FOR expression block .)
    FUNC            reduce using rule 114 (for_statement -> FOR expression block .)
    IMPORT          reduce using rule 114 (for_statement -> FOR expression block .)
    IF              reduce using rule 114 (for_statement -> FOR expression block .)
    FOR             reduce using rule 114 (for_statement -> FOR expression block .)
    RETURN          reduce using rule 114 (for_statement -> FOR expression block .)
    LBRACKET        reduce using rule 114 (for_statement -> FOR expression block .)
    STRUCT          reduce using rule 114 (for_statement -> FOR expression block .)
    ASTERISKS       reduce using rule 114 (for_statement -> FOR expression block .)
    INTERFACE       reduce using rule 114 (for_statement -> FOR expression block .)
    MAP             reduce using rule 114 (for_statement -> FOR expression block .)
    CHAN            reduce using rule 114 (for_statement -> FOR expression block .)
    CHANNEL_OPERATOR reduce using rule 114 (for_statement -> FOR expression block .)
    NORMAL_ASSIGNMENT reduce using rule 114 (for_statement -> FOR expression block .)
    $end            reduce using rule 114 (for_statement -> FOR expression block .)
    RPAREN          reduce using rule 114 (for_statement -> FOR expression block .)
    LBRACE          reduce using rule 114 (for_statement -> FOR expression block .)
    RBRACKET        reduce using rule 114 (for_statement -> FOR expression block .)
    RBRACE          reduce using rule 114 (for_statement -> FOR expression block .)
    SEMICOLON       reduce using rule 114 (for_statement -> FOR expression block .)


state 145

    (115) for_statement -> FOR for_clause block .

    ARITHMETIC_OPERATOR reduce using rule 115 (for_statement -> FOR for_clause block .)
    OR              reduce using rule 115 (for_statement -> FOR for_clause block .)
    AND             reduce using rule 115 (for_statement -> FOR for_clause block .)
    COMPARISON_OPERATOR reduce using rule 115 (for_statement -> FOR for_clause block .)
    INTEGER         reduce using rule 115 (for_statement -> FOR for_clause block .)
    FLOAT           reduce using rule 115 (for_statement -> FOR for_clause block .)
    STRING_LITERAL  reduce using rule 115 (for_statement -> FOR for_clause block .)
    ID              reduce using rule 115 (for_statement -> FOR for_clause block .)
    LPAREN          reduce using rule 115 (for_statement -> FOR for_clause block .)
    NOT             reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_BOOL       reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_STRING     reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_INT        reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_INT8       reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_INT16      reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_INT32      reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_INT64      reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_UINT       reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_UINT8      reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_UINT16     reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_UINT32     reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_UINT64     reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_UINTPTR    reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_FLOAT32    reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_FLOAT64    reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_COMPLEX64  reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE_COMPLEX128 reduce using rule 115 (for_statement -> FOR for_clause block .)
    CONST           reduce using rule 115 (for_statement -> FOR for_clause block .)
    TYPE            reduce using rule 115 (for_statement -> FOR for_clause block .)
    VAR             reduce using rule 115 (for_statement -> FOR for_clause block .)
    FUNC            reduce using rule 115 (for_statement -> FOR for_clause block .)
    IMPORT          reduce using rule 115 (for_statement -> FOR for_clause block .)
    IF              reduce using rule 115 (for_statement -> FOR for_clause block .)
    FOR             reduce using rule 115 (for_statement -> FOR for_clause block .)
    RETURN          reduce using rule 115 (for_statement -> FOR for_clause block .)
    LBRACKET        reduce using rule 115 (for_statement -> FOR for_clause block .)
    STRUCT          reduce using rule 115 (for_statement -> FOR for_clause block .)
    ASTERISKS       reduce using rule 115 (for_statement -> FOR for_clause block .)
    INTERFACE       reduce using rule 115 (for_statement -> FOR for_clause block .)
    MAP             reduce using rule 115 (for_statement -> FOR for_clause block .)
    CHAN            reduce using rule 115 (for_statement -> FOR for_clause block .)
    CHANNEL_OPERATOR reduce using rule 115 (for_statement -> FOR for_clause block .)
    NORMAL_ASSIGNMENT reduce using rule 115 (for_statement -> FOR for_clause block .)
    $end            reduce using rule 115 (for_statement -> FOR for_clause block .)
    RPAREN          reduce using rule 115 (for_statement -> FOR for_clause block .)
    LBRACE          reduce using rule 115 (for_statement -> FOR for_clause block .)
    RBRACKET        reduce using rule 115 (for_statement -> FOR for_clause block .)
    RBRACE          reduce using rule 115 (for_statement -> FOR for_clause block .)
    SEMICOLON       reduce using rule 115 (for_statement -> FOR for_clause block .)


state 146

    (116) for_statement -> FOR range_clause block .

    ARITHMETIC_OPERATOR reduce using rule 116 (for_statement -> FOR range_clause block .)
    OR              reduce using rule 116 (for_statement -> FOR range_clause block .)
    AND             reduce using rule 116 (for_statement -> FOR range_clause block .)
    COMPARISON_OPERATOR reduce using rule 116 (for_statement -> FOR range_clause block .)
    INTEGER         reduce using rule 116 (for_statement -> FOR range_clause block .)
    FLOAT           reduce using rule 116 (for_statement -> FOR range_clause block .)
    STRING_LITERAL  reduce using rule 116 (for_statement -> FOR range_clause block .)
    ID              reduce using rule 116 (for_statement -> FOR range_clause block .)
    LPAREN          reduce using rule 116 (for_statement -> FOR range_clause block .)
    NOT             reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_BOOL       reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_STRING     reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_INT        reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_INT8       reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_INT16      reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_INT32      reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_INT64      reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_UINT       reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_UINT8      reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_UINT16     reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_UINT32     reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_UINT64     reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_UINTPTR    reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_FLOAT32    reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_FLOAT64    reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_COMPLEX64  reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE_COMPLEX128 reduce using rule 116 (for_statement -> FOR range_clause block .)
    CONST           reduce using rule 116 (for_statement -> FOR range_clause block .)
    TYPE            reduce using rule 116 (for_statement -> FOR range_clause block .)
    VAR             reduce using rule 116 (for_statement -> FOR range_clause block .)
    FUNC            reduce using rule 116 (for_statement -> FOR range_clause block .)
    IMPORT          reduce using rule 116 (for_statement -> FOR range_clause block .)
    IF              reduce using rule 116 (for_statement -> FOR range_clause block .)
    FOR             reduce using rule 116 (for_statement -> FOR range_clause block .)
    RETURN          reduce using rule 116 (for_statement -> FOR range_clause block .)
    LBRACKET        reduce using rule 116 (for_statement -> FOR range_clause block .)
    STRUCT          reduce using rule 116 (for_statement -> FOR range_clause block .)
    ASTERISKS       reduce using rule 116 (for_statement -> FOR range_clause block .)
    INTERFACE       reduce using rule 116 (for_statement -> FOR range_clause block .)
    MAP             reduce using rule 116 (for_statement -> FOR range_clause block .)
    CHAN            reduce using rule 116 (for_statement -> FOR range_clause block .)
    CHANNEL_OPERATOR reduce using rule 116 (for_statement -> FOR range_clause block .)
    NORMAL_ASSIGNMENT reduce using rule 116 (for_statement -> FOR range_clause block .)
    $end            reduce using rule 116 (for_statement -> FOR range_clause block .)
    RPAREN          reduce using rule 116 (for_statement -> FOR range_clause block .)
    LBRACE          reduce using rule 116 (for_statement -> FOR range_clause block .)
    RBRACKET        reduce using rule 116 (for_statement -> FOR range_clause block .)
    RBRACE          reduce using rule 116 (for_statement -> FOR range_clause block .)
    SEMICOLON       reduce using rule 116 (for_statement -> FOR range_clause block .)


state 147

    (117) for_clause -> assignment_statement SEMICOLON . expression SEMICOLON expression
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    assignment_statement           shift and go to state 40
    expression                     shift and go to state 185
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 148

    (119) range_clause -> expression_list NORMAL_ASSIGNMENT . RANGE expression
    (118) assignment_statement -> expression_list NORMAL_ASSIGNMENT . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    RANGE           shift and go to state 186
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression_list                shift and go to state 114
    expression                     shift and go to state 3
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 149

    (120) range_clause -> identifier_list NORMAL_ASSIGNMENT . RANGE expression

    RANGE           shift and go to state 187


state 150

    (44) array_type -> LBRACKET expression RBRACKET . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 188
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 151

    (45) slice_type -> LBRACKET RBRACKET type .

    ARITHMETIC_OPERATOR reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    OR              reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    AND             reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    COMPARISON_OPERATOR reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    INTEGER         reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    FLOAT           reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    STRING_LITERAL  reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    ID              reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    LPAREN          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    NOT             reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_BOOL       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_STRING     reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_INT        reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_INT8       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_INT16      reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_INT32      reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_INT64      reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINT       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINT8      reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINT16     reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINT32     reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINT64     reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINTPTR    reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_FLOAT32    reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_FLOAT64    reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_COMPLEX64  reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_COMPLEX128 reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    CONST           reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE            reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    VAR             reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    FUNC            reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    IMPORT          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    IF              reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    FOR             reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    RETURN          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    LBRACKET        reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    STRUCT          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    ASTERISKS       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    INTERFACE       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    MAP             reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    CHAN            reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    CHANNEL_OPERATOR reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    NORMAL_ASSIGNMENT reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    $end            reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    RPAREN          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    LBRACE          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    RBRACKET        reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    RBRACE          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    SEMICOLON       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    COMMA           reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)


state 152

    (46) struct_type -> STRUCT LBRACE RBRACE .

    ARITHMETIC_OPERATOR reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    OR              reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    AND             reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    COMPARISON_OPERATOR reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    INTEGER         reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    FLOAT           reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    ID              reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    LPAREN          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    NOT             reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_BOOL       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_STRING     reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_INT        reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_INT8       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_INT16      reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_INT32      reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_INT64      reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINT       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINT8      reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINT16     reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINT32     reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINT64     reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINTPTR    reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_FLOAT32    reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_FLOAT64    reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_COMPLEX64  reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_COMPLEX128 reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    CONST           reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE            reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    VAR             reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    FUNC            reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    IMPORT          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    IF              reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    FOR             reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    RETURN          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    LBRACKET        reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    STRUCT          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    ASTERISKS       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    INTERFACE       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    MAP             reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    CHAN            reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    CHANNEL_OPERATOR reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    NORMAL_ASSIGNMENT reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    $end            reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    RPAREN          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    LBRACE          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    RBRACKET        reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    RBRACE          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    SEMICOLON       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    COMMA           reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)


state 153

    (47) struct_type -> STRUCT LBRACE field_decl . RBRACE

    RBRACE          shift and go to state 189


state 154

    (48) field_decl -> identifier_list . type string_lit
    (49) field_decl -> identifier_list . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 190
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 155

    (50) field_decl -> embedded_field . string_lit
    (51) field_decl -> embedded_field .
    (55) string_lit -> . STRING_LITERAL

    RBRACE          reduce using rule 51 (field_decl -> embedded_field .)
    STRING_LITERAL  shift and go to state 94

    string_lit                     shift and go to state 191

state 156

    (54) embedded_field -> ASTERISKS . ID

    ID              shift and go to state 192


state 157

    (71) interface_type -> INTERFACE LBRACE method_spec . RBRACE

    RBRACE          shift and go to state 193


state 158

    (72) method_spec -> method_name . signature
    (58) signature -> . parameters
    (59) signature -> . parameters result
    (63) parameters -> . LPAREN RPAREN
    (64) parameters -> . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 91

    signature                      shift and go to state 194
    parameters                     shift and go to state 90

state 159

    (73) method_spec -> interface_type_name .

    RBRACE          reduce using rule 73 (method_spec -> interface_type_name .)


state 160

    (74) method_name -> ID .
    (75) interface_type_name -> ID .

    LPAREN          reduce using rule 74 (method_name -> ID .)
    RBRACE          reduce using rule 75 (interface_type_name -> ID .)


state 161

    (76) map_type -> MAP LBRACKET key_type . RBRACKET type

    RBRACKET        shift and go to state 195


state 162

    (77) key_type -> type .

    RBRACKET        reduce using rule 77 (key_type -> type .)


state 163

    (80) channel_type -> CHANNEL_OPERATOR CHAN . type
    (78) channel_type -> CHAN . type
    (79) channel_type -> CHAN . CHANNEL_OPERATOR type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    CHANNEL_OPERATOR shift and go to state 112
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63

    type                           shift and go to state 196
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 164

    (79) channel_type -> CHAN CHANNEL_OPERATOR type .

    ARITHMETIC_OPERATOR reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    OR              reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    AND             reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    COMPARISON_OPERATOR reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    INTEGER         reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    FLOAT           reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    STRING_LITERAL  reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    ID              reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    LPAREN          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    NOT             reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_BOOL       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_STRING     reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_INT        reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_INT8       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_INT16      reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_INT32      reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_INT64      reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINT       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINT8      reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINT16     reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINT32     reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINT64     reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINTPTR    reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_FLOAT32    reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_FLOAT64    reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_COMPLEX64  reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_COMPLEX128 reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    CONST           reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE            reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    VAR             reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    FUNC            reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    IMPORT          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    IF              reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    FOR             reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    RETURN          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    LBRACKET        reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    STRUCT          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    ASTERISKS       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    INTERFACE       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    MAP             reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    CHAN            reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    CHANNEL_OPERATOR reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    NORMAL_ASSIGNMENT reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    $end            reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    RPAREN          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    LBRACE          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    RBRACKET        reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    RBRACE          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    SEMICOLON       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    COMMA           reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)


state 165

    (80) channel_type -> CHANNEL_OPERATOR CHAN type .

    ARITHMETIC_OPERATOR reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    OR              reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    AND             reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    COMPARISON_OPERATOR reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    INTEGER         reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    FLOAT           reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    STRING_LITERAL  reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    ID              reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    LPAREN          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    NOT             reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_BOOL       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_STRING     reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_INT        reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_INT8       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_INT16      reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_INT32      reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_INT64      reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINT       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINT8      reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINT16     reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINT32     reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINT64     reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINTPTR    reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_FLOAT32    reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_FLOAT64    reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_COMPLEX64  reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_COMPLEX128 reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    CONST           reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE            reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    VAR             reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    FUNC            reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    IMPORT          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    IF              reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    FOR             reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    RETURN          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    LBRACKET        reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    STRUCT          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    ASTERISKS       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    INTERFACE       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    MAP             reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    CHAN            reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    CHANNEL_OPERATOR reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    NORMAL_ASSIGNMENT reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    $end            reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    RPAREN          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    LBRACE          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    RBRACKET        reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    RBRACE          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    SEMICOLON       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    COMMA           reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)


state 166

    (88) const_decl -> CONST LPAREN const_spec RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    OR              reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    AND             reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    COMPARISON_OPERATOR reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    INTEGER         reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    FLOAT           reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    STRING_LITERAL  reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    ID              reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    LPAREN          reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    NOT             reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_BOOL       reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_STRING     reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_INT        reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_INT8       reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_INT16      reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_INT32      reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_INT64      reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINT       reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINT8      reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINT16     reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINT32     reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINT64     reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINTPTR    reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_FLOAT32    reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_FLOAT64    reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_COMPLEX64  reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_COMPLEX128 reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    CONST           reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE            reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    VAR             reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    FUNC            reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    IMPORT          reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    IF              reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    FOR             reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    RETURN          reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    LBRACKET        reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    STRUCT          reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    ASTERISKS       reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    INTERFACE       reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    MAP             reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    CHAN            reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    CHANNEL_OPERATOR reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    $end            reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    RPAREN          reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    LBRACE          reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    RBRACKET        reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    RBRACE          reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)
    SEMICOLON       reduce using rule 88 (const_decl -> CONST LPAREN const_spec RPAREN .)


state 167

    (89) const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .
    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

  ! shift/reduce conflict for NORMAL_ASSIGNMENT resolved as shift
    $end            reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    ARITHMETIC_OPERATOR reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    OR              reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    AND             reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    COMPARISON_OPERATOR reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    INTEGER         reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    FLOAT           reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    STRING_LITERAL  reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    ID              reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    LPAREN          reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    NOT             reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_BOOL       reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_STRING     reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT        reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT8       reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT16      reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT32      reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT64      reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT       reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT8      reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT16     reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT32     reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT64     reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINTPTR    reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT32    reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT64    reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX64  reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX128 reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CONST           reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE            reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    VAR             reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    FUNC            reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    IMPORT          reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    IF              reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    FOR             reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RETURN          reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    LBRACKET        reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    STRUCT          reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    ASTERISKS       reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    INTERFACE       reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    MAP             reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CHAN            reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CHANNEL_OPERATOR reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RPAREN          reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    LBRACE          reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RBRACKET        reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RBRACE          reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    SEMICOLON       reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    NORMAL_ASSIGNMENT shift and go to state 65

  ! NORMAL_ASSIGNMENT [ reduce using rule 89 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .) ]


state 168

    (90) const_spec -> identifier_list type NORMAL_ASSIGNMENT . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 12
    expression_list                shift and go to state 197
    expression                     shift and go to state 3
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 169

    (53) identifier_list -> ID COMMA identifier_list .

    NORMAL_ASSIGNMENT reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_BOOL       reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_STRING     reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_INT        reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_INT8       reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_INT16      reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_INT32      reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_INT64      reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINT       reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINT8      reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINT16     reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINT32     reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINT64     reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINTPTR    reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_FLOAT32    reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_FLOAT64    reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_COMPLEX64  reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_COMPLEX128 reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    LBRACKET        reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    STRUCT          reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    ASTERISKS       reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    FUNC            reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    INTERFACE       reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    MAP             reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    CHAN            reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    CHANNEL_OPERATOR reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    ELLIPSIS        reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    COMMA           reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    RPAREN          reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)


state 170

    (92) type_decl -> TYPE LPAREN type_spec RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    OR              reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    AND             reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    COMPARISON_OPERATOR reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    INTEGER         reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    FLOAT           reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    STRING_LITERAL  reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    ID              reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    LPAREN          reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    NOT             reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_BOOL       reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_STRING     reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_INT        reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_INT8       reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_INT16      reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_INT32      reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_INT64      reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINT       reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINT8      reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINT16     reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINT32     reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINT64     reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINTPTR    reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_FLOAT32    reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_FLOAT64    reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_COMPLEX64  reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_COMPLEX128 reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    CONST           reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE            reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    VAR             reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    FUNC            reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    IMPORT          reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    IF              reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    FOR             reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    RETURN          reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    LBRACKET        reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    STRUCT          reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    ASTERISKS       reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    INTERFACE       reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    MAP             reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    CHAN            reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    CHANNEL_OPERATOR reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    $end            reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    RPAREN          reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    LBRACE          reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    RBRACKET        reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    RBRACE          reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    SEMICOLON       reduce using rule 92 (type_decl -> TYPE LPAREN type_spec RPAREN .)


state 171

    (95) alias_decl -> ID NORMAL_ASSIGNMENT type .

    ARITHMETIC_OPERATOR reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    OR              reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    AND             reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    COMPARISON_OPERATOR reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    INTEGER         reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    FLOAT           reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    STRING_LITERAL  reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    ID              reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    LPAREN          reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    NOT             reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_BOOL       reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_STRING     reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_INT        reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_INT8       reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_INT16      reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_INT32      reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_INT64      reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINT       reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINT8      reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINT16     reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINT32     reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINT64     reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINTPTR    reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_FLOAT32    reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_FLOAT64    reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_COMPLEX64  reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_COMPLEX128 reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    CONST           reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE            reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    VAR             reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    FUNC            reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    IMPORT          reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    IF              reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    FOR             reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    RETURN          reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    LBRACKET        reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    STRUCT          reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    ASTERISKS       reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    INTERFACE       reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    MAP             reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    CHAN            reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    CHANNEL_OPERATOR reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    NORMAL_ASSIGNMENT reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    $end            reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    RPAREN          reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    LBRACE          reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    RBRACKET        reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    RBRACE          reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    SEMICOLON       reduce using rule 95 (alias_decl -> ID NORMAL_ASSIGNMENT type .)


state 172

    (98) var_decl -> VAR LPAREN var_spec RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    OR              reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    AND             reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    COMPARISON_OPERATOR reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    INTEGER         reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    FLOAT           reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    STRING_LITERAL  reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    ID              reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    LPAREN          reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    NOT             reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_BOOL       reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_STRING     reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_INT        reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_INT8       reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_INT16      reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_INT32      reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_INT64      reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINT       reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINT8      reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINT16     reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINT32     reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINT64     reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINTPTR    reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_FLOAT32    reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_FLOAT64    reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_COMPLEX64  reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_COMPLEX128 reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    CONST           reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE            reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    VAR             reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    FUNC            reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    IMPORT          reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    IF              reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    FOR             reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    RETURN          reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    LBRACKET        reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    STRUCT          reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    ASTERISKS       reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    INTERFACE       reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    MAP             reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    CHAN            reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    CHANNEL_OPERATOR reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    $end            reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    RPAREN          reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    LBRACE          reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    RBRACKET        reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    RBRACE          reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)
    SEMICOLON       reduce using rule 98 (var_decl -> VAR LPAREN var_spec RPAREN .)


state 173

    (100) var_spec -> identifier_list type NORMAL_ASSIGNMENT . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 12
    expression_list                shift and go to state 198
    expression                     shift and go to state 3
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 174

    (101) var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .
    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

  ! shift/reduce conflict for NORMAL_ASSIGNMENT resolved as shift
    $end            reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    ARITHMETIC_OPERATOR reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    OR              reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    AND             reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    COMPARISON_OPERATOR reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    INTEGER         reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    FLOAT           reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    STRING_LITERAL  reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    ID              reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    LPAREN          reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    NOT             reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_BOOL       reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_STRING     reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT        reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT8       reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT16      reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT32      reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT64      reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT       reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT8      reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT16     reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT32     reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT64     reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINTPTR    reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT32    reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT64    reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX64  reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX128 reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CONST           reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE            reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    VAR             reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    FUNC            reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    IMPORT          reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    IF              reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    FOR             reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RETURN          reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    LBRACKET        reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    STRUCT          reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    ASTERISKS       reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    INTERFACE       reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    MAP             reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CHAN            reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CHANNEL_OPERATOR reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RPAREN          reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    LBRACE          reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RBRACKET        reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RBRACE          reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    SEMICOLON       reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    NORMAL_ASSIGNMENT shift and go to state 65

  ! NORMAL_ASSIGNMENT [ reduce using rule 101 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .) ]


state 175

    (103) func_decl -> FUNC ID signature block .

    ARITHMETIC_OPERATOR reduce using rule 103 (func_decl -> FUNC ID signature block .)
    OR              reduce using rule 103 (func_decl -> FUNC ID signature block .)
    AND             reduce using rule 103 (func_decl -> FUNC ID signature block .)
    COMPARISON_OPERATOR reduce using rule 103 (func_decl -> FUNC ID signature block .)
    INTEGER         reduce using rule 103 (func_decl -> FUNC ID signature block .)
    FLOAT           reduce using rule 103 (func_decl -> FUNC ID signature block .)
    STRING_LITERAL  reduce using rule 103 (func_decl -> FUNC ID signature block .)
    ID              reduce using rule 103 (func_decl -> FUNC ID signature block .)
    LPAREN          reduce using rule 103 (func_decl -> FUNC ID signature block .)
    NOT             reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_BOOL       reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_STRING     reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_INT        reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_INT8       reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_INT16      reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_INT32      reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_INT64      reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_UINT       reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_UINT8      reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_UINT16     reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_UINT32     reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_UINT64     reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_UINTPTR    reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_FLOAT32    reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_FLOAT64    reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_COMPLEX64  reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE_COMPLEX128 reduce using rule 103 (func_decl -> FUNC ID signature block .)
    CONST           reduce using rule 103 (func_decl -> FUNC ID signature block .)
    TYPE            reduce using rule 103 (func_decl -> FUNC ID signature block .)
    VAR             reduce using rule 103 (func_decl -> FUNC ID signature block .)
    FUNC            reduce using rule 103 (func_decl -> FUNC ID signature block .)
    IMPORT          reduce using rule 103 (func_decl -> FUNC ID signature block .)
    IF              reduce using rule 103 (func_decl -> FUNC ID signature block .)
    FOR             reduce using rule 103 (func_decl -> FUNC ID signature block .)
    RETURN          reduce using rule 103 (func_decl -> FUNC ID signature block .)
    LBRACKET        reduce using rule 103 (func_decl -> FUNC ID signature block .)
    STRUCT          reduce using rule 103 (func_decl -> FUNC ID signature block .)
    ASTERISKS       reduce using rule 103 (func_decl -> FUNC ID signature block .)
    INTERFACE       reduce using rule 103 (func_decl -> FUNC ID signature block .)
    MAP             reduce using rule 103 (func_decl -> FUNC ID signature block .)
    CHAN            reduce using rule 103 (func_decl -> FUNC ID signature block .)
    CHANNEL_OPERATOR reduce using rule 103 (func_decl -> FUNC ID signature block .)
    NORMAL_ASSIGNMENT reduce using rule 103 (func_decl -> FUNC ID signature block .)
    $end            reduce using rule 103 (func_decl -> FUNC ID signature block .)
    RPAREN          reduce using rule 103 (func_decl -> FUNC ID signature block .)
    LBRACE          reduce using rule 103 (func_decl -> FUNC ID signature block .)
    RBRACKET        reduce using rule 103 (func_decl -> FUNC ID signature block .)
    RBRACE          reduce using rule 103 (func_decl -> FUNC ID signature block .)
    SEMICOLON       reduce using rule 103 (func_decl -> FUNC ID signature block .)


state 176

    (62) result -> LPAREN type . RPAREN

    RPAREN          shift and go to state 199


state 177

    (64) parameters -> LPAREN parameter_list RPAREN .

    LPAREN          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_BOOL       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_STRING     reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_INT        reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_INT8       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_INT16      reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_INT32      reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_INT64      reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINT       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINT8      reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINT16     reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINT32     reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINT64     reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINTPTR    reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_FLOAT32    reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_FLOAT64    reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_COMPLEX64  reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_COMPLEX128 reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    STRUCT          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    ASTERISKS       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    FUNC            reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    INTERFACE       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    MAP             reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    CHAN            reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    CHANNEL_OPERATOR reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    ARITHMETIC_OPERATOR reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    OR              reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    AND             reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    COMPARISON_OPERATOR reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    INTEGER         reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    STRING_LITERAL  reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    ID              reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    NOT             reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    CONST           reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE            reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    VAR             reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    IMPORT          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    IF              reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    FOR             reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    RETURN          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    $end            reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    RBRACE          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    SEMICOLON       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)


state 178

    (66) parameter_list -> parameter_decl COMMA . parameter_list
    (65) parameter_list -> . parameter_decl
    (66) parameter_list -> . parameter_decl COMMA parameter_list
    (67) parameter_decl -> . identifier_list
    (68) parameter_decl -> . identifier_list type
    (69) parameter_decl -> . ELLIPSIS type
    (70) parameter_decl -> . identifier_list ELLIPSIS type
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    ELLIPSIS        shift and go to state 140
    ID              shift and go to state 79

    parameter_decl                 shift and go to state 138
    parameter_list                 shift and go to state 200
    identifier_list                shift and go to state 139

state 179

    (68) parameter_decl -> identifier_list type .

    COMMA           reduce using rule 68 (parameter_decl -> identifier_list type .)
    RPAREN          reduce using rule 68 (parameter_decl -> identifier_list type .)


state 180

    (70) parameter_decl -> identifier_list ELLIPSIS . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 201
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 181

    (69) parameter_decl -> ELLIPSIS type .

    COMMA           reduce using rule 69 (parameter_decl -> ELLIPSIS type .)
    RPAREN          reduce using rule 69 (parameter_decl -> ELLIPSIS type .)


state 182

    (105) import_decl -> IMPORT LPAREN string_lit RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    OR              reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    AND             reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    COMPARISON_OPERATOR reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    INTEGER         reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    FLOAT           reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    STRING_LITERAL  reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    ID              reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    LPAREN          reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    NOT             reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_BOOL       reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_STRING     reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_INT        reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_INT8       reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_INT16      reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_INT32      reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_INT64      reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_UINT       reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_UINT8      reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_UINT16     reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_UINT32     reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_UINT64     reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_UINTPTR    reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_FLOAT32    reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_FLOAT64    reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_COMPLEX64  reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE_COMPLEX128 reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    CONST           reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    TYPE            reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    VAR             reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    FUNC            reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    IMPORT          reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    IF              reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    FOR             reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    RETURN          reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    LBRACKET        reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    STRUCT          reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    ASTERISKS       reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    INTERFACE       reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    MAP             reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    CHAN            reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    CHANNEL_OPERATOR reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    $end            reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    RPAREN          reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    LBRACE          reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    RBRACKET        reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    RBRACE          reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)
    SEMICOLON       reduce using rule 105 (import_decl -> IMPORT LPAREN string_lit RPAREN .)


state 183

    (113) if_statement -> IF expression block ELSE . block
    (111) block -> . LBRACE expression_list RBRACE

    LBRACE          shift and go to state 143

    block                          shift and go to state 202

state 184

    (111) block -> LBRACE expression_list . RBRACE
    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

    RBRACE          shift and go to state 203
    NORMAL_ASSIGNMENT shift and go to state 65


state 185

    (117) for_clause -> assignment_statement SEMICOLON expression . SEMICOLON expression
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    SEMICOLON       shift and go to state 204
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    assignment_statement           shift and go to state 40
    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 186

    (119) range_clause -> expression_list NORMAL_ASSIGNMENT RANGE . expression
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression_list                shift and go to state 74
    expression                     shift and go to state 205
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 187

    (120) range_clause -> identifier_list NORMAL_ASSIGNMENT RANGE . expression
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 206
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 188

    (44) array_type -> LBRACKET expression RBRACKET type .

    ARITHMETIC_OPERATOR reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    OR              reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    AND             reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    COMPARISON_OPERATOR reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    INTEGER         reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    FLOAT           reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    STRING_LITERAL  reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    ID              reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    LPAREN          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    NOT             reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_BOOL       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_STRING     reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_INT        reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_INT8       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_INT16      reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_INT32      reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_INT64      reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINT       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINT8      reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINT16     reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINT32     reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINT64     reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINTPTR    reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_FLOAT32    reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_FLOAT64    reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_COMPLEX64  reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_COMPLEX128 reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    CONST           reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE            reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    VAR             reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    FUNC            reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    IMPORT          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    IF              reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    FOR             reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    RETURN          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    LBRACKET        reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    STRUCT          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    ASTERISKS       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    INTERFACE       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    MAP             reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    CHAN            reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    CHANNEL_OPERATOR reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    NORMAL_ASSIGNMENT reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    $end            reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    RPAREN          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    LBRACE          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    RBRACKET        reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    RBRACE          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    SEMICOLON       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    COMMA           reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)


state 189

    (47) struct_type -> STRUCT LBRACE field_decl RBRACE .

    ARITHMETIC_OPERATOR reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    OR              reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    AND             reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    COMPARISON_OPERATOR reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    INTEGER         reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    FLOAT           reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    STRING_LITERAL  reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    ID              reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    LPAREN          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    NOT             reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_BOOL       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_STRING     reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_INT        reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_INT8       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_INT16      reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_INT32      reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_INT64      reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINT       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINT8      reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINT16     reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINT32     reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINT64     reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINTPTR    reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_FLOAT32    reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_FLOAT64    reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_COMPLEX64  reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_COMPLEX128 reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    CONST           reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE            reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    VAR             reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    FUNC            reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    IMPORT          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    IF              reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    FOR             reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    RETURN          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    LBRACKET        reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    STRUCT          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    ASTERISKS       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    INTERFACE       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    MAP             reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    CHAN            reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    CHANNEL_OPERATOR reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    NORMAL_ASSIGNMENT reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    $end            reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    RPAREN          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    LBRACE          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    RBRACKET        reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    RBRACE          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    SEMICOLON       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    COMMA           reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)


state 190

    (48) field_decl -> identifier_list type . string_lit
    (49) field_decl -> identifier_list type .
    (55) string_lit -> . STRING_LITERAL

    RBRACE          reduce using rule 49 (field_decl -> identifier_list type .)
    STRING_LITERAL  shift and go to state 94

    string_lit                     shift and go to state 207

state 191

    (50) field_decl -> embedded_field string_lit .

    RBRACE          reduce using rule 50 (field_decl -> embedded_field string_lit .)


state 192

    (54) embedded_field -> ASTERISKS ID .

    STRING_LITERAL  reduce using rule 54 (embedded_field -> ASTERISKS ID .)
    RBRACE          reduce using rule 54 (embedded_field -> ASTERISKS ID .)


state 193

    (71) interface_type -> INTERFACE LBRACE method_spec RBRACE .

    ARITHMETIC_OPERATOR reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    OR              reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    AND             reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    COMPARISON_OPERATOR reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    INTEGER         reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    FLOAT           reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    STRING_LITERAL  reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    ID              reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    LPAREN          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    NOT             reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_BOOL       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_STRING     reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_INT        reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_INT8       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_INT16      reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_INT32      reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_INT64      reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINT       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINT8      reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINT16     reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINT32     reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINT64     reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINTPTR    reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_FLOAT32    reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_FLOAT64    reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_COMPLEX64  reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_COMPLEX128 reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    CONST           reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE            reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    VAR             reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    FUNC            reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    IMPORT          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    IF              reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    FOR             reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    RETURN          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    LBRACKET        reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    STRUCT          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    ASTERISKS       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    INTERFACE       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    MAP             reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    CHAN            reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    CHANNEL_OPERATOR reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    NORMAL_ASSIGNMENT reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    $end            reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    RPAREN          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    LBRACE          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    RBRACKET        reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    RBRACE          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    SEMICOLON       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    COMMA           reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)


state 194

    (72) method_spec -> method_name signature .

    RBRACE          reduce using rule 72 (method_spec -> method_name signature .)


state 195

    (76) map_type -> MAP LBRACKET key_type RBRACKET . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    FUNC            shift and go to state 108
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    type                           shift and go to state 208
    type_lit                       shift and go to state 32
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 196

    (80) channel_type -> CHANNEL_OPERATOR CHAN type .
    (78) channel_type -> CHAN type .

  ! reduce/reduce conflict for ARITHMETIC_OPERATOR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for OR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for AND resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for COMPARISON_OPERATOR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for INTEGER resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for FLOAT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for ID resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for LPAREN resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for NOT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_BOOL resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_STRING resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_INT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_INT8 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_INT16 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_INT32 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_INT64 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINT8 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINT16 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINT32 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINT64 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINTPTR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_FLOAT32 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_FLOAT64 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_COMPLEX64 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_COMPLEX128 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for CONST resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for VAR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for FUNC resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for IMPORT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for IF resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for FOR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for RETURN resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for STRUCT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for ASTERISKS resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for MAP resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for CHAN resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for CHANNEL_OPERATOR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for NORMAL_ASSIGNMENT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for $end resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for LBRACE resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for RBRACE resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for COMMA resolved using rule 78 (channel_type -> CHAN type .)
    ARITHMETIC_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    OR              reduce using rule 78 (channel_type -> CHAN type .)
    AND             reduce using rule 78 (channel_type -> CHAN type .)
    COMPARISON_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    INTEGER         reduce using rule 78 (channel_type -> CHAN type .)
    FLOAT           reduce using rule 78 (channel_type -> CHAN type .)
    STRING_LITERAL  reduce using rule 78 (channel_type -> CHAN type .)
    ID              reduce using rule 78 (channel_type -> CHAN type .)
    LPAREN          reduce using rule 78 (channel_type -> CHAN type .)
    NOT             reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_BOOL       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_STRING     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT        reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT8       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT16      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT32      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT64      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT8      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT16     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT32     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT64     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINTPTR    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_FLOAT32    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_FLOAT64    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_COMPLEX64  reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_COMPLEX128 reduce using rule 78 (channel_type -> CHAN type .)
    CONST           reduce using rule 78 (channel_type -> CHAN type .)
    TYPE            reduce using rule 78 (channel_type -> CHAN type .)
    VAR             reduce using rule 78 (channel_type -> CHAN type .)
    FUNC            reduce using rule 78 (channel_type -> CHAN type .)
    IMPORT          reduce using rule 78 (channel_type -> CHAN type .)
    IF              reduce using rule 78 (channel_type -> CHAN type .)
    FOR             reduce using rule 78 (channel_type -> CHAN type .)
    RETURN          reduce using rule 78 (channel_type -> CHAN type .)
    LBRACKET        reduce using rule 78 (channel_type -> CHAN type .)
    STRUCT          reduce using rule 78 (channel_type -> CHAN type .)
    ASTERISKS       reduce using rule 78 (channel_type -> CHAN type .)
    INTERFACE       reduce using rule 78 (channel_type -> CHAN type .)
    MAP             reduce using rule 78 (channel_type -> CHAN type .)
    CHAN            reduce using rule 78 (channel_type -> CHAN type .)
    CHANNEL_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    NORMAL_ASSIGNMENT reduce using rule 78 (channel_type -> CHAN type .)
    $end            reduce using rule 78 (channel_type -> CHAN type .)
    RPAREN          reduce using rule 78 (channel_type -> CHAN type .)
    LBRACE          reduce using rule 78 (channel_type -> CHAN type .)
    RBRACKET        reduce using rule 78 (channel_type -> CHAN type .)
    RBRACE          reduce using rule 78 (channel_type -> CHAN type .)
    SEMICOLON       reduce using rule 78 (channel_type -> CHAN type .)
    COMMA           reduce using rule 78 (channel_type -> CHAN type .)

  ! ARITHMETIC_OPERATOR [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! OR              [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! AND             [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! INTEGER         [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! FLOAT           [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! STRING_LITERAL  [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! ID              [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! LPAREN          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! NOT             [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_BOOL       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_STRING     [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_INT        [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_INT8       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_INT16      [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_INT32      [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_INT64      [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINT       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINT8      [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINT16     [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINT32     [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINT64     [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINTPTR    [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_FLOAT32    [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_FLOAT64    [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! CONST           [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE            [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! VAR             [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! FUNC            [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! IMPORT          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! IF              [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! FOR             [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! RETURN          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! LBRACKET        [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! STRUCT          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! ASTERISKS       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! INTERFACE       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! MAP             [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! CHAN            [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! NORMAL_ASSIGNMENT [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! $end            [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! RPAREN          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! LBRACE          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! RBRACKET        [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! RBRACE          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! SEMICOLON       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! COMMA           [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]


state 197

    (90) const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .
    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

  ! shift/reduce conflict for NORMAL_ASSIGNMENT resolved as shift
    $end            reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    ARITHMETIC_OPERATOR reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    OR              reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    AND             reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    COMPARISON_OPERATOR reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    INTEGER         reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    FLOAT           reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    STRING_LITERAL  reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    ID              reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    LPAREN          reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    NOT             reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_BOOL       reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_STRING     reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT        reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT8       reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT16      reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT32      reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT64      reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT       reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT8      reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT16     reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT32     reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT64     reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINTPTR    reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT32    reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT64    reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX64  reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX128 reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CONST           reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE            reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    VAR             reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    FUNC            reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    IMPORT          reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    IF              reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    FOR             reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RETURN          reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    LBRACKET        reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    STRUCT          reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    ASTERISKS       reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    INTERFACE       reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    MAP             reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CHAN            reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CHANNEL_OPERATOR reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RPAREN          reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    LBRACE          reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RBRACKET        reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RBRACE          reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    SEMICOLON       reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    NORMAL_ASSIGNMENT shift and go to state 65

  ! NORMAL_ASSIGNMENT [ reduce using rule 90 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .) ]


state 198

    (100) var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .
    (118) assignment_statement -> expression_list . NORMAL_ASSIGNMENT expression_list

  ! shift/reduce conflict for NORMAL_ASSIGNMENT resolved as shift
    $end            reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    ARITHMETIC_OPERATOR reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    OR              reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    AND             reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    COMPARISON_OPERATOR reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    INTEGER         reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    FLOAT           reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    STRING_LITERAL  reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    ID              reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    LPAREN          reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    NOT             reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_BOOL       reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_STRING     reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT        reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT8       reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT16      reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT32      reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT64      reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT       reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT8      reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT16     reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT32     reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT64     reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINTPTR    reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT32    reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT64    reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX64  reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX128 reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CONST           reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE            reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    VAR             reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    FUNC            reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    IMPORT          reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    IF              reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    FOR             reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RETURN          reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    LBRACKET        reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    STRUCT          reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    ASTERISKS       reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    INTERFACE       reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    MAP             reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CHAN            reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CHANNEL_OPERATOR reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RPAREN          reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    LBRACE          reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RBRACKET        reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RBRACE          reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    SEMICOLON       reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    NORMAL_ASSIGNMENT shift and go to state 65

  ! NORMAL_ASSIGNMENT [ reduce using rule 100 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .) ]


state 199

    (62) result -> LPAREN type RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 62 (result -> LPAREN type RPAREN .)
    OR              reduce using rule 62 (result -> LPAREN type RPAREN .)
    AND             reduce using rule 62 (result -> LPAREN type RPAREN .)
    COMPARISON_OPERATOR reduce using rule 62 (result -> LPAREN type RPAREN .)
    INTEGER         reduce using rule 62 (result -> LPAREN type RPAREN .)
    FLOAT           reduce using rule 62 (result -> LPAREN type RPAREN .)
    STRING_LITERAL  reduce using rule 62 (result -> LPAREN type RPAREN .)
    ID              reduce using rule 62 (result -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 62 (result -> LPAREN type RPAREN .)
    NOT             reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_BOOL       reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_STRING     reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_INT        reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_INT8       reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_INT16      reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_INT32      reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_INT64      reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINT       reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINT8      reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINT16     reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINT32     reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINT64     reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINTPTR    reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_FLOAT32    reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_FLOAT64    reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_COMPLEX64  reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_COMPLEX128 reduce using rule 62 (result -> LPAREN type RPAREN .)
    CONST           reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE            reduce using rule 62 (result -> LPAREN type RPAREN .)
    VAR             reduce using rule 62 (result -> LPAREN type RPAREN .)
    FUNC            reduce using rule 62 (result -> LPAREN type RPAREN .)
    IMPORT          reduce using rule 62 (result -> LPAREN type RPAREN .)
    IF              reduce using rule 62 (result -> LPAREN type RPAREN .)
    FOR             reduce using rule 62 (result -> LPAREN type RPAREN .)
    RETURN          reduce using rule 62 (result -> LPAREN type RPAREN .)
    LBRACKET        reduce using rule 62 (result -> LPAREN type RPAREN .)
    STRUCT          reduce using rule 62 (result -> LPAREN type RPAREN .)
    ASTERISKS       reduce using rule 62 (result -> LPAREN type RPAREN .)
    INTERFACE       reduce using rule 62 (result -> LPAREN type RPAREN .)
    MAP             reduce using rule 62 (result -> LPAREN type RPAREN .)
    CHAN            reduce using rule 62 (result -> LPAREN type RPAREN .)
    CHANNEL_OPERATOR reduce using rule 62 (result -> LPAREN type RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 62 (result -> LPAREN type RPAREN .)
    $end            reduce using rule 62 (result -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 62 (result -> LPAREN type RPAREN .)
    LBRACE          reduce using rule 62 (result -> LPAREN type RPAREN .)
    RBRACKET        reduce using rule 62 (result -> LPAREN type RPAREN .)
    RBRACE          reduce using rule 62 (result -> LPAREN type RPAREN .)
    SEMICOLON       reduce using rule 62 (result -> LPAREN type RPAREN .)
    COMMA           reduce using rule 62 (result -> LPAREN type RPAREN .)


state 200

    (66) parameter_list -> parameter_decl COMMA parameter_list .

    RPAREN          reduce using rule 66 (parameter_list -> parameter_decl COMMA parameter_list .)


state 201

    (70) parameter_decl -> identifier_list ELLIPSIS type .

    COMMA           reduce using rule 70 (parameter_decl -> identifier_list ELLIPSIS type .)
    RPAREN          reduce using rule 70 (parameter_decl -> identifier_list ELLIPSIS type .)


state 202

    (113) if_statement -> IF expression block ELSE block .

    ARITHMETIC_OPERATOR reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    OR              reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    AND             reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    COMPARISON_OPERATOR reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    INTEGER         reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    FLOAT           reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    STRING_LITERAL  reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    ID              reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    LPAREN          reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    NOT             reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_BOOL       reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_STRING     reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_INT        reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_INT8       reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_INT16      reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_INT32      reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_INT64      reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_UINT       reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_UINT8      reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_UINT16     reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_UINT32     reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_UINT64     reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_UINTPTR    reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_FLOAT32    reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_FLOAT64    reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_COMPLEX64  reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE_COMPLEX128 reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    CONST           reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    TYPE            reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    VAR             reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    FUNC            reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    IMPORT          reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    IF              reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    FOR             reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    RETURN          reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    LBRACKET        reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    STRUCT          reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    ASTERISKS       reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    INTERFACE       reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    MAP             reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    CHAN            reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    CHANNEL_OPERATOR reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    NORMAL_ASSIGNMENT reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    $end            reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    RPAREN          reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    LBRACE          reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    RBRACKET        reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    RBRACE          reduce using rule 113 (if_statement -> IF expression block ELSE block .)
    SEMICOLON       reduce using rule 113 (if_statement -> IF expression block ELSE block .)


state 203

    (111) block -> LBRACE expression_list RBRACE .

    ELSE            reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    ARITHMETIC_OPERATOR reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    OR              reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    AND             reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    COMPARISON_OPERATOR reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    INTEGER         reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    FLOAT           reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    STRING_LITERAL  reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    ID              reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    LPAREN          reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    NOT             reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_BOOL       reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_STRING     reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_INT        reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_INT8       reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_INT16      reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_INT32      reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_INT64      reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_UINT       reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_UINT8      reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_UINT16     reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_UINT32     reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_UINT64     reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_UINTPTR    reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_FLOAT32    reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_FLOAT64    reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_COMPLEX64  reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE_COMPLEX128 reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    CONST           reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    TYPE            reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    VAR             reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    FUNC            reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    IMPORT          reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    IF              reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    FOR             reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    RETURN          reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    LBRACKET        reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    STRUCT          reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    ASTERISKS       reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    INTERFACE       reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    MAP             reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    CHAN            reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    CHANNEL_OPERATOR reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    NORMAL_ASSIGNMENT reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    $end            reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    RPAREN          reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    LBRACE          reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    RBRACKET        reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    RBRACE          reduce using rule 111 (block -> LBRACE expression_list RBRACE .)
    SEMICOLON       reduce using rule 111 (block -> LBRACE expression_list RBRACE .)


state 204

    (117) for_clause -> assignment_statement SEMICOLON expression SEMICOLON . expression
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list

    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    assignment_statement           shift and go to state 40
    expression                     shift and go to state 209
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
    expression_list                shift and go to state 74

state 205

    (119) range_clause -> expression_list NORMAL_ASSIGNMENT RANGE expression .
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    LBRACE          reduce using rule 119 (range_clause -> expression_list NORMAL_ASSIGNMENT RANGE expression .)
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression_list                shift and go to state 66
    expression                     shift and go to state 3
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 206

    (120) range_clause -> identifier_list NORMAL_ASSIGNMENT RANGE expression .
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    LBRACE          reduce using rule 120 (range_clause -> identifier_list NORMAL_ASSIGNMENT RANGE expression .)
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    assignment_statement           shift and go to state 40
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49

state 207

    (48) field_decl -> identifier_list type string_lit .

    RBRACE          reduce using rule 48 (field_decl -> identifier_list type string_lit .)


state 208

    (76) map_type -> MAP LBRACKET key_type RBRACKET type .

    ARITHMETIC_OPERATOR reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    OR              reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    AND             reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    COMPARISON_OPERATOR reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    INTEGER         reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    FLOAT           reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    STRING_LITERAL  reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    ID              reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    LPAREN          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    NOT             reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_BOOL       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_STRING     reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_INT        reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_INT8       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_INT16      reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_INT32      reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_INT64      reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINT       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINT8      reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINT16     reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINT32     reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINT64     reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINTPTR    reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_FLOAT32    reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_FLOAT64    reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_COMPLEX64  reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_COMPLEX128 reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    CONST           reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE            reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    VAR             reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    FUNC            reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    IMPORT          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    IF              reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    FOR             reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    RETURN          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    LBRACKET        reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    STRUCT          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    ASTERISKS       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    INTERFACE       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    MAP             reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    CHAN            reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    CHANNEL_OPERATOR reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    NORMAL_ASSIGNMENT reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    $end            reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    RPAREN          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    LBRACE          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    RBRACKET        reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    RBRACE          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    SEMICOLON       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    COMMA           reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)


state 209

    (117) for_clause -> assignment_statement SEMICOLON expression SEMICOLON expression .
    (6) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . INTEGER
    (2) expression -> . FLOAT
    (3) expression -> . STRING_LITERAL
    (4) expression -> . ID
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression ARITHMETIC_OPERATOR expression
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (86) expression -> . declaration
    (110) expression -> . statement
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (84) declaration -> . func_decl
    (85) declaration -> . import_decl
    (106) statement -> . if_statement
    (107) statement -> . for_statement
    (108) statement -> . assignment_statement
    (109) statement -> . return_statement
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (87) const_decl -> . CONST const_spec
    (88) const_decl -> . CONST LPAREN const_spec RPAREN
    (91) type_decl -> . TYPE type_spec
    (92) type_decl -> . TYPE LPAREN type_spec RPAREN
    (97) var_decl -> . VAR var_spec
    (98) var_decl -> . VAR LPAREN var_spec RPAREN
    (102) func_decl -> . FUNC ID signature
    (103) func_decl -> . FUNC ID signature block
    (104) import_decl -> . IMPORT string_lit
    (105) import_decl -> . IMPORT LPAREN string_lit RPAREN
    (112) if_statement -> . IF expression block
    (113) if_statement -> . IF expression block ELSE block
    (114) for_statement -> . FOR expression block
    (115) for_statement -> . FOR for_clause block
    (116) for_statement -> . FOR range_clause block
    (118) assignment_statement -> . expression_list NORMAL_ASSIGNMENT expression_list
    (121) return_statement -> . RETURN expression_list
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    LBRACE          reduce using rule 117 (for_clause -> assignment_statement SEMICOLON expression SEMICOLON expression .)
    ARITHMETIC_OPERATOR shift and go to state 67
    OR              shift and go to state 68
    AND             shift and go to state 69
    COMPARISON_OPERATOR shift and go to state 70
    NORMAL_ASSIGNMENT reduce using rule 7 (expression_list -> expression .)
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5
    STRING_LITERAL  shift and go to state 6
    ID              shift and go to state 7
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9
    TYPE_BOOL       shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_INT        shift and go to state 17
    TYPE_INT8       shift and go to state 18
    TYPE_INT16      shift and go to state 19
    TYPE_INT32      shift and go to state 20
    TYPE_INT64      shift and go to state 21
    TYPE_UINT       shift and go to state 22
    TYPE_UINT8      shift and go to state 23
    TYPE_UINT16     shift and go to state 24
    TYPE_UINT32     shift and go to state 25
    TYPE_UINT64     shift and go to state 26
    TYPE_UINTPTR    shift and go to state 27
    TYPE_FLOAT32    shift and go to state 28
    TYPE_FLOAT64    shift and go to state 29
    TYPE_COMPLEX64  shift and go to state 30
    TYPE_COMPLEX128 shift and go to state 31
    CONST           shift and go to state 50
    TYPE            shift and go to state 51
    VAR             shift and go to state 52
    FUNC            shift and go to state 53
    IMPORT          shift and go to state 54
    IF              shift and go to state 55
    FOR             shift and go to state 56
    RETURN          shift and go to state 57
    LBRACKET        shift and go to state 58
    STRUCT          shift and go to state 59
    ASTERISKS       shift and go to state 60
    INTERFACE       shift and go to state 61
    MAP             shift and go to state 62
    CHAN            shift and go to state 63
    CHANNEL_OPERATOR shift and go to state 64

    assignment_statement           shift and go to state 40
    expression                     shift and go to state 3
    expression_list                shift and go to state 66
    arithmetical_assignment        shift and go to state 10
    unary_assignment               shift and go to state 11
    type                           shift and go to state 12
    declaration                    shift and go to state 13
    statement                      shift and go to state 14
    type_lit                       shift and go to state 32
    const_decl                     shift and go to state 33
    type_decl                      shift and go to state 34
    var_decl                       shift and go to state 35
    func_decl                      shift and go to state 36
    import_decl                    shift and go to state 37
    if_statement                   shift and go to state 38
    for_statement                  shift and go to state 39
    return_statement               shift and go to state 41
    array_type                     shift and go to state 42
    slice_type                     shift and go to state 43
    struct_type                    shift and go to state 44
    pointer_type                   shift and go to state 45
    function_type                  shift and go to state 46
    interface_type                 shift and go to state 47
    map_type                       shift and go to state 48
    channel_type                   shift and go to state 49
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 3 resolved as shift
WARNING: shift/reduce conflict for OR in state 3 resolved as shift
WARNING: shift/reduce conflict for AND in state 3 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 3 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for NOT in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_BOOL in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT8 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT16 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT32 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT64 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT8 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT16 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT32 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT64 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINTPTR in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT32 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT64 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX64 in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX128 in state 3 resolved as shift
WARNING: shift/reduce conflict for CONST in state 3 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 3 resolved as shift
WARNING: shift/reduce conflict for VAR in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 3 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 3 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 3 resolved as shift
WARNING: shift/reduce conflict for ASTERISKS in state 3 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 3 resolved as shift
WARNING: shift/reduce conflict for MAP in state 3 resolved as shift
WARNING: shift/reduce conflict for CHAN in state 3 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OPERATOR in state 3 resolved as shift
WARNING: shift/reduce conflict for NORMAL_ASSIGNMENT in state 66 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 75 resolved as shift
WARNING: shift/reduce conflict for OR in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 75 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 75 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 75 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 75 resolved as shift
WARNING: shift/reduce conflict for NOT in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_BOOL in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_STRING in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT8 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT16 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT32 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT64 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT8 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT16 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT32 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT64 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINTPTR in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT32 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT64 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX64 in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX128 in state 75 resolved as shift
WARNING: shift/reduce conflict for CONST in state 75 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 75 resolved as shift
WARNING: shift/reduce conflict for VAR in state 75 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 75 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for FOR in state 75 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 75 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 75 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 75 resolved as shift
WARNING: shift/reduce conflict for ASTERISKS in state 75 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 75 resolved as shift
WARNING: shift/reduce conflict for MAP in state 75 resolved as shift
WARNING: shift/reduce conflict for CHAN in state 75 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OPERATOR in state 75 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 79 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_BOOL in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_STRING in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT8 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT16 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT32 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT64 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT8 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT16 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT32 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT64 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINTPTR in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT32 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT64 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX64 in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX128 in state 90 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 90 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 90 resolved as shift
WARNING: shift/reduce conflict for ASTERISKS in state 90 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 90 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 90 resolved as shift
WARNING: shift/reduce conflict for MAP in state 90 resolved as shift
WARNING: shift/reduce conflict for CHAN in state 90 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OPERATOR in state 90 resolved as shift
WARNING: shift/reduce conflict for NORMAL_ASSIGNMENT in state 103 resolved as shift
WARNING: shift/reduce conflict for NORMAL_ASSIGNMENT in state 114 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 115 resolved as shift
WARNING: shift/reduce conflict for OR in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 115 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 115 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 115 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 115 resolved as shift
WARNING: shift/reduce conflict for NOT in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_BOOL in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_STRING in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT8 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT16 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT32 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT64 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT8 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT16 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT32 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT64 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINTPTR in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT32 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT64 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX64 in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX128 in state 115 resolved as shift
WARNING: shift/reduce conflict for CONST in state 115 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 115 resolved as shift
WARNING: shift/reduce conflict for VAR in state 115 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 115 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 115 resolved as shift
WARNING: shift/reduce conflict for IF in state 115 resolved as shift
WARNING: shift/reduce conflict for FOR in state 115 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 115 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 115 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 115 resolved as shift
WARNING: shift/reduce conflict for ASTERISKS in state 115 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 115 resolved as shift
WARNING: shift/reduce conflict for MAP in state 115 resolved as shift
WARNING: shift/reduce conflict for CHAN in state 115 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OPERATOR in state 115 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 116 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 116 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 116 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 116 resolved as shift
WARNING: shift/reduce conflict for NOT in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_BOOL in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_STRING in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT8 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT16 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT32 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT64 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT8 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT16 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT32 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT64 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINTPTR in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT32 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT64 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX64 in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX128 in state 116 resolved as shift
WARNING: shift/reduce conflict for CONST in state 116 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 116 resolved as shift
WARNING: shift/reduce conflict for VAR in state 116 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 116 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for FOR in state 116 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 116 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 116 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 116 resolved as shift
WARNING: shift/reduce conflict for ASTERISKS in state 116 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 116 resolved as shift
WARNING: shift/reduce conflict for MAP in state 116 resolved as shift
WARNING: shift/reduce conflict for CHAN in state 116 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OPERATOR in state 116 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 117 resolved as shift
WARNING: shift/reduce conflict for OR in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 117 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 117 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 117 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 117 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 117 resolved as shift
WARNING: shift/reduce conflict for ID in state 117 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 117 resolved as shift
WARNING: shift/reduce conflict for NOT in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_BOOL in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_STRING in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT8 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT16 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT32 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT64 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT8 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT16 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT32 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT64 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINTPTR in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT32 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT64 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX64 in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX128 in state 117 resolved as shift
WARNING: shift/reduce conflict for CONST in state 117 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 117 resolved as shift
WARNING: shift/reduce conflict for VAR in state 117 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 117 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 117 resolved as shift
WARNING: shift/reduce conflict for IF in state 117 resolved as shift
WARNING: shift/reduce conflict for FOR in state 117 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 117 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 117 resolved as shift
WARNING: shift/reduce conflict for ASTERISKS in state 117 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 117 resolved as shift
WARNING: shift/reduce conflict for MAP in state 117 resolved as shift
WARNING: shift/reduce conflict for CHAN in state 117 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OPERATOR in state 117 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 118 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 118 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 118 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 118 resolved as shift
WARNING: shift/reduce conflict for NOT in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_BOOL in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_STRING in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT8 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT16 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT32 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT64 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT8 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT16 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT32 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT64 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINTPTR in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT32 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT64 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX64 in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX128 in state 118 resolved as shift
WARNING: shift/reduce conflict for CONST in state 118 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 118 resolved as shift
WARNING: shift/reduce conflict for VAR in state 118 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 118 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 118 resolved as shift
WARNING: shift/reduce conflict for IF in state 118 resolved as shift
WARNING: shift/reduce conflict for FOR in state 118 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 118 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 118 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 118 resolved as shift
WARNING: shift/reduce conflict for ASTERISKS in state 118 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 118 resolved as shift
WARNING: shift/reduce conflict for MAP in state 118 resolved as shift
WARNING: shift/reduce conflict for CHAN in state 118 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OPERATOR in state 118 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 119 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 119 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 119 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 119 resolved as shift
WARNING: shift/reduce conflict for NOT in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_BOOL in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_STRING in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT8 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT16 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT32 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT64 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT8 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT16 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT32 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT64 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINTPTR in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT32 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT64 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX64 in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX128 in state 119 resolved as shift
WARNING: shift/reduce conflict for CONST in state 119 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 119 resolved as shift
WARNING: shift/reduce conflict for VAR in state 119 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 119 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 119 resolved as shift
WARNING: shift/reduce conflict for IF in state 119 resolved as shift
WARNING: shift/reduce conflict for FOR in state 119 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 119 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 119 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 119 resolved as shift
WARNING: shift/reduce conflict for ASTERISKS in state 119 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 119 resolved as shift
WARNING: shift/reduce conflict for MAP in state 119 resolved as shift
WARNING: shift/reduce conflict for CHAN in state 119 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OPERATOR in state 119 resolved as shift
WARNING: shift/reduce conflict for NORMAL_ASSIGNMENT in state 129 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 131 resolved as shift
WARNING: shift/reduce conflict for NORMAL_ASSIGNMENT in state 167 resolved as shift
WARNING: shift/reduce conflict for NORMAL_ASSIGNMENT in state 174 resolved as shift
WARNING: shift/reduce conflict for NORMAL_ASSIGNMENT in state 197 resolved as shift
WARNING: shift/reduce conflict for NORMAL_ASSIGNMENT in state 198 resolved as shift
WARNING: reduce/reduce conflict in state 75 resolved using rule (expression_list -> expression)
WARNING: rejected rule (expression -> NOT expression) in state 75
WARNING: reduce/reduce conflict in state 99 resolved using rule (expression -> ID)
WARNING: rejected rule (identifier_list -> ID) in state 99
WARNING: reduce/reduce conflict in state 115 resolved using rule (expression -> expression ARITHMETIC_OPERATOR expression)
WARNING: rejected rule (expression_list -> expression) in state 115
WARNING: reduce/reduce conflict in state 116 resolved using rule (expression_list -> expression)
WARNING: rejected rule (expression -> expression OR expression) in state 116
WARNING: reduce/reduce conflict in state 117 resolved using rule (expression_list -> expression)
WARNING: rejected rule (expression -> expression AND expression) in state 117
WARNING: reduce/reduce conflict in state 118 resolved using rule (expression_list -> expression)
WARNING: rejected rule (expression -> expression COMPARISON_OPERATOR expression) in state 118
WARNING: reduce/reduce conflict in state 119 resolved using rule (expression_list -> expression)
WARNING: rejected rule (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression) in state 119
WARNING: reduce/reduce conflict in state 196 resolved using rule (channel_type -> CHAN type)
WARNING: rejected rule (channel_type -> CHANNEL_OPERATOR CHAN type) in state 196
