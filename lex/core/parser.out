Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGNMENT_OPERATOR
    BINARY_ASSIGNMENT
    BITWISE_OPERATOR
    BREAK
    CASE
    COLON
    COMMENT
    CONTINUE
    DEFAULT
    DEFER
    DELIMITER
    ELSE
    FALLTHROUGH
    FOR
    GO
    GOTO
    IF
    IMPORT
    LOGICAL_ASSIGNMENT
    PACKAGE
    RANGE
    RETURN
    SELECT
    SEMICOLON
    SWITCH

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression ARITHMETIC_OPERATOR expression
Rule 2     expression -> INTEGER
Rule 3     expression -> FLOAT
Rule 4     expression -> STRING_LITERAL
Rule 5     expression -> ID
Rule 6     expression -> LPAREN expression RPAREN
Rule 7     expression_list -> expression
Rule 8     expression_list -> expression expression_list
Rule 9     expression -> expression OR expression
Rule 10    expression -> expression AND expression
Rule 11    expression -> NOT expression
Rule 12    expression -> expression COMPARISON_OPERATOR expression
Rule 13    arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression
Rule 14    unary_assignment -> ID UNARY_ASSIGNMENT
Rule 15    expression -> arithmetical_assignment
Rule 16    expression -> unary_assignment
Rule 17    expression -> type
Rule 18    type -> TYPE_BOOL
Rule 19    type -> TYPE_STRING
Rule 20    type -> TYPE_INT
Rule 21    type -> TYPE_INT8
Rule 22    type -> TYPE_INT16
Rule 23    type -> TYPE_INT32
Rule 24    type -> TYPE_INT64
Rule 25    type -> TYPE_UINT
Rule 26    type -> TYPE_UINT8
Rule 27    type -> TYPE_UINT16
Rule 28    type -> TYPE_UINT32
Rule 29    type -> TYPE_UINT64
Rule 30    type -> TYPE_UINTPTR
Rule 31    type -> TYPE_FLOAT32
Rule 32    type -> TYPE_FLOAT64
Rule 33    type -> TYPE_COMPLEX64
Rule 34    type -> TYPE_COMPLEX128
Rule 35    type_lit -> array_type
Rule 36    type_lit -> slice_type
Rule 37    type_lit -> struct_type
Rule 38    type_lit -> pointer_type
Rule 39    type_lit -> function_type
Rule 40    type_lit -> interface_type
Rule 41    type_lit -> map_type
Rule 42    type_lit -> channel_type
Rule 43    type -> type_lit
Rule 44    array_type -> LBRACKET expression RBRACKET type
Rule 45    slice_type -> LBRACKET RBRACKET type
Rule 46    struct_type -> STRUCT LBRACE RBRACE
Rule 47    struct_type -> STRUCT LBRACE field_decl RBRACE
Rule 48    field_decl -> identifier_list type string_lit
Rule 49    field_decl -> identifier_list type
Rule 50    field_decl -> embedded_field string_lit
Rule 51    field_decl -> embedded_field
Rule 52    identifier_list -> ID
Rule 53    identifier_list -> ID COMMA identifier_list
Rule 54    embedded_field -> ASTERISKS ID
Rule 55    string_lit -> STRING_LITERAL
Rule 56    pointer_type -> ASTERISKS type
Rule 57    function_type -> FUNC signature
Rule 58    signature -> parameters
Rule 59    signature -> parameters result
Rule 60    result -> parameters
Rule 61    result -> type
Rule 62    result -> LPAREN type RPAREN
Rule 63    parameters -> LPAREN RPAREN
Rule 64    parameters -> LPAREN parameter_list RPAREN
Rule 65    parameter_list -> parameter_decl
Rule 66    parameter_list -> parameter_decl COMMA parameter_list
Rule 67    parameter_decl -> identifier_list
Rule 68    parameter_decl -> identifier_list type
Rule 69    parameter_decl -> ELLIPSIS type
Rule 70    parameter_decl -> identifier_list ELLIPSIS type
Rule 71    interface_type -> INTERFACE LBRACE method_spec RBRACE
Rule 72    method_spec -> method_name signature
Rule 73    method_spec -> interface_type_name
Rule 74    method_name -> ID
Rule 75    interface_type_name -> ID
Rule 76    map_type -> MAP LBRACKET key_type RBRACKET type
Rule 77    key_type -> type
Rule 78    channel_type -> CHAN type
Rule 79    channel_type -> CHAN CHANNEL_OPERATOR type
Rule 80    channel_type -> CHANNEL_OPERATOR CHAN type
Rule 81    declaration -> const_decl
Rule 82    declaration -> type_decl
Rule 83    declaration -> var_decl
Rule 84    expression -> declaration
Rule 85    const_decl -> CONST const_spec
Rule 86    const_decl -> CONST LPAREN const_spec RPAREN
Rule 87    const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list
Rule 88    const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list
Rule 89    type_decl -> TYPE type_spec
Rule 90    type_decl -> TYPE LPAREN type_spec RPAREN
Rule 91    type_spec -> alias_decl
Rule 92    type_spec -> type_def
Rule 93    alias_decl -> ID NORMAL_ASSIGNMENT type
Rule 94    type_def -> ID type
Rule 95    var_decl -> VAR var_spec
Rule 96    var_decl -> VAR LPAREN var_spec RPAREN
Rule 97    var_spec -> identifier_list type
Rule 98    var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list
Rule 99    var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list

Terminals, with rules where they appear

AND                  : 10
ARITHMETICAL_ASSIGNMENT : 13
ARITHMETIC_OPERATOR  : 1
ASSIGNMENT_OPERATOR  : 
ASTERISKS            : 54 56
BINARY_ASSIGNMENT    : 
BITWISE_OPERATOR     : 
BREAK                : 
CASE                 : 
CHAN                 : 78 79 80
CHANNEL_OPERATOR     : 79 80
COLON                : 
COMMA                : 53 66
COMMENT              : 
COMPARISON_OPERATOR  : 12
CONST                : 85 86
CONTINUE             : 
DEFAULT              : 
DEFER                : 
DELIMITER            : 
ELLIPSIS             : 69 70
ELSE                 : 
FALLTHROUGH          : 
FLOAT                : 3
FOR                  : 
FUNC                 : 57
GO                   : 
GOTO                 : 
ID                   : 5 13 14 52 53 54 74 75 93 94
IF                   : 
IMPORT               : 
INTEGER              : 2
INTERFACE            : 71
LBRACE               : 46 47 71
LBRACKET             : 44 45 76
LOGICAL_ASSIGNMENT   : 
LPAREN               : 6 62 63 64 86 90 96
MAP                  : 76
NORMAL_ASSIGNMENT    : 87 88 93 98 99
NOT                  : 11
OR                   : 9
PACKAGE              : 
RANGE                : 
RBRACE               : 46 47 71
RBRACKET             : 44 45 76
RETURN               : 
RPAREN               : 6 62 63 64 86 90 96
SELECT               : 
SEMICOLON            : 
STRING_LITERAL       : 4 55
STRUCT               : 46 47
SWITCH               : 
TYPE                 : 89 90
TYPE_BOOL            : 18
TYPE_COMPLEX128      : 34
TYPE_COMPLEX64       : 33
TYPE_FLOAT32         : 31
TYPE_FLOAT64         : 32
TYPE_INT             : 20
TYPE_INT16           : 22
TYPE_INT32           : 23
TYPE_INT64           : 24
TYPE_INT8            : 21
TYPE_STRING          : 19
TYPE_UINT            : 25
TYPE_UINT16          : 27
TYPE_UINT32          : 28
TYPE_UINT64          : 29
TYPE_UINT8           : 26
TYPE_UINTPTR         : 30
UNARY_ASSIGNMENT     : 14
VAR                  : 95 96
error                : 

Nonterminals, with rules where they appear

alias_decl           : 91
arithmetical_assignment : 15
array_type           : 35
channel_type         : 42
const_decl           : 81
const_spec           : 85 86
declaration          : 84
embedded_field       : 50 51
expression           : 1 1 6 7 8 9 9 10 10 11 12 12 13 44 0
expression_list      : 8 87 88 98 99
field_decl           : 47
function_type        : 39
identifier_list      : 48 49 53 67 68 70 87 88 97 98 99
interface_type       : 40
interface_type_name  : 73
key_type             : 76
map_type             : 41
method_name          : 72
method_spec          : 71
parameter_decl       : 65 66
parameter_list       : 64 66
parameters           : 58 59 60
pointer_type         : 38
result               : 59
signature            : 57 72
slice_type           : 36
string_lit           : 48 50
struct_type          : 37
type                 : 17 44 45 48 49 56 61 62 68 69 70 76 77 78 79 80 88 93 94 97 98
type_decl            : 82
type_def             : 92
type_lit             : 43
type_spec            : 89 90
unary_assignment     : 16
var_decl             : 83
var_spec             : 95 96

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression                     shift and go to state 1
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 1

    (0) S' -> expression .
    (1) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression

    ARITHMETIC_OPERATOR shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54
    COMPARISON_OPERATOR shift and go to state 55


state 2

    (2) expression -> INTEGER .

    ARITHMETIC_OPERATOR reduce using rule 2 (expression -> INTEGER .)
    OR              reduce using rule 2 (expression -> INTEGER .)
    AND             reduce using rule 2 (expression -> INTEGER .)
    COMPARISON_OPERATOR reduce using rule 2 (expression -> INTEGER .)
    $end            reduce using rule 2 (expression -> INTEGER .)
    RPAREN          reduce using rule 2 (expression -> INTEGER .)
    RBRACKET        reduce using rule 2 (expression -> INTEGER .)
    INTEGER         reduce using rule 2 (expression -> INTEGER .)
    FLOAT           reduce using rule 2 (expression -> INTEGER .)
    STRING_LITERAL  reduce using rule 2 (expression -> INTEGER .)
    ID              reduce using rule 2 (expression -> INTEGER .)
    LPAREN          reduce using rule 2 (expression -> INTEGER .)
    NOT             reduce using rule 2 (expression -> INTEGER .)
    TYPE_BOOL       reduce using rule 2 (expression -> INTEGER .)
    TYPE_STRING     reduce using rule 2 (expression -> INTEGER .)
    TYPE_INT        reduce using rule 2 (expression -> INTEGER .)
    TYPE_INT8       reduce using rule 2 (expression -> INTEGER .)
    TYPE_INT16      reduce using rule 2 (expression -> INTEGER .)
    TYPE_INT32      reduce using rule 2 (expression -> INTEGER .)
    TYPE_INT64      reduce using rule 2 (expression -> INTEGER .)
    TYPE_UINT       reduce using rule 2 (expression -> INTEGER .)
    TYPE_UINT8      reduce using rule 2 (expression -> INTEGER .)
    TYPE_UINT16     reduce using rule 2 (expression -> INTEGER .)
    TYPE_UINT32     reduce using rule 2 (expression -> INTEGER .)
    TYPE_UINT64     reduce using rule 2 (expression -> INTEGER .)
    TYPE_UINTPTR    reduce using rule 2 (expression -> INTEGER .)
    TYPE_FLOAT32    reduce using rule 2 (expression -> INTEGER .)
    TYPE_FLOAT64    reduce using rule 2 (expression -> INTEGER .)
    TYPE_COMPLEX64  reduce using rule 2 (expression -> INTEGER .)
    TYPE_COMPLEX128 reduce using rule 2 (expression -> INTEGER .)
    CONST           reduce using rule 2 (expression -> INTEGER .)
    TYPE            reduce using rule 2 (expression -> INTEGER .)
    VAR             reduce using rule 2 (expression -> INTEGER .)
    LBRACKET        reduce using rule 2 (expression -> INTEGER .)
    STRUCT          reduce using rule 2 (expression -> INTEGER .)
    ASTERISKS       reduce using rule 2 (expression -> INTEGER .)
    FUNC            reduce using rule 2 (expression -> INTEGER .)
    INTERFACE       reduce using rule 2 (expression -> INTEGER .)
    MAP             reduce using rule 2 (expression -> INTEGER .)
    CHAN            reduce using rule 2 (expression -> INTEGER .)
    CHANNEL_OPERATOR reduce using rule 2 (expression -> INTEGER .)


state 3

    (3) expression -> FLOAT .

    ARITHMETIC_OPERATOR reduce using rule 3 (expression -> FLOAT .)
    OR              reduce using rule 3 (expression -> FLOAT .)
    AND             reduce using rule 3 (expression -> FLOAT .)
    COMPARISON_OPERATOR reduce using rule 3 (expression -> FLOAT .)
    $end            reduce using rule 3 (expression -> FLOAT .)
    RPAREN          reduce using rule 3 (expression -> FLOAT .)
    RBRACKET        reduce using rule 3 (expression -> FLOAT .)
    INTEGER         reduce using rule 3 (expression -> FLOAT .)
    FLOAT           reduce using rule 3 (expression -> FLOAT .)
    STRING_LITERAL  reduce using rule 3 (expression -> FLOAT .)
    ID              reduce using rule 3 (expression -> FLOAT .)
    LPAREN          reduce using rule 3 (expression -> FLOAT .)
    NOT             reduce using rule 3 (expression -> FLOAT .)
    TYPE_BOOL       reduce using rule 3 (expression -> FLOAT .)
    TYPE_STRING     reduce using rule 3 (expression -> FLOAT .)
    TYPE_INT        reduce using rule 3 (expression -> FLOAT .)
    TYPE_INT8       reduce using rule 3 (expression -> FLOAT .)
    TYPE_INT16      reduce using rule 3 (expression -> FLOAT .)
    TYPE_INT32      reduce using rule 3 (expression -> FLOAT .)
    TYPE_INT64      reduce using rule 3 (expression -> FLOAT .)
    TYPE_UINT       reduce using rule 3 (expression -> FLOAT .)
    TYPE_UINT8      reduce using rule 3 (expression -> FLOAT .)
    TYPE_UINT16     reduce using rule 3 (expression -> FLOAT .)
    TYPE_UINT32     reduce using rule 3 (expression -> FLOAT .)
    TYPE_UINT64     reduce using rule 3 (expression -> FLOAT .)
    TYPE_UINTPTR    reduce using rule 3 (expression -> FLOAT .)
    TYPE_FLOAT32    reduce using rule 3 (expression -> FLOAT .)
    TYPE_FLOAT64    reduce using rule 3 (expression -> FLOAT .)
    TYPE_COMPLEX64  reduce using rule 3 (expression -> FLOAT .)
    TYPE_COMPLEX128 reduce using rule 3 (expression -> FLOAT .)
    CONST           reduce using rule 3 (expression -> FLOAT .)
    TYPE            reduce using rule 3 (expression -> FLOAT .)
    VAR             reduce using rule 3 (expression -> FLOAT .)
    LBRACKET        reduce using rule 3 (expression -> FLOAT .)
    STRUCT          reduce using rule 3 (expression -> FLOAT .)
    ASTERISKS       reduce using rule 3 (expression -> FLOAT .)
    FUNC            reduce using rule 3 (expression -> FLOAT .)
    INTERFACE       reduce using rule 3 (expression -> FLOAT .)
    MAP             reduce using rule 3 (expression -> FLOAT .)
    CHAN            reduce using rule 3 (expression -> FLOAT .)
    CHANNEL_OPERATOR reduce using rule 3 (expression -> FLOAT .)


state 4

    (4) expression -> STRING_LITERAL .

    ARITHMETIC_OPERATOR reduce using rule 4 (expression -> STRING_LITERAL .)
    OR              reduce using rule 4 (expression -> STRING_LITERAL .)
    AND             reduce using rule 4 (expression -> STRING_LITERAL .)
    COMPARISON_OPERATOR reduce using rule 4 (expression -> STRING_LITERAL .)
    $end            reduce using rule 4 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 4 (expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 4 (expression -> STRING_LITERAL .)
    INTEGER         reduce using rule 4 (expression -> STRING_LITERAL .)
    FLOAT           reduce using rule 4 (expression -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 4 (expression -> STRING_LITERAL .)
    ID              reduce using rule 4 (expression -> STRING_LITERAL .)
    LPAREN          reduce using rule 4 (expression -> STRING_LITERAL .)
    NOT             reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_BOOL       reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_STRING     reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_INT        reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_INT8       reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_INT16      reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_INT32      reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_INT64      reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_UINT       reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_UINT8      reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_UINT16     reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_UINT32     reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_UINT64     reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_UINTPTR    reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_FLOAT32    reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_FLOAT64    reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_COMPLEX64  reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE_COMPLEX128 reduce using rule 4 (expression -> STRING_LITERAL .)
    CONST           reduce using rule 4 (expression -> STRING_LITERAL .)
    TYPE            reduce using rule 4 (expression -> STRING_LITERAL .)
    VAR             reduce using rule 4 (expression -> STRING_LITERAL .)
    LBRACKET        reduce using rule 4 (expression -> STRING_LITERAL .)
    STRUCT          reduce using rule 4 (expression -> STRING_LITERAL .)
    ASTERISKS       reduce using rule 4 (expression -> STRING_LITERAL .)
    FUNC            reduce using rule 4 (expression -> STRING_LITERAL .)
    INTERFACE       reduce using rule 4 (expression -> STRING_LITERAL .)
    MAP             reduce using rule 4 (expression -> STRING_LITERAL .)
    CHAN            reduce using rule 4 (expression -> STRING_LITERAL .)
    CHANNEL_OPERATOR reduce using rule 4 (expression -> STRING_LITERAL .)


state 5

    (5) expression -> ID .
    (13) arithmetical_assignment -> ID . ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> ID . UNARY_ASSIGNMENT

    ARITHMETIC_OPERATOR reduce using rule 5 (expression -> ID .)
    OR              reduce using rule 5 (expression -> ID .)
    AND             reduce using rule 5 (expression -> ID .)
    COMPARISON_OPERATOR reduce using rule 5 (expression -> ID .)
    $end            reduce using rule 5 (expression -> ID .)
    RPAREN          reduce using rule 5 (expression -> ID .)
    RBRACKET        reduce using rule 5 (expression -> ID .)
    INTEGER         reduce using rule 5 (expression -> ID .)
    FLOAT           reduce using rule 5 (expression -> ID .)
    STRING_LITERAL  reduce using rule 5 (expression -> ID .)
    ID              reduce using rule 5 (expression -> ID .)
    LPAREN          reduce using rule 5 (expression -> ID .)
    NOT             reduce using rule 5 (expression -> ID .)
    TYPE_BOOL       reduce using rule 5 (expression -> ID .)
    TYPE_STRING     reduce using rule 5 (expression -> ID .)
    TYPE_INT        reduce using rule 5 (expression -> ID .)
    TYPE_INT8       reduce using rule 5 (expression -> ID .)
    TYPE_INT16      reduce using rule 5 (expression -> ID .)
    TYPE_INT32      reduce using rule 5 (expression -> ID .)
    TYPE_INT64      reduce using rule 5 (expression -> ID .)
    TYPE_UINT       reduce using rule 5 (expression -> ID .)
    TYPE_UINT8      reduce using rule 5 (expression -> ID .)
    TYPE_UINT16     reduce using rule 5 (expression -> ID .)
    TYPE_UINT32     reduce using rule 5 (expression -> ID .)
    TYPE_UINT64     reduce using rule 5 (expression -> ID .)
    TYPE_UINTPTR    reduce using rule 5 (expression -> ID .)
    TYPE_FLOAT32    reduce using rule 5 (expression -> ID .)
    TYPE_FLOAT64    reduce using rule 5 (expression -> ID .)
    TYPE_COMPLEX64  reduce using rule 5 (expression -> ID .)
    TYPE_COMPLEX128 reduce using rule 5 (expression -> ID .)
    CONST           reduce using rule 5 (expression -> ID .)
    TYPE            reduce using rule 5 (expression -> ID .)
    VAR             reduce using rule 5 (expression -> ID .)
    LBRACKET        reduce using rule 5 (expression -> ID .)
    STRUCT          reduce using rule 5 (expression -> ID .)
    ASTERISKS       reduce using rule 5 (expression -> ID .)
    FUNC            reduce using rule 5 (expression -> ID .)
    INTERFACE       reduce using rule 5 (expression -> ID .)
    MAP             reduce using rule 5 (expression -> ID .)
    CHAN            reduce using rule 5 (expression -> ID .)
    CHANNEL_OPERATOR reduce using rule 5 (expression -> ID .)
    ARITHMETICAL_ASSIGNMENT shift and go to state 56
    UNARY_ASSIGNMENT shift and go to state 57


state 6

    (6) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression                     shift and go to state 58
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 7

    (11) expression -> NOT . expression
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression                     shift and go to state 59
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 8

    (15) expression -> arithmetical_assignment .

    ARITHMETIC_OPERATOR reduce using rule 15 (expression -> arithmetical_assignment .)
    OR              reduce using rule 15 (expression -> arithmetical_assignment .)
    AND             reduce using rule 15 (expression -> arithmetical_assignment .)
    COMPARISON_OPERATOR reduce using rule 15 (expression -> arithmetical_assignment .)
    $end            reduce using rule 15 (expression -> arithmetical_assignment .)
    RPAREN          reduce using rule 15 (expression -> arithmetical_assignment .)
    RBRACKET        reduce using rule 15 (expression -> arithmetical_assignment .)
    INTEGER         reduce using rule 15 (expression -> arithmetical_assignment .)
    FLOAT           reduce using rule 15 (expression -> arithmetical_assignment .)
    STRING_LITERAL  reduce using rule 15 (expression -> arithmetical_assignment .)
    ID              reduce using rule 15 (expression -> arithmetical_assignment .)
    LPAREN          reduce using rule 15 (expression -> arithmetical_assignment .)
    NOT             reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_BOOL       reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_STRING     reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_INT        reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_INT8       reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_INT16      reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_INT32      reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_INT64      reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINT       reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINT8      reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINT16     reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINT32     reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINT64     reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_UINTPTR    reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_FLOAT32    reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_FLOAT64    reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_COMPLEX64  reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE_COMPLEX128 reduce using rule 15 (expression -> arithmetical_assignment .)
    CONST           reduce using rule 15 (expression -> arithmetical_assignment .)
    TYPE            reduce using rule 15 (expression -> arithmetical_assignment .)
    VAR             reduce using rule 15 (expression -> arithmetical_assignment .)
    LBRACKET        reduce using rule 15 (expression -> arithmetical_assignment .)
    STRUCT          reduce using rule 15 (expression -> arithmetical_assignment .)
    ASTERISKS       reduce using rule 15 (expression -> arithmetical_assignment .)
    FUNC            reduce using rule 15 (expression -> arithmetical_assignment .)
    INTERFACE       reduce using rule 15 (expression -> arithmetical_assignment .)
    MAP             reduce using rule 15 (expression -> arithmetical_assignment .)
    CHAN            reduce using rule 15 (expression -> arithmetical_assignment .)
    CHANNEL_OPERATOR reduce using rule 15 (expression -> arithmetical_assignment .)


state 9

    (16) expression -> unary_assignment .

    ARITHMETIC_OPERATOR reduce using rule 16 (expression -> unary_assignment .)
    OR              reduce using rule 16 (expression -> unary_assignment .)
    AND             reduce using rule 16 (expression -> unary_assignment .)
    COMPARISON_OPERATOR reduce using rule 16 (expression -> unary_assignment .)
    $end            reduce using rule 16 (expression -> unary_assignment .)
    RPAREN          reduce using rule 16 (expression -> unary_assignment .)
    RBRACKET        reduce using rule 16 (expression -> unary_assignment .)
    INTEGER         reduce using rule 16 (expression -> unary_assignment .)
    FLOAT           reduce using rule 16 (expression -> unary_assignment .)
    STRING_LITERAL  reduce using rule 16 (expression -> unary_assignment .)
    ID              reduce using rule 16 (expression -> unary_assignment .)
    LPAREN          reduce using rule 16 (expression -> unary_assignment .)
    NOT             reduce using rule 16 (expression -> unary_assignment .)
    TYPE_BOOL       reduce using rule 16 (expression -> unary_assignment .)
    TYPE_STRING     reduce using rule 16 (expression -> unary_assignment .)
    TYPE_INT        reduce using rule 16 (expression -> unary_assignment .)
    TYPE_INT8       reduce using rule 16 (expression -> unary_assignment .)
    TYPE_INT16      reduce using rule 16 (expression -> unary_assignment .)
    TYPE_INT32      reduce using rule 16 (expression -> unary_assignment .)
    TYPE_INT64      reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINT       reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINT8      reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINT16     reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINT32     reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINT64     reduce using rule 16 (expression -> unary_assignment .)
    TYPE_UINTPTR    reduce using rule 16 (expression -> unary_assignment .)
    TYPE_FLOAT32    reduce using rule 16 (expression -> unary_assignment .)
    TYPE_FLOAT64    reduce using rule 16 (expression -> unary_assignment .)
    TYPE_COMPLEX64  reduce using rule 16 (expression -> unary_assignment .)
    TYPE_COMPLEX128 reduce using rule 16 (expression -> unary_assignment .)
    CONST           reduce using rule 16 (expression -> unary_assignment .)
    TYPE            reduce using rule 16 (expression -> unary_assignment .)
    VAR             reduce using rule 16 (expression -> unary_assignment .)
    LBRACKET        reduce using rule 16 (expression -> unary_assignment .)
    STRUCT          reduce using rule 16 (expression -> unary_assignment .)
    ASTERISKS       reduce using rule 16 (expression -> unary_assignment .)
    FUNC            reduce using rule 16 (expression -> unary_assignment .)
    INTERFACE       reduce using rule 16 (expression -> unary_assignment .)
    MAP             reduce using rule 16 (expression -> unary_assignment .)
    CHAN            reduce using rule 16 (expression -> unary_assignment .)
    CHANNEL_OPERATOR reduce using rule 16 (expression -> unary_assignment .)


state 10

    (17) expression -> type .

    ARITHMETIC_OPERATOR reduce using rule 17 (expression -> type .)
    OR              reduce using rule 17 (expression -> type .)
    AND             reduce using rule 17 (expression -> type .)
    COMPARISON_OPERATOR reduce using rule 17 (expression -> type .)
    $end            reduce using rule 17 (expression -> type .)
    RPAREN          reduce using rule 17 (expression -> type .)
    RBRACKET        reduce using rule 17 (expression -> type .)
    INTEGER         reduce using rule 17 (expression -> type .)
    FLOAT           reduce using rule 17 (expression -> type .)
    STRING_LITERAL  reduce using rule 17 (expression -> type .)
    ID              reduce using rule 17 (expression -> type .)
    LPAREN          reduce using rule 17 (expression -> type .)
    NOT             reduce using rule 17 (expression -> type .)
    TYPE_BOOL       reduce using rule 17 (expression -> type .)
    TYPE_STRING     reduce using rule 17 (expression -> type .)
    TYPE_INT        reduce using rule 17 (expression -> type .)
    TYPE_INT8       reduce using rule 17 (expression -> type .)
    TYPE_INT16      reduce using rule 17 (expression -> type .)
    TYPE_INT32      reduce using rule 17 (expression -> type .)
    TYPE_INT64      reduce using rule 17 (expression -> type .)
    TYPE_UINT       reduce using rule 17 (expression -> type .)
    TYPE_UINT8      reduce using rule 17 (expression -> type .)
    TYPE_UINT16     reduce using rule 17 (expression -> type .)
    TYPE_UINT32     reduce using rule 17 (expression -> type .)
    TYPE_UINT64     reduce using rule 17 (expression -> type .)
    TYPE_UINTPTR    reduce using rule 17 (expression -> type .)
    TYPE_FLOAT32    reduce using rule 17 (expression -> type .)
    TYPE_FLOAT64    reduce using rule 17 (expression -> type .)
    TYPE_COMPLEX64  reduce using rule 17 (expression -> type .)
    TYPE_COMPLEX128 reduce using rule 17 (expression -> type .)
    CONST           reduce using rule 17 (expression -> type .)
    TYPE            reduce using rule 17 (expression -> type .)
    VAR             reduce using rule 17 (expression -> type .)
    LBRACKET        reduce using rule 17 (expression -> type .)
    STRUCT          reduce using rule 17 (expression -> type .)
    ASTERISKS       reduce using rule 17 (expression -> type .)
    FUNC            reduce using rule 17 (expression -> type .)
    INTERFACE       reduce using rule 17 (expression -> type .)
    MAP             reduce using rule 17 (expression -> type .)
    CHAN            reduce using rule 17 (expression -> type .)
    CHANNEL_OPERATOR reduce using rule 17 (expression -> type .)


state 11

    (84) expression -> declaration .

    ARITHMETIC_OPERATOR reduce using rule 84 (expression -> declaration .)
    OR              reduce using rule 84 (expression -> declaration .)
    AND             reduce using rule 84 (expression -> declaration .)
    COMPARISON_OPERATOR reduce using rule 84 (expression -> declaration .)
    $end            reduce using rule 84 (expression -> declaration .)
    RPAREN          reduce using rule 84 (expression -> declaration .)
    RBRACKET        reduce using rule 84 (expression -> declaration .)
    INTEGER         reduce using rule 84 (expression -> declaration .)
    FLOAT           reduce using rule 84 (expression -> declaration .)
    STRING_LITERAL  reduce using rule 84 (expression -> declaration .)
    ID              reduce using rule 84 (expression -> declaration .)
    LPAREN          reduce using rule 84 (expression -> declaration .)
    NOT             reduce using rule 84 (expression -> declaration .)
    TYPE_BOOL       reduce using rule 84 (expression -> declaration .)
    TYPE_STRING     reduce using rule 84 (expression -> declaration .)
    TYPE_INT        reduce using rule 84 (expression -> declaration .)
    TYPE_INT8       reduce using rule 84 (expression -> declaration .)
    TYPE_INT16      reduce using rule 84 (expression -> declaration .)
    TYPE_INT32      reduce using rule 84 (expression -> declaration .)
    TYPE_INT64      reduce using rule 84 (expression -> declaration .)
    TYPE_UINT       reduce using rule 84 (expression -> declaration .)
    TYPE_UINT8      reduce using rule 84 (expression -> declaration .)
    TYPE_UINT16     reduce using rule 84 (expression -> declaration .)
    TYPE_UINT32     reduce using rule 84 (expression -> declaration .)
    TYPE_UINT64     reduce using rule 84 (expression -> declaration .)
    TYPE_UINTPTR    reduce using rule 84 (expression -> declaration .)
    TYPE_FLOAT32    reduce using rule 84 (expression -> declaration .)
    TYPE_FLOAT64    reduce using rule 84 (expression -> declaration .)
    TYPE_COMPLEX64  reduce using rule 84 (expression -> declaration .)
    TYPE_COMPLEX128 reduce using rule 84 (expression -> declaration .)
    CONST           reduce using rule 84 (expression -> declaration .)
    TYPE            reduce using rule 84 (expression -> declaration .)
    VAR             reduce using rule 84 (expression -> declaration .)
    LBRACKET        reduce using rule 84 (expression -> declaration .)
    STRUCT          reduce using rule 84 (expression -> declaration .)
    ASTERISKS       reduce using rule 84 (expression -> declaration .)
    FUNC            reduce using rule 84 (expression -> declaration .)
    INTERFACE       reduce using rule 84 (expression -> declaration .)
    MAP             reduce using rule 84 (expression -> declaration .)
    CHAN            reduce using rule 84 (expression -> declaration .)
    CHANNEL_OPERATOR reduce using rule 84 (expression -> declaration .)


state 12

    (18) type -> TYPE_BOOL .

    ARITHMETIC_OPERATOR reduce using rule 18 (type -> TYPE_BOOL .)
    OR              reduce using rule 18 (type -> TYPE_BOOL .)
    AND             reduce using rule 18 (type -> TYPE_BOOL .)
    COMPARISON_OPERATOR reduce using rule 18 (type -> TYPE_BOOL .)
    $end            reduce using rule 18 (type -> TYPE_BOOL .)
    RPAREN          reduce using rule 18 (type -> TYPE_BOOL .)
    RBRACKET        reduce using rule 18 (type -> TYPE_BOOL .)
    INTEGER         reduce using rule 18 (type -> TYPE_BOOL .)
    FLOAT           reduce using rule 18 (type -> TYPE_BOOL .)
    STRING_LITERAL  reduce using rule 18 (type -> TYPE_BOOL .)
    ID              reduce using rule 18 (type -> TYPE_BOOL .)
    LPAREN          reduce using rule 18 (type -> TYPE_BOOL .)
    NOT             reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_BOOL       reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_STRING     reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_INT        reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_INT8       reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_INT16      reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_INT32      reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_INT64      reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINT       reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINT8      reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINT16     reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINT32     reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINT64     reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_UINTPTR    reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_FLOAT32    reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_FLOAT64    reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_COMPLEX64  reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE_COMPLEX128 reduce using rule 18 (type -> TYPE_BOOL .)
    CONST           reduce using rule 18 (type -> TYPE_BOOL .)
    TYPE            reduce using rule 18 (type -> TYPE_BOOL .)
    VAR             reduce using rule 18 (type -> TYPE_BOOL .)
    LBRACKET        reduce using rule 18 (type -> TYPE_BOOL .)
    STRUCT          reduce using rule 18 (type -> TYPE_BOOL .)
    ASTERISKS       reduce using rule 18 (type -> TYPE_BOOL .)
    FUNC            reduce using rule 18 (type -> TYPE_BOOL .)
    INTERFACE       reduce using rule 18 (type -> TYPE_BOOL .)
    MAP             reduce using rule 18 (type -> TYPE_BOOL .)
    CHAN            reduce using rule 18 (type -> TYPE_BOOL .)
    CHANNEL_OPERATOR reduce using rule 18 (type -> TYPE_BOOL .)
    NORMAL_ASSIGNMENT reduce using rule 18 (type -> TYPE_BOOL .)
    RBRACE          reduce using rule 18 (type -> TYPE_BOOL .)
    COMMA           reduce using rule 18 (type -> TYPE_BOOL .)


state 13

    (19) type -> TYPE_STRING .

    ARITHMETIC_OPERATOR reduce using rule 19 (type -> TYPE_STRING .)
    OR              reduce using rule 19 (type -> TYPE_STRING .)
    AND             reduce using rule 19 (type -> TYPE_STRING .)
    COMPARISON_OPERATOR reduce using rule 19 (type -> TYPE_STRING .)
    $end            reduce using rule 19 (type -> TYPE_STRING .)
    RPAREN          reduce using rule 19 (type -> TYPE_STRING .)
    RBRACKET        reduce using rule 19 (type -> TYPE_STRING .)
    INTEGER         reduce using rule 19 (type -> TYPE_STRING .)
    FLOAT           reduce using rule 19 (type -> TYPE_STRING .)
    STRING_LITERAL  reduce using rule 19 (type -> TYPE_STRING .)
    ID              reduce using rule 19 (type -> TYPE_STRING .)
    LPAREN          reduce using rule 19 (type -> TYPE_STRING .)
    NOT             reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_BOOL       reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_STRING     reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_INT        reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_INT8       reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_INT16      reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_INT32      reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_INT64      reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINT       reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINT8      reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINT16     reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINT32     reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINT64     reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_UINTPTR    reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_FLOAT32    reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_FLOAT64    reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_COMPLEX64  reduce using rule 19 (type -> TYPE_STRING .)
    TYPE_COMPLEX128 reduce using rule 19 (type -> TYPE_STRING .)
    CONST           reduce using rule 19 (type -> TYPE_STRING .)
    TYPE            reduce using rule 19 (type -> TYPE_STRING .)
    VAR             reduce using rule 19 (type -> TYPE_STRING .)
    LBRACKET        reduce using rule 19 (type -> TYPE_STRING .)
    STRUCT          reduce using rule 19 (type -> TYPE_STRING .)
    ASTERISKS       reduce using rule 19 (type -> TYPE_STRING .)
    FUNC            reduce using rule 19 (type -> TYPE_STRING .)
    INTERFACE       reduce using rule 19 (type -> TYPE_STRING .)
    MAP             reduce using rule 19 (type -> TYPE_STRING .)
    CHAN            reduce using rule 19 (type -> TYPE_STRING .)
    CHANNEL_OPERATOR reduce using rule 19 (type -> TYPE_STRING .)
    NORMAL_ASSIGNMENT reduce using rule 19 (type -> TYPE_STRING .)
    RBRACE          reduce using rule 19 (type -> TYPE_STRING .)
    COMMA           reduce using rule 19 (type -> TYPE_STRING .)


state 14

    (20) type -> TYPE_INT .

    ARITHMETIC_OPERATOR reduce using rule 20 (type -> TYPE_INT .)
    OR              reduce using rule 20 (type -> TYPE_INT .)
    AND             reduce using rule 20 (type -> TYPE_INT .)
    COMPARISON_OPERATOR reduce using rule 20 (type -> TYPE_INT .)
    $end            reduce using rule 20 (type -> TYPE_INT .)
    RPAREN          reduce using rule 20 (type -> TYPE_INT .)
    RBRACKET        reduce using rule 20 (type -> TYPE_INT .)
    INTEGER         reduce using rule 20 (type -> TYPE_INT .)
    FLOAT           reduce using rule 20 (type -> TYPE_INT .)
    STRING_LITERAL  reduce using rule 20 (type -> TYPE_INT .)
    ID              reduce using rule 20 (type -> TYPE_INT .)
    LPAREN          reduce using rule 20 (type -> TYPE_INT .)
    NOT             reduce using rule 20 (type -> TYPE_INT .)
    TYPE_BOOL       reduce using rule 20 (type -> TYPE_INT .)
    TYPE_STRING     reduce using rule 20 (type -> TYPE_INT .)
    TYPE_INT        reduce using rule 20 (type -> TYPE_INT .)
    TYPE_INT8       reduce using rule 20 (type -> TYPE_INT .)
    TYPE_INT16      reduce using rule 20 (type -> TYPE_INT .)
    TYPE_INT32      reduce using rule 20 (type -> TYPE_INT .)
    TYPE_INT64      reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINT       reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINT8      reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINT16     reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINT32     reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINT64     reduce using rule 20 (type -> TYPE_INT .)
    TYPE_UINTPTR    reduce using rule 20 (type -> TYPE_INT .)
    TYPE_FLOAT32    reduce using rule 20 (type -> TYPE_INT .)
    TYPE_FLOAT64    reduce using rule 20 (type -> TYPE_INT .)
    TYPE_COMPLEX64  reduce using rule 20 (type -> TYPE_INT .)
    TYPE_COMPLEX128 reduce using rule 20 (type -> TYPE_INT .)
    CONST           reduce using rule 20 (type -> TYPE_INT .)
    TYPE            reduce using rule 20 (type -> TYPE_INT .)
    VAR             reduce using rule 20 (type -> TYPE_INT .)
    LBRACKET        reduce using rule 20 (type -> TYPE_INT .)
    STRUCT          reduce using rule 20 (type -> TYPE_INT .)
    ASTERISKS       reduce using rule 20 (type -> TYPE_INT .)
    FUNC            reduce using rule 20 (type -> TYPE_INT .)
    INTERFACE       reduce using rule 20 (type -> TYPE_INT .)
    MAP             reduce using rule 20 (type -> TYPE_INT .)
    CHAN            reduce using rule 20 (type -> TYPE_INT .)
    CHANNEL_OPERATOR reduce using rule 20 (type -> TYPE_INT .)
    NORMAL_ASSIGNMENT reduce using rule 20 (type -> TYPE_INT .)
    RBRACE          reduce using rule 20 (type -> TYPE_INT .)
    COMMA           reduce using rule 20 (type -> TYPE_INT .)


state 15

    (21) type -> TYPE_INT8 .

    ARITHMETIC_OPERATOR reduce using rule 21 (type -> TYPE_INT8 .)
    OR              reduce using rule 21 (type -> TYPE_INT8 .)
    AND             reduce using rule 21 (type -> TYPE_INT8 .)
    COMPARISON_OPERATOR reduce using rule 21 (type -> TYPE_INT8 .)
    $end            reduce using rule 21 (type -> TYPE_INT8 .)
    RPAREN          reduce using rule 21 (type -> TYPE_INT8 .)
    RBRACKET        reduce using rule 21 (type -> TYPE_INT8 .)
    INTEGER         reduce using rule 21 (type -> TYPE_INT8 .)
    FLOAT           reduce using rule 21 (type -> TYPE_INT8 .)
    STRING_LITERAL  reduce using rule 21 (type -> TYPE_INT8 .)
    ID              reduce using rule 21 (type -> TYPE_INT8 .)
    LPAREN          reduce using rule 21 (type -> TYPE_INT8 .)
    NOT             reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_BOOL       reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_STRING     reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_INT        reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_INT8       reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_INT16      reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_INT32      reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_INT64      reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINT       reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINT8      reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINT16     reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINT32     reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINT64     reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_UINTPTR    reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_FLOAT32    reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_FLOAT64    reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_COMPLEX64  reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE_COMPLEX128 reduce using rule 21 (type -> TYPE_INT8 .)
    CONST           reduce using rule 21 (type -> TYPE_INT8 .)
    TYPE            reduce using rule 21 (type -> TYPE_INT8 .)
    VAR             reduce using rule 21 (type -> TYPE_INT8 .)
    LBRACKET        reduce using rule 21 (type -> TYPE_INT8 .)
    STRUCT          reduce using rule 21 (type -> TYPE_INT8 .)
    ASTERISKS       reduce using rule 21 (type -> TYPE_INT8 .)
    FUNC            reduce using rule 21 (type -> TYPE_INT8 .)
    INTERFACE       reduce using rule 21 (type -> TYPE_INT8 .)
    MAP             reduce using rule 21 (type -> TYPE_INT8 .)
    CHAN            reduce using rule 21 (type -> TYPE_INT8 .)
    CHANNEL_OPERATOR reduce using rule 21 (type -> TYPE_INT8 .)
    NORMAL_ASSIGNMENT reduce using rule 21 (type -> TYPE_INT8 .)
    RBRACE          reduce using rule 21 (type -> TYPE_INT8 .)
    COMMA           reduce using rule 21 (type -> TYPE_INT8 .)


state 16

    (22) type -> TYPE_INT16 .

    ARITHMETIC_OPERATOR reduce using rule 22 (type -> TYPE_INT16 .)
    OR              reduce using rule 22 (type -> TYPE_INT16 .)
    AND             reduce using rule 22 (type -> TYPE_INT16 .)
    COMPARISON_OPERATOR reduce using rule 22 (type -> TYPE_INT16 .)
    $end            reduce using rule 22 (type -> TYPE_INT16 .)
    RPAREN          reduce using rule 22 (type -> TYPE_INT16 .)
    RBRACKET        reduce using rule 22 (type -> TYPE_INT16 .)
    INTEGER         reduce using rule 22 (type -> TYPE_INT16 .)
    FLOAT           reduce using rule 22 (type -> TYPE_INT16 .)
    STRING_LITERAL  reduce using rule 22 (type -> TYPE_INT16 .)
    ID              reduce using rule 22 (type -> TYPE_INT16 .)
    LPAREN          reduce using rule 22 (type -> TYPE_INT16 .)
    NOT             reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_BOOL       reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_STRING     reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_INT        reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_INT8       reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_INT16      reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_INT32      reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_INT64      reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINT       reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINT8      reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINT16     reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINT32     reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINT64     reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_UINTPTR    reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_FLOAT32    reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_FLOAT64    reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_COMPLEX64  reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE_COMPLEX128 reduce using rule 22 (type -> TYPE_INT16 .)
    CONST           reduce using rule 22 (type -> TYPE_INT16 .)
    TYPE            reduce using rule 22 (type -> TYPE_INT16 .)
    VAR             reduce using rule 22 (type -> TYPE_INT16 .)
    LBRACKET        reduce using rule 22 (type -> TYPE_INT16 .)
    STRUCT          reduce using rule 22 (type -> TYPE_INT16 .)
    ASTERISKS       reduce using rule 22 (type -> TYPE_INT16 .)
    FUNC            reduce using rule 22 (type -> TYPE_INT16 .)
    INTERFACE       reduce using rule 22 (type -> TYPE_INT16 .)
    MAP             reduce using rule 22 (type -> TYPE_INT16 .)
    CHAN            reduce using rule 22 (type -> TYPE_INT16 .)
    CHANNEL_OPERATOR reduce using rule 22 (type -> TYPE_INT16 .)
    NORMAL_ASSIGNMENT reduce using rule 22 (type -> TYPE_INT16 .)
    RBRACE          reduce using rule 22 (type -> TYPE_INT16 .)
    COMMA           reduce using rule 22 (type -> TYPE_INT16 .)


state 17

    (23) type -> TYPE_INT32 .

    ARITHMETIC_OPERATOR reduce using rule 23 (type -> TYPE_INT32 .)
    OR              reduce using rule 23 (type -> TYPE_INT32 .)
    AND             reduce using rule 23 (type -> TYPE_INT32 .)
    COMPARISON_OPERATOR reduce using rule 23 (type -> TYPE_INT32 .)
    $end            reduce using rule 23 (type -> TYPE_INT32 .)
    RPAREN          reduce using rule 23 (type -> TYPE_INT32 .)
    RBRACKET        reduce using rule 23 (type -> TYPE_INT32 .)
    INTEGER         reduce using rule 23 (type -> TYPE_INT32 .)
    FLOAT           reduce using rule 23 (type -> TYPE_INT32 .)
    STRING_LITERAL  reduce using rule 23 (type -> TYPE_INT32 .)
    ID              reduce using rule 23 (type -> TYPE_INT32 .)
    LPAREN          reduce using rule 23 (type -> TYPE_INT32 .)
    NOT             reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_BOOL       reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_STRING     reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_INT        reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_INT8       reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_INT16      reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_INT32      reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_INT64      reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINT       reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINT8      reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINT16     reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINT32     reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINT64     reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_UINTPTR    reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_FLOAT32    reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_FLOAT64    reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_COMPLEX64  reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE_COMPLEX128 reduce using rule 23 (type -> TYPE_INT32 .)
    CONST           reduce using rule 23 (type -> TYPE_INT32 .)
    TYPE            reduce using rule 23 (type -> TYPE_INT32 .)
    VAR             reduce using rule 23 (type -> TYPE_INT32 .)
    LBRACKET        reduce using rule 23 (type -> TYPE_INT32 .)
    STRUCT          reduce using rule 23 (type -> TYPE_INT32 .)
    ASTERISKS       reduce using rule 23 (type -> TYPE_INT32 .)
    FUNC            reduce using rule 23 (type -> TYPE_INT32 .)
    INTERFACE       reduce using rule 23 (type -> TYPE_INT32 .)
    MAP             reduce using rule 23 (type -> TYPE_INT32 .)
    CHAN            reduce using rule 23 (type -> TYPE_INT32 .)
    CHANNEL_OPERATOR reduce using rule 23 (type -> TYPE_INT32 .)
    NORMAL_ASSIGNMENT reduce using rule 23 (type -> TYPE_INT32 .)
    RBRACE          reduce using rule 23 (type -> TYPE_INT32 .)
    COMMA           reduce using rule 23 (type -> TYPE_INT32 .)


state 18

    (24) type -> TYPE_INT64 .

    ARITHMETIC_OPERATOR reduce using rule 24 (type -> TYPE_INT64 .)
    OR              reduce using rule 24 (type -> TYPE_INT64 .)
    AND             reduce using rule 24 (type -> TYPE_INT64 .)
    COMPARISON_OPERATOR reduce using rule 24 (type -> TYPE_INT64 .)
    $end            reduce using rule 24 (type -> TYPE_INT64 .)
    RPAREN          reduce using rule 24 (type -> TYPE_INT64 .)
    RBRACKET        reduce using rule 24 (type -> TYPE_INT64 .)
    INTEGER         reduce using rule 24 (type -> TYPE_INT64 .)
    FLOAT           reduce using rule 24 (type -> TYPE_INT64 .)
    STRING_LITERAL  reduce using rule 24 (type -> TYPE_INT64 .)
    ID              reduce using rule 24 (type -> TYPE_INT64 .)
    LPAREN          reduce using rule 24 (type -> TYPE_INT64 .)
    NOT             reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_BOOL       reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_STRING     reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_INT        reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_INT8       reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_INT16      reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_INT32      reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_INT64      reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINT       reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINT8      reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINT16     reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINT32     reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINT64     reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_UINTPTR    reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_FLOAT32    reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_FLOAT64    reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_COMPLEX64  reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE_COMPLEX128 reduce using rule 24 (type -> TYPE_INT64 .)
    CONST           reduce using rule 24 (type -> TYPE_INT64 .)
    TYPE            reduce using rule 24 (type -> TYPE_INT64 .)
    VAR             reduce using rule 24 (type -> TYPE_INT64 .)
    LBRACKET        reduce using rule 24 (type -> TYPE_INT64 .)
    STRUCT          reduce using rule 24 (type -> TYPE_INT64 .)
    ASTERISKS       reduce using rule 24 (type -> TYPE_INT64 .)
    FUNC            reduce using rule 24 (type -> TYPE_INT64 .)
    INTERFACE       reduce using rule 24 (type -> TYPE_INT64 .)
    MAP             reduce using rule 24 (type -> TYPE_INT64 .)
    CHAN            reduce using rule 24 (type -> TYPE_INT64 .)
    CHANNEL_OPERATOR reduce using rule 24 (type -> TYPE_INT64 .)
    NORMAL_ASSIGNMENT reduce using rule 24 (type -> TYPE_INT64 .)
    RBRACE          reduce using rule 24 (type -> TYPE_INT64 .)
    COMMA           reduce using rule 24 (type -> TYPE_INT64 .)


state 19

    (25) type -> TYPE_UINT .

    ARITHMETIC_OPERATOR reduce using rule 25 (type -> TYPE_UINT .)
    OR              reduce using rule 25 (type -> TYPE_UINT .)
    AND             reduce using rule 25 (type -> TYPE_UINT .)
    COMPARISON_OPERATOR reduce using rule 25 (type -> TYPE_UINT .)
    $end            reduce using rule 25 (type -> TYPE_UINT .)
    RPAREN          reduce using rule 25 (type -> TYPE_UINT .)
    RBRACKET        reduce using rule 25 (type -> TYPE_UINT .)
    INTEGER         reduce using rule 25 (type -> TYPE_UINT .)
    FLOAT           reduce using rule 25 (type -> TYPE_UINT .)
    STRING_LITERAL  reduce using rule 25 (type -> TYPE_UINT .)
    ID              reduce using rule 25 (type -> TYPE_UINT .)
    LPAREN          reduce using rule 25 (type -> TYPE_UINT .)
    NOT             reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_BOOL       reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_STRING     reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_INT        reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_INT8       reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_INT16      reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_INT32      reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_INT64      reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINT       reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINT8      reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINT16     reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINT32     reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINT64     reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_UINTPTR    reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_FLOAT32    reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_FLOAT64    reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_COMPLEX64  reduce using rule 25 (type -> TYPE_UINT .)
    TYPE_COMPLEX128 reduce using rule 25 (type -> TYPE_UINT .)
    CONST           reduce using rule 25 (type -> TYPE_UINT .)
    TYPE            reduce using rule 25 (type -> TYPE_UINT .)
    VAR             reduce using rule 25 (type -> TYPE_UINT .)
    LBRACKET        reduce using rule 25 (type -> TYPE_UINT .)
    STRUCT          reduce using rule 25 (type -> TYPE_UINT .)
    ASTERISKS       reduce using rule 25 (type -> TYPE_UINT .)
    FUNC            reduce using rule 25 (type -> TYPE_UINT .)
    INTERFACE       reduce using rule 25 (type -> TYPE_UINT .)
    MAP             reduce using rule 25 (type -> TYPE_UINT .)
    CHAN            reduce using rule 25 (type -> TYPE_UINT .)
    CHANNEL_OPERATOR reduce using rule 25 (type -> TYPE_UINT .)
    NORMAL_ASSIGNMENT reduce using rule 25 (type -> TYPE_UINT .)
    RBRACE          reduce using rule 25 (type -> TYPE_UINT .)
    COMMA           reduce using rule 25 (type -> TYPE_UINT .)


state 20

    (26) type -> TYPE_UINT8 .

    ARITHMETIC_OPERATOR reduce using rule 26 (type -> TYPE_UINT8 .)
    OR              reduce using rule 26 (type -> TYPE_UINT8 .)
    AND             reduce using rule 26 (type -> TYPE_UINT8 .)
    COMPARISON_OPERATOR reduce using rule 26 (type -> TYPE_UINT8 .)
    $end            reduce using rule 26 (type -> TYPE_UINT8 .)
    RPAREN          reduce using rule 26 (type -> TYPE_UINT8 .)
    RBRACKET        reduce using rule 26 (type -> TYPE_UINT8 .)
    INTEGER         reduce using rule 26 (type -> TYPE_UINT8 .)
    FLOAT           reduce using rule 26 (type -> TYPE_UINT8 .)
    STRING_LITERAL  reduce using rule 26 (type -> TYPE_UINT8 .)
    ID              reduce using rule 26 (type -> TYPE_UINT8 .)
    LPAREN          reduce using rule 26 (type -> TYPE_UINT8 .)
    NOT             reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_BOOL       reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_STRING     reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_INT        reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_INT8       reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_INT16      reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_INT32      reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_INT64      reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINT       reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINT8      reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINT16     reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINT32     reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINT64     reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_UINTPTR    reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_FLOAT32    reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_FLOAT64    reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_COMPLEX64  reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE_COMPLEX128 reduce using rule 26 (type -> TYPE_UINT8 .)
    CONST           reduce using rule 26 (type -> TYPE_UINT8 .)
    TYPE            reduce using rule 26 (type -> TYPE_UINT8 .)
    VAR             reduce using rule 26 (type -> TYPE_UINT8 .)
    LBRACKET        reduce using rule 26 (type -> TYPE_UINT8 .)
    STRUCT          reduce using rule 26 (type -> TYPE_UINT8 .)
    ASTERISKS       reduce using rule 26 (type -> TYPE_UINT8 .)
    FUNC            reduce using rule 26 (type -> TYPE_UINT8 .)
    INTERFACE       reduce using rule 26 (type -> TYPE_UINT8 .)
    MAP             reduce using rule 26 (type -> TYPE_UINT8 .)
    CHAN            reduce using rule 26 (type -> TYPE_UINT8 .)
    CHANNEL_OPERATOR reduce using rule 26 (type -> TYPE_UINT8 .)
    NORMAL_ASSIGNMENT reduce using rule 26 (type -> TYPE_UINT8 .)
    RBRACE          reduce using rule 26 (type -> TYPE_UINT8 .)
    COMMA           reduce using rule 26 (type -> TYPE_UINT8 .)


state 21

    (27) type -> TYPE_UINT16 .

    ARITHMETIC_OPERATOR reduce using rule 27 (type -> TYPE_UINT16 .)
    OR              reduce using rule 27 (type -> TYPE_UINT16 .)
    AND             reduce using rule 27 (type -> TYPE_UINT16 .)
    COMPARISON_OPERATOR reduce using rule 27 (type -> TYPE_UINT16 .)
    $end            reduce using rule 27 (type -> TYPE_UINT16 .)
    RPAREN          reduce using rule 27 (type -> TYPE_UINT16 .)
    RBRACKET        reduce using rule 27 (type -> TYPE_UINT16 .)
    INTEGER         reduce using rule 27 (type -> TYPE_UINT16 .)
    FLOAT           reduce using rule 27 (type -> TYPE_UINT16 .)
    STRING_LITERAL  reduce using rule 27 (type -> TYPE_UINT16 .)
    ID              reduce using rule 27 (type -> TYPE_UINT16 .)
    LPAREN          reduce using rule 27 (type -> TYPE_UINT16 .)
    NOT             reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_BOOL       reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_STRING     reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_INT        reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_INT8       reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_INT16      reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_INT32      reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_INT64      reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINT       reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINT8      reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINT16     reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINT32     reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINT64     reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_UINTPTR    reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_FLOAT32    reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_FLOAT64    reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_COMPLEX64  reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE_COMPLEX128 reduce using rule 27 (type -> TYPE_UINT16 .)
    CONST           reduce using rule 27 (type -> TYPE_UINT16 .)
    TYPE            reduce using rule 27 (type -> TYPE_UINT16 .)
    VAR             reduce using rule 27 (type -> TYPE_UINT16 .)
    LBRACKET        reduce using rule 27 (type -> TYPE_UINT16 .)
    STRUCT          reduce using rule 27 (type -> TYPE_UINT16 .)
    ASTERISKS       reduce using rule 27 (type -> TYPE_UINT16 .)
    FUNC            reduce using rule 27 (type -> TYPE_UINT16 .)
    INTERFACE       reduce using rule 27 (type -> TYPE_UINT16 .)
    MAP             reduce using rule 27 (type -> TYPE_UINT16 .)
    CHAN            reduce using rule 27 (type -> TYPE_UINT16 .)
    CHANNEL_OPERATOR reduce using rule 27 (type -> TYPE_UINT16 .)
    NORMAL_ASSIGNMENT reduce using rule 27 (type -> TYPE_UINT16 .)
    RBRACE          reduce using rule 27 (type -> TYPE_UINT16 .)
    COMMA           reduce using rule 27 (type -> TYPE_UINT16 .)


state 22

    (28) type -> TYPE_UINT32 .

    ARITHMETIC_OPERATOR reduce using rule 28 (type -> TYPE_UINT32 .)
    OR              reduce using rule 28 (type -> TYPE_UINT32 .)
    AND             reduce using rule 28 (type -> TYPE_UINT32 .)
    COMPARISON_OPERATOR reduce using rule 28 (type -> TYPE_UINT32 .)
    $end            reduce using rule 28 (type -> TYPE_UINT32 .)
    RPAREN          reduce using rule 28 (type -> TYPE_UINT32 .)
    RBRACKET        reduce using rule 28 (type -> TYPE_UINT32 .)
    INTEGER         reduce using rule 28 (type -> TYPE_UINT32 .)
    FLOAT           reduce using rule 28 (type -> TYPE_UINT32 .)
    STRING_LITERAL  reduce using rule 28 (type -> TYPE_UINT32 .)
    ID              reduce using rule 28 (type -> TYPE_UINT32 .)
    LPAREN          reduce using rule 28 (type -> TYPE_UINT32 .)
    NOT             reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_BOOL       reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_STRING     reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_INT        reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_INT8       reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_INT16      reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_INT32      reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_INT64      reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINT       reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINT8      reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINT16     reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINT32     reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINT64     reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_UINTPTR    reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_FLOAT32    reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_FLOAT64    reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_COMPLEX64  reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE_COMPLEX128 reduce using rule 28 (type -> TYPE_UINT32 .)
    CONST           reduce using rule 28 (type -> TYPE_UINT32 .)
    TYPE            reduce using rule 28 (type -> TYPE_UINT32 .)
    VAR             reduce using rule 28 (type -> TYPE_UINT32 .)
    LBRACKET        reduce using rule 28 (type -> TYPE_UINT32 .)
    STRUCT          reduce using rule 28 (type -> TYPE_UINT32 .)
    ASTERISKS       reduce using rule 28 (type -> TYPE_UINT32 .)
    FUNC            reduce using rule 28 (type -> TYPE_UINT32 .)
    INTERFACE       reduce using rule 28 (type -> TYPE_UINT32 .)
    MAP             reduce using rule 28 (type -> TYPE_UINT32 .)
    CHAN            reduce using rule 28 (type -> TYPE_UINT32 .)
    CHANNEL_OPERATOR reduce using rule 28 (type -> TYPE_UINT32 .)
    NORMAL_ASSIGNMENT reduce using rule 28 (type -> TYPE_UINT32 .)
    RBRACE          reduce using rule 28 (type -> TYPE_UINT32 .)
    COMMA           reduce using rule 28 (type -> TYPE_UINT32 .)


state 23

    (29) type -> TYPE_UINT64 .

    ARITHMETIC_OPERATOR reduce using rule 29 (type -> TYPE_UINT64 .)
    OR              reduce using rule 29 (type -> TYPE_UINT64 .)
    AND             reduce using rule 29 (type -> TYPE_UINT64 .)
    COMPARISON_OPERATOR reduce using rule 29 (type -> TYPE_UINT64 .)
    $end            reduce using rule 29 (type -> TYPE_UINT64 .)
    RPAREN          reduce using rule 29 (type -> TYPE_UINT64 .)
    RBRACKET        reduce using rule 29 (type -> TYPE_UINT64 .)
    INTEGER         reduce using rule 29 (type -> TYPE_UINT64 .)
    FLOAT           reduce using rule 29 (type -> TYPE_UINT64 .)
    STRING_LITERAL  reduce using rule 29 (type -> TYPE_UINT64 .)
    ID              reduce using rule 29 (type -> TYPE_UINT64 .)
    LPAREN          reduce using rule 29 (type -> TYPE_UINT64 .)
    NOT             reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_BOOL       reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_STRING     reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_INT        reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_INT8       reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_INT16      reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_INT32      reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_INT64      reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINT       reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINT8      reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINT16     reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINT32     reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINT64     reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_UINTPTR    reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_FLOAT32    reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_FLOAT64    reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_COMPLEX64  reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE_COMPLEX128 reduce using rule 29 (type -> TYPE_UINT64 .)
    CONST           reduce using rule 29 (type -> TYPE_UINT64 .)
    TYPE            reduce using rule 29 (type -> TYPE_UINT64 .)
    VAR             reduce using rule 29 (type -> TYPE_UINT64 .)
    LBRACKET        reduce using rule 29 (type -> TYPE_UINT64 .)
    STRUCT          reduce using rule 29 (type -> TYPE_UINT64 .)
    ASTERISKS       reduce using rule 29 (type -> TYPE_UINT64 .)
    FUNC            reduce using rule 29 (type -> TYPE_UINT64 .)
    INTERFACE       reduce using rule 29 (type -> TYPE_UINT64 .)
    MAP             reduce using rule 29 (type -> TYPE_UINT64 .)
    CHAN            reduce using rule 29 (type -> TYPE_UINT64 .)
    CHANNEL_OPERATOR reduce using rule 29 (type -> TYPE_UINT64 .)
    NORMAL_ASSIGNMENT reduce using rule 29 (type -> TYPE_UINT64 .)
    RBRACE          reduce using rule 29 (type -> TYPE_UINT64 .)
    COMMA           reduce using rule 29 (type -> TYPE_UINT64 .)


state 24

    (30) type -> TYPE_UINTPTR .

    ARITHMETIC_OPERATOR reduce using rule 30 (type -> TYPE_UINTPTR .)
    OR              reduce using rule 30 (type -> TYPE_UINTPTR .)
    AND             reduce using rule 30 (type -> TYPE_UINTPTR .)
    COMPARISON_OPERATOR reduce using rule 30 (type -> TYPE_UINTPTR .)
    $end            reduce using rule 30 (type -> TYPE_UINTPTR .)
    RPAREN          reduce using rule 30 (type -> TYPE_UINTPTR .)
    RBRACKET        reduce using rule 30 (type -> TYPE_UINTPTR .)
    INTEGER         reduce using rule 30 (type -> TYPE_UINTPTR .)
    FLOAT           reduce using rule 30 (type -> TYPE_UINTPTR .)
    STRING_LITERAL  reduce using rule 30 (type -> TYPE_UINTPTR .)
    ID              reduce using rule 30 (type -> TYPE_UINTPTR .)
    LPAREN          reduce using rule 30 (type -> TYPE_UINTPTR .)
    NOT             reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_BOOL       reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_STRING     reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_INT        reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_INT8       reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_INT16      reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_INT32      reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_INT64      reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINT       reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINT8      reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINT16     reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINT32     reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINT64     reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_UINTPTR    reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_FLOAT32    reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_FLOAT64    reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_COMPLEX64  reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE_COMPLEX128 reduce using rule 30 (type -> TYPE_UINTPTR .)
    CONST           reduce using rule 30 (type -> TYPE_UINTPTR .)
    TYPE            reduce using rule 30 (type -> TYPE_UINTPTR .)
    VAR             reduce using rule 30 (type -> TYPE_UINTPTR .)
    LBRACKET        reduce using rule 30 (type -> TYPE_UINTPTR .)
    STRUCT          reduce using rule 30 (type -> TYPE_UINTPTR .)
    ASTERISKS       reduce using rule 30 (type -> TYPE_UINTPTR .)
    FUNC            reduce using rule 30 (type -> TYPE_UINTPTR .)
    INTERFACE       reduce using rule 30 (type -> TYPE_UINTPTR .)
    MAP             reduce using rule 30 (type -> TYPE_UINTPTR .)
    CHAN            reduce using rule 30 (type -> TYPE_UINTPTR .)
    CHANNEL_OPERATOR reduce using rule 30 (type -> TYPE_UINTPTR .)
    NORMAL_ASSIGNMENT reduce using rule 30 (type -> TYPE_UINTPTR .)
    RBRACE          reduce using rule 30 (type -> TYPE_UINTPTR .)
    COMMA           reduce using rule 30 (type -> TYPE_UINTPTR .)


state 25

    (31) type -> TYPE_FLOAT32 .

    ARITHMETIC_OPERATOR reduce using rule 31 (type -> TYPE_FLOAT32 .)
    OR              reduce using rule 31 (type -> TYPE_FLOAT32 .)
    AND             reduce using rule 31 (type -> TYPE_FLOAT32 .)
    COMPARISON_OPERATOR reduce using rule 31 (type -> TYPE_FLOAT32 .)
    $end            reduce using rule 31 (type -> TYPE_FLOAT32 .)
    RPAREN          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    RBRACKET        reduce using rule 31 (type -> TYPE_FLOAT32 .)
    INTEGER         reduce using rule 31 (type -> TYPE_FLOAT32 .)
    FLOAT           reduce using rule 31 (type -> TYPE_FLOAT32 .)
    STRING_LITERAL  reduce using rule 31 (type -> TYPE_FLOAT32 .)
    ID              reduce using rule 31 (type -> TYPE_FLOAT32 .)
    LPAREN          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    NOT             reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_BOOL       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_STRING     reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_INT        reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_INT8       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_INT16      reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_INT32      reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_INT64      reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINT       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINT8      reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINT16     reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINT32     reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINT64     reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_UINTPTR    reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_FLOAT32    reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_FLOAT64    reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_COMPLEX64  reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE_COMPLEX128 reduce using rule 31 (type -> TYPE_FLOAT32 .)
    CONST           reduce using rule 31 (type -> TYPE_FLOAT32 .)
    TYPE            reduce using rule 31 (type -> TYPE_FLOAT32 .)
    VAR             reduce using rule 31 (type -> TYPE_FLOAT32 .)
    LBRACKET        reduce using rule 31 (type -> TYPE_FLOAT32 .)
    STRUCT          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    ASTERISKS       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    FUNC            reduce using rule 31 (type -> TYPE_FLOAT32 .)
    INTERFACE       reduce using rule 31 (type -> TYPE_FLOAT32 .)
    MAP             reduce using rule 31 (type -> TYPE_FLOAT32 .)
    CHAN            reduce using rule 31 (type -> TYPE_FLOAT32 .)
    CHANNEL_OPERATOR reduce using rule 31 (type -> TYPE_FLOAT32 .)
    NORMAL_ASSIGNMENT reduce using rule 31 (type -> TYPE_FLOAT32 .)
    RBRACE          reduce using rule 31 (type -> TYPE_FLOAT32 .)
    COMMA           reduce using rule 31 (type -> TYPE_FLOAT32 .)


state 26

    (32) type -> TYPE_FLOAT64 .

    ARITHMETIC_OPERATOR reduce using rule 32 (type -> TYPE_FLOAT64 .)
    OR              reduce using rule 32 (type -> TYPE_FLOAT64 .)
    AND             reduce using rule 32 (type -> TYPE_FLOAT64 .)
    COMPARISON_OPERATOR reduce using rule 32 (type -> TYPE_FLOAT64 .)
    $end            reduce using rule 32 (type -> TYPE_FLOAT64 .)
    RPAREN          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    RBRACKET        reduce using rule 32 (type -> TYPE_FLOAT64 .)
    INTEGER         reduce using rule 32 (type -> TYPE_FLOAT64 .)
    FLOAT           reduce using rule 32 (type -> TYPE_FLOAT64 .)
    STRING_LITERAL  reduce using rule 32 (type -> TYPE_FLOAT64 .)
    ID              reduce using rule 32 (type -> TYPE_FLOAT64 .)
    LPAREN          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    NOT             reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_BOOL       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_STRING     reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_INT        reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_INT8       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_INT16      reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_INT32      reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_INT64      reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINT       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINT8      reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINT16     reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINT32     reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINT64     reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_UINTPTR    reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_FLOAT32    reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_FLOAT64    reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_COMPLEX64  reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE_COMPLEX128 reduce using rule 32 (type -> TYPE_FLOAT64 .)
    CONST           reduce using rule 32 (type -> TYPE_FLOAT64 .)
    TYPE            reduce using rule 32 (type -> TYPE_FLOAT64 .)
    VAR             reduce using rule 32 (type -> TYPE_FLOAT64 .)
    LBRACKET        reduce using rule 32 (type -> TYPE_FLOAT64 .)
    STRUCT          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    ASTERISKS       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    FUNC            reduce using rule 32 (type -> TYPE_FLOAT64 .)
    INTERFACE       reduce using rule 32 (type -> TYPE_FLOAT64 .)
    MAP             reduce using rule 32 (type -> TYPE_FLOAT64 .)
    CHAN            reduce using rule 32 (type -> TYPE_FLOAT64 .)
    CHANNEL_OPERATOR reduce using rule 32 (type -> TYPE_FLOAT64 .)
    NORMAL_ASSIGNMENT reduce using rule 32 (type -> TYPE_FLOAT64 .)
    RBRACE          reduce using rule 32 (type -> TYPE_FLOAT64 .)
    COMMA           reduce using rule 32 (type -> TYPE_FLOAT64 .)


state 27

    (33) type -> TYPE_COMPLEX64 .

    ARITHMETIC_OPERATOR reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    OR              reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    AND             reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    COMPARISON_OPERATOR reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    $end            reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    RPAREN          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    RBRACKET        reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    INTEGER         reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    FLOAT           reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    STRING_LITERAL  reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    ID              reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    LPAREN          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    NOT             reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_BOOL       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_STRING     reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_INT        reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_INT8       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_INT16      reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_INT32      reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_INT64      reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINT       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINT8      reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINT16     reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINT32     reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINT64     reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_UINTPTR    reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_FLOAT32    reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_FLOAT64    reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_COMPLEX64  reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE_COMPLEX128 reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    CONST           reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    TYPE            reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    VAR             reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    LBRACKET        reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    STRUCT          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    ASTERISKS       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    FUNC            reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    INTERFACE       reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    MAP             reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    CHAN            reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    CHANNEL_OPERATOR reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    NORMAL_ASSIGNMENT reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    RBRACE          reduce using rule 33 (type -> TYPE_COMPLEX64 .)
    COMMA           reduce using rule 33 (type -> TYPE_COMPLEX64 .)


state 28

    (34) type -> TYPE_COMPLEX128 .

    ARITHMETIC_OPERATOR reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    OR              reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    AND             reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    COMPARISON_OPERATOR reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    $end            reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    RPAREN          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    RBRACKET        reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    INTEGER         reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    FLOAT           reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    STRING_LITERAL  reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    ID              reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    LPAREN          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    NOT             reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_BOOL       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_STRING     reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_INT        reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_INT8       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_INT16      reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_INT32      reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_INT64      reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINT       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINT8      reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINT16     reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINT32     reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINT64     reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_UINTPTR    reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_FLOAT32    reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_FLOAT64    reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_COMPLEX64  reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE_COMPLEX128 reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    CONST           reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    TYPE            reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    VAR             reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    LBRACKET        reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    STRUCT          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    ASTERISKS       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    FUNC            reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    INTERFACE       reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    MAP             reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    CHAN            reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    CHANNEL_OPERATOR reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    NORMAL_ASSIGNMENT reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    RBRACE          reduce using rule 34 (type -> TYPE_COMPLEX128 .)
    COMMA           reduce using rule 34 (type -> TYPE_COMPLEX128 .)


state 29

    (43) type -> type_lit .

    ARITHMETIC_OPERATOR reduce using rule 43 (type -> type_lit .)
    OR              reduce using rule 43 (type -> type_lit .)
    AND             reduce using rule 43 (type -> type_lit .)
    COMPARISON_OPERATOR reduce using rule 43 (type -> type_lit .)
    $end            reduce using rule 43 (type -> type_lit .)
    RPAREN          reduce using rule 43 (type -> type_lit .)
    RBRACKET        reduce using rule 43 (type -> type_lit .)
    INTEGER         reduce using rule 43 (type -> type_lit .)
    FLOAT           reduce using rule 43 (type -> type_lit .)
    STRING_LITERAL  reduce using rule 43 (type -> type_lit .)
    ID              reduce using rule 43 (type -> type_lit .)
    LPAREN          reduce using rule 43 (type -> type_lit .)
    NOT             reduce using rule 43 (type -> type_lit .)
    TYPE_BOOL       reduce using rule 43 (type -> type_lit .)
    TYPE_STRING     reduce using rule 43 (type -> type_lit .)
    TYPE_INT        reduce using rule 43 (type -> type_lit .)
    TYPE_INT8       reduce using rule 43 (type -> type_lit .)
    TYPE_INT16      reduce using rule 43 (type -> type_lit .)
    TYPE_INT32      reduce using rule 43 (type -> type_lit .)
    TYPE_INT64      reduce using rule 43 (type -> type_lit .)
    TYPE_UINT       reduce using rule 43 (type -> type_lit .)
    TYPE_UINT8      reduce using rule 43 (type -> type_lit .)
    TYPE_UINT16     reduce using rule 43 (type -> type_lit .)
    TYPE_UINT32     reduce using rule 43 (type -> type_lit .)
    TYPE_UINT64     reduce using rule 43 (type -> type_lit .)
    TYPE_UINTPTR    reduce using rule 43 (type -> type_lit .)
    TYPE_FLOAT32    reduce using rule 43 (type -> type_lit .)
    TYPE_FLOAT64    reduce using rule 43 (type -> type_lit .)
    TYPE_COMPLEX64  reduce using rule 43 (type -> type_lit .)
    TYPE_COMPLEX128 reduce using rule 43 (type -> type_lit .)
    CONST           reduce using rule 43 (type -> type_lit .)
    TYPE            reduce using rule 43 (type -> type_lit .)
    VAR             reduce using rule 43 (type -> type_lit .)
    LBRACKET        reduce using rule 43 (type -> type_lit .)
    STRUCT          reduce using rule 43 (type -> type_lit .)
    ASTERISKS       reduce using rule 43 (type -> type_lit .)
    FUNC            reduce using rule 43 (type -> type_lit .)
    INTERFACE       reduce using rule 43 (type -> type_lit .)
    MAP             reduce using rule 43 (type -> type_lit .)
    CHAN            reduce using rule 43 (type -> type_lit .)
    CHANNEL_OPERATOR reduce using rule 43 (type -> type_lit .)
    NORMAL_ASSIGNMENT reduce using rule 43 (type -> type_lit .)
    RBRACE          reduce using rule 43 (type -> type_lit .)
    COMMA           reduce using rule 43 (type -> type_lit .)


state 30

    (81) declaration -> const_decl .

    ARITHMETIC_OPERATOR reduce using rule 81 (declaration -> const_decl .)
    OR              reduce using rule 81 (declaration -> const_decl .)
    AND             reduce using rule 81 (declaration -> const_decl .)
    COMPARISON_OPERATOR reduce using rule 81 (declaration -> const_decl .)
    $end            reduce using rule 81 (declaration -> const_decl .)
    RPAREN          reduce using rule 81 (declaration -> const_decl .)
    RBRACKET        reduce using rule 81 (declaration -> const_decl .)
    INTEGER         reduce using rule 81 (declaration -> const_decl .)
    FLOAT           reduce using rule 81 (declaration -> const_decl .)
    STRING_LITERAL  reduce using rule 81 (declaration -> const_decl .)
    ID              reduce using rule 81 (declaration -> const_decl .)
    LPAREN          reduce using rule 81 (declaration -> const_decl .)
    NOT             reduce using rule 81 (declaration -> const_decl .)
    TYPE_BOOL       reduce using rule 81 (declaration -> const_decl .)
    TYPE_STRING     reduce using rule 81 (declaration -> const_decl .)
    TYPE_INT        reduce using rule 81 (declaration -> const_decl .)
    TYPE_INT8       reduce using rule 81 (declaration -> const_decl .)
    TYPE_INT16      reduce using rule 81 (declaration -> const_decl .)
    TYPE_INT32      reduce using rule 81 (declaration -> const_decl .)
    TYPE_INT64      reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINT       reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINT8      reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINT16     reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINT32     reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINT64     reduce using rule 81 (declaration -> const_decl .)
    TYPE_UINTPTR    reduce using rule 81 (declaration -> const_decl .)
    TYPE_FLOAT32    reduce using rule 81 (declaration -> const_decl .)
    TYPE_FLOAT64    reduce using rule 81 (declaration -> const_decl .)
    TYPE_COMPLEX64  reduce using rule 81 (declaration -> const_decl .)
    TYPE_COMPLEX128 reduce using rule 81 (declaration -> const_decl .)
    CONST           reduce using rule 81 (declaration -> const_decl .)
    TYPE            reduce using rule 81 (declaration -> const_decl .)
    VAR             reduce using rule 81 (declaration -> const_decl .)
    LBRACKET        reduce using rule 81 (declaration -> const_decl .)
    STRUCT          reduce using rule 81 (declaration -> const_decl .)
    ASTERISKS       reduce using rule 81 (declaration -> const_decl .)
    FUNC            reduce using rule 81 (declaration -> const_decl .)
    INTERFACE       reduce using rule 81 (declaration -> const_decl .)
    MAP             reduce using rule 81 (declaration -> const_decl .)
    CHAN            reduce using rule 81 (declaration -> const_decl .)
    CHANNEL_OPERATOR reduce using rule 81 (declaration -> const_decl .)


state 31

    (82) declaration -> type_decl .

    ARITHMETIC_OPERATOR reduce using rule 82 (declaration -> type_decl .)
    OR              reduce using rule 82 (declaration -> type_decl .)
    AND             reduce using rule 82 (declaration -> type_decl .)
    COMPARISON_OPERATOR reduce using rule 82 (declaration -> type_decl .)
    $end            reduce using rule 82 (declaration -> type_decl .)
    RPAREN          reduce using rule 82 (declaration -> type_decl .)
    RBRACKET        reduce using rule 82 (declaration -> type_decl .)
    INTEGER         reduce using rule 82 (declaration -> type_decl .)
    FLOAT           reduce using rule 82 (declaration -> type_decl .)
    STRING_LITERAL  reduce using rule 82 (declaration -> type_decl .)
    ID              reduce using rule 82 (declaration -> type_decl .)
    LPAREN          reduce using rule 82 (declaration -> type_decl .)
    NOT             reduce using rule 82 (declaration -> type_decl .)
    TYPE_BOOL       reduce using rule 82 (declaration -> type_decl .)
    TYPE_STRING     reduce using rule 82 (declaration -> type_decl .)
    TYPE_INT        reduce using rule 82 (declaration -> type_decl .)
    TYPE_INT8       reduce using rule 82 (declaration -> type_decl .)
    TYPE_INT16      reduce using rule 82 (declaration -> type_decl .)
    TYPE_INT32      reduce using rule 82 (declaration -> type_decl .)
    TYPE_INT64      reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINT       reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINT8      reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINT16     reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINT32     reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINT64     reduce using rule 82 (declaration -> type_decl .)
    TYPE_UINTPTR    reduce using rule 82 (declaration -> type_decl .)
    TYPE_FLOAT32    reduce using rule 82 (declaration -> type_decl .)
    TYPE_FLOAT64    reduce using rule 82 (declaration -> type_decl .)
    TYPE_COMPLEX64  reduce using rule 82 (declaration -> type_decl .)
    TYPE_COMPLEX128 reduce using rule 82 (declaration -> type_decl .)
    CONST           reduce using rule 82 (declaration -> type_decl .)
    TYPE            reduce using rule 82 (declaration -> type_decl .)
    VAR             reduce using rule 82 (declaration -> type_decl .)
    LBRACKET        reduce using rule 82 (declaration -> type_decl .)
    STRUCT          reduce using rule 82 (declaration -> type_decl .)
    ASTERISKS       reduce using rule 82 (declaration -> type_decl .)
    FUNC            reduce using rule 82 (declaration -> type_decl .)
    INTERFACE       reduce using rule 82 (declaration -> type_decl .)
    MAP             reduce using rule 82 (declaration -> type_decl .)
    CHAN            reduce using rule 82 (declaration -> type_decl .)
    CHANNEL_OPERATOR reduce using rule 82 (declaration -> type_decl .)


state 32

    (83) declaration -> var_decl .

    ARITHMETIC_OPERATOR reduce using rule 83 (declaration -> var_decl .)
    OR              reduce using rule 83 (declaration -> var_decl .)
    AND             reduce using rule 83 (declaration -> var_decl .)
    COMPARISON_OPERATOR reduce using rule 83 (declaration -> var_decl .)
    $end            reduce using rule 83 (declaration -> var_decl .)
    RPAREN          reduce using rule 83 (declaration -> var_decl .)
    RBRACKET        reduce using rule 83 (declaration -> var_decl .)
    INTEGER         reduce using rule 83 (declaration -> var_decl .)
    FLOAT           reduce using rule 83 (declaration -> var_decl .)
    STRING_LITERAL  reduce using rule 83 (declaration -> var_decl .)
    ID              reduce using rule 83 (declaration -> var_decl .)
    LPAREN          reduce using rule 83 (declaration -> var_decl .)
    NOT             reduce using rule 83 (declaration -> var_decl .)
    TYPE_BOOL       reduce using rule 83 (declaration -> var_decl .)
    TYPE_STRING     reduce using rule 83 (declaration -> var_decl .)
    TYPE_INT        reduce using rule 83 (declaration -> var_decl .)
    TYPE_INT8       reduce using rule 83 (declaration -> var_decl .)
    TYPE_INT16      reduce using rule 83 (declaration -> var_decl .)
    TYPE_INT32      reduce using rule 83 (declaration -> var_decl .)
    TYPE_INT64      reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINT       reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINT8      reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINT16     reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINT32     reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINT64     reduce using rule 83 (declaration -> var_decl .)
    TYPE_UINTPTR    reduce using rule 83 (declaration -> var_decl .)
    TYPE_FLOAT32    reduce using rule 83 (declaration -> var_decl .)
    TYPE_FLOAT64    reduce using rule 83 (declaration -> var_decl .)
    TYPE_COMPLEX64  reduce using rule 83 (declaration -> var_decl .)
    TYPE_COMPLEX128 reduce using rule 83 (declaration -> var_decl .)
    CONST           reduce using rule 83 (declaration -> var_decl .)
    TYPE            reduce using rule 83 (declaration -> var_decl .)
    VAR             reduce using rule 83 (declaration -> var_decl .)
    LBRACKET        reduce using rule 83 (declaration -> var_decl .)
    STRUCT          reduce using rule 83 (declaration -> var_decl .)
    ASTERISKS       reduce using rule 83 (declaration -> var_decl .)
    FUNC            reduce using rule 83 (declaration -> var_decl .)
    INTERFACE       reduce using rule 83 (declaration -> var_decl .)
    MAP             reduce using rule 83 (declaration -> var_decl .)
    CHAN            reduce using rule 83 (declaration -> var_decl .)
    CHANNEL_OPERATOR reduce using rule 83 (declaration -> var_decl .)


state 33

    (35) type_lit -> array_type .

    ARITHMETIC_OPERATOR reduce using rule 35 (type_lit -> array_type .)
    OR              reduce using rule 35 (type_lit -> array_type .)
    AND             reduce using rule 35 (type_lit -> array_type .)
    COMPARISON_OPERATOR reduce using rule 35 (type_lit -> array_type .)
    $end            reduce using rule 35 (type_lit -> array_type .)
    RPAREN          reduce using rule 35 (type_lit -> array_type .)
    RBRACKET        reduce using rule 35 (type_lit -> array_type .)
    INTEGER         reduce using rule 35 (type_lit -> array_type .)
    FLOAT           reduce using rule 35 (type_lit -> array_type .)
    STRING_LITERAL  reduce using rule 35 (type_lit -> array_type .)
    ID              reduce using rule 35 (type_lit -> array_type .)
    LPAREN          reduce using rule 35 (type_lit -> array_type .)
    NOT             reduce using rule 35 (type_lit -> array_type .)
    TYPE_BOOL       reduce using rule 35 (type_lit -> array_type .)
    TYPE_STRING     reduce using rule 35 (type_lit -> array_type .)
    TYPE_INT        reduce using rule 35 (type_lit -> array_type .)
    TYPE_INT8       reduce using rule 35 (type_lit -> array_type .)
    TYPE_INT16      reduce using rule 35 (type_lit -> array_type .)
    TYPE_INT32      reduce using rule 35 (type_lit -> array_type .)
    TYPE_INT64      reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINT       reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINT8      reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINT16     reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINT32     reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINT64     reduce using rule 35 (type_lit -> array_type .)
    TYPE_UINTPTR    reduce using rule 35 (type_lit -> array_type .)
    TYPE_FLOAT32    reduce using rule 35 (type_lit -> array_type .)
    TYPE_FLOAT64    reduce using rule 35 (type_lit -> array_type .)
    TYPE_COMPLEX64  reduce using rule 35 (type_lit -> array_type .)
    TYPE_COMPLEX128 reduce using rule 35 (type_lit -> array_type .)
    CONST           reduce using rule 35 (type_lit -> array_type .)
    TYPE            reduce using rule 35 (type_lit -> array_type .)
    VAR             reduce using rule 35 (type_lit -> array_type .)
    LBRACKET        reduce using rule 35 (type_lit -> array_type .)
    STRUCT          reduce using rule 35 (type_lit -> array_type .)
    ASTERISKS       reduce using rule 35 (type_lit -> array_type .)
    FUNC            reduce using rule 35 (type_lit -> array_type .)
    INTERFACE       reduce using rule 35 (type_lit -> array_type .)
    MAP             reduce using rule 35 (type_lit -> array_type .)
    CHAN            reduce using rule 35 (type_lit -> array_type .)
    CHANNEL_OPERATOR reduce using rule 35 (type_lit -> array_type .)
    NORMAL_ASSIGNMENT reduce using rule 35 (type_lit -> array_type .)
    RBRACE          reduce using rule 35 (type_lit -> array_type .)
    COMMA           reduce using rule 35 (type_lit -> array_type .)


state 34

    (36) type_lit -> slice_type .

    ARITHMETIC_OPERATOR reduce using rule 36 (type_lit -> slice_type .)
    OR              reduce using rule 36 (type_lit -> slice_type .)
    AND             reduce using rule 36 (type_lit -> slice_type .)
    COMPARISON_OPERATOR reduce using rule 36 (type_lit -> slice_type .)
    $end            reduce using rule 36 (type_lit -> slice_type .)
    RPAREN          reduce using rule 36 (type_lit -> slice_type .)
    RBRACKET        reduce using rule 36 (type_lit -> slice_type .)
    INTEGER         reduce using rule 36 (type_lit -> slice_type .)
    FLOAT           reduce using rule 36 (type_lit -> slice_type .)
    STRING_LITERAL  reduce using rule 36 (type_lit -> slice_type .)
    ID              reduce using rule 36 (type_lit -> slice_type .)
    LPAREN          reduce using rule 36 (type_lit -> slice_type .)
    NOT             reduce using rule 36 (type_lit -> slice_type .)
    TYPE_BOOL       reduce using rule 36 (type_lit -> slice_type .)
    TYPE_STRING     reduce using rule 36 (type_lit -> slice_type .)
    TYPE_INT        reduce using rule 36 (type_lit -> slice_type .)
    TYPE_INT8       reduce using rule 36 (type_lit -> slice_type .)
    TYPE_INT16      reduce using rule 36 (type_lit -> slice_type .)
    TYPE_INT32      reduce using rule 36 (type_lit -> slice_type .)
    TYPE_INT64      reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINT       reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINT8      reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINT16     reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINT32     reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINT64     reduce using rule 36 (type_lit -> slice_type .)
    TYPE_UINTPTR    reduce using rule 36 (type_lit -> slice_type .)
    TYPE_FLOAT32    reduce using rule 36 (type_lit -> slice_type .)
    TYPE_FLOAT64    reduce using rule 36 (type_lit -> slice_type .)
    TYPE_COMPLEX64  reduce using rule 36 (type_lit -> slice_type .)
    TYPE_COMPLEX128 reduce using rule 36 (type_lit -> slice_type .)
    CONST           reduce using rule 36 (type_lit -> slice_type .)
    TYPE            reduce using rule 36 (type_lit -> slice_type .)
    VAR             reduce using rule 36 (type_lit -> slice_type .)
    LBRACKET        reduce using rule 36 (type_lit -> slice_type .)
    STRUCT          reduce using rule 36 (type_lit -> slice_type .)
    ASTERISKS       reduce using rule 36 (type_lit -> slice_type .)
    FUNC            reduce using rule 36 (type_lit -> slice_type .)
    INTERFACE       reduce using rule 36 (type_lit -> slice_type .)
    MAP             reduce using rule 36 (type_lit -> slice_type .)
    CHAN            reduce using rule 36 (type_lit -> slice_type .)
    CHANNEL_OPERATOR reduce using rule 36 (type_lit -> slice_type .)
    NORMAL_ASSIGNMENT reduce using rule 36 (type_lit -> slice_type .)
    RBRACE          reduce using rule 36 (type_lit -> slice_type .)
    COMMA           reduce using rule 36 (type_lit -> slice_type .)


state 35

    (37) type_lit -> struct_type .

    ARITHMETIC_OPERATOR reduce using rule 37 (type_lit -> struct_type .)
    OR              reduce using rule 37 (type_lit -> struct_type .)
    AND             reduce using rule 37 (type_lit -> struct_type .)
    COMPARISON_OPERATOR reduce using rule 37 (type_lit -> struct_type .)
    $end            reduce using rule 37 (type_lit -> struct_type .)
    RPAREN          reduce using rule 37 (type_lit -> struct_type .)
    RBRACKET        reduce using rule 37 (type_lit -> struct_type .)
    INTEGER         reduce using rule 37 (type_lit -> struct_type .)
    FLOAT           reduce using rule 37 (type_lit -> struct_type .)
    STRING_LITERAL  reduce using rule 37 (type_lit -> struct_type .)
    ID              reduce using rule 37 (type_lit -> struct_type .)
    LPAREN          reduce using rule 37 (type_lit -> struct_type .)
    NOT             reduce using rule 37 (type_lit -> struct_type .)
    TYPE_BOOL       reduce using rule 37 (type_lit -> struct_type .)
    TYPE_STRING     reduce using rule 37 (type_lit -> struct_type .)
    TYPE_INT        reduce using rule 37 (type_lit -> struct_type .)
    TYPE_INT8       reduce using rule 37 (type_lit -> struct_type .)
    TYPE_INT16      reduce using rule 37 (type_lit -> struct_type .)
    TYPE_INT32      reduce using rule 37 (type_lit -> struct_type .)
    TYPE_INT64      reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINT       reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINT8      reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINT16     reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINT32     reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINT64     reduce using rule 37 (type_lit -> struct_type .)
    TYPE_UINTPTR    reduce using rule 37 (type_lit -> struct_type .)
    TYPE_FLOAT32    reduce using rule 37 (type_lit -> struct_type .)
    TYPE_FLOAT64    reduce using rule 37 (type_lit -> struct_type .)
    TYPE_COMPLEX64  reduce using rule 37 (type_lit -> struct_type .)
    TYPE_COMPLEX128 reduce using rule 37 (type_lit -> struct_type .)
    CONST           reduce using rule 37 (type_lit -> struct_type .)
    TYPE            reduce using rule 37 (type_lit -> struct_type .)
    VAR             reduce using rule 37 (type_lit -> struct_type .)
    LBRACKET        reduce using rule 37 (type_lit -> struct_type .)
    STRUCT          reduce using rule 37 (type_lit -> struct_type .)
    ASTERISKS       reduce using rule 37 (type_lit -> struct_type .)
    FUNC            reduce using rule 37 (type_lit -> struct_type .)
    INTERFACE       reduce using rule 37 (type_lit -> struct_type .)
    MAP             reduce using rule 37 (type_lit -> struct_type .)
    CHAN            reduce using rule 37 (type_lit -> struct_type .)
    CHANNEL_OPERATOR reduce using rule 37 (type_lit -> struct_type .)
    NORMAL_ASSIGNMENT reduce using rule 37 (type_lit -> struct_type .)
    RBRACE          reduce using rule 37 (type_lit -> struct_type .)
    COMMA           reduce using rule 37 (type_lit -> struct_type .)


state 36

    (38) type_lit -> pointer_type .

    ARITHMETIC_OPERATOR reduce using rule 38 (type_lit -> pointer_type .)
    OR              reduce using rule 38 (type_lit -> pointer_type .)
    AND             reduce using rule 38 (type_lit -> pointer_type .)
    COMPARISON_OPERATOR reduce using rule 38 (type_lit -> pointer_type .)
    $end            reduce using rule 38 (type_lit -> pointer_type .)
    RPAREN          reduce using rule 38 (type_lit -> pointer_type .)
    RBRACKET        reduce using rule 38 (type_lit -> pointer_type .)
    INTEGER         reduce using rule 38 (type_lit -> pointer_type .)
    FLOAT           reduce using rule 38 (type_lit -> pointer_type .)
    STRING_LITERAL  reduce using rule 38 (type_lit -> pointer_type .)
    ID              reduce using rule 38 (type_lit -> pointer_type .)
    LPAREN          reduce using rule 38 (type_lit -> pointer_type .)
    NOT             reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_BOOL       reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_STRING     reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_INT        reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_INT8       reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_INT16      reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_INT32      reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_INT64      reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINT       reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINT8      reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINT16     reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINT32     reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINT64     reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_UINTPTR    reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_FLOAT32    reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_FLOAT64    reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_COMPLEX64  reduce using rule 38 (type_lit -> pointer_type .)
    TYPE_COMPLEX128 reduce using rule 38 (type_lit -> pointer_type .)
    CONST           reduce using rule 38 (type_lit -> pointer_type .)
    TYPE            reduce using rule 38 (type_lit -> pointer_type .)
    VAR             reduce using rule 38 (type_lit -> pointer_type .)
    LBRACKET        reduce using rule 38 (type_lit -> pointer_type .)
    STRUCT          reduce using rule 38 (type_lit -> pointer_type .)
    ASTERISKS       reduce using rule 38 (type_lit -> pointer_type .)
    FUNC            reduce using rule 38 (type_lit -> pointer_type .)
    INTERFACE       reduce using rule 38 (type_lit -> pointer_type .)
    MAP             reduce using rule 38 (type_lit -> pointer_type .)
    CHAN            reduce using rule 38 (type_lit -> pointer_type .)
    CHANNEL_OPERATOR reduce using rule 38 (type_lit -> pointer_type .)
    NORMAL_ASSIGNMENT reduce using rule 38 (type_lit -> pointer_type .)
    RBRACE          reduce using rule 38 (type_lit -> pointer_type .)
    COMMA           reduce using rule 38 (type_lit -> pointer_type .)


state 37

    (39) type_lit -> function_type .

    ARITHMETIC_OPERATOR reduce using rule 39 (type_lit -> function_type .)
    OR              reduce using rule 39 (type_lit -> function_type .)
    AND             reduce using rule 39 (type_lit -> function_type .)
    COMPARISON_OPERATOR reduce using rule 39 (type_lit -> function_type .)
    $end            reduce using rule 39 (type_lit -> function_type .)
    RPAREN          reduce using rule 39 (type_lit -> function_type .)
    RBRACKET        reduce using rule 39 (type_lit -> function_type .)
    INTEGER         reduce using rule 39 (type_lit -> function_type .)
    FLOAT           reduce using rule 39 (type_lit -> function_type .)
    STRING_LITERAL  reduce using rule 39 (type_lit -> function_type .)
    ID              reduce using rule 39 (type_lit -> function_type .)
    LPAREN          reduce using rule 39 (type_lit -> function_type .)
    NOT             reduce using rule 39 (type_lit -> function_type .)
    TYPE_BOOL       reduce using rule 39 (type_lit -> function_type .)
    TYPE_STRING     reduce using rule 39 (type_lit -> function_type .)
    TYPE_INT        reduce using rule 39 (type_lit -> function_type .)
    TYPE_INT8       reduce using rule 39 (type_lit -> function_type .)
    TYPE_INT16      reduce using rule 39 (type_lit -> function_type .)
    TYPE_INT32      reduce using rule 39 (type_lit -> function_type .)
    TYPE_INT64      reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINT       reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINT8      reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINT16     reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINT32     reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINT64     reduce using rule 39 (type_lit -> function_type .)
    TYPE_UINTPTR    reduce using rule 39 (type_lit -> function_type .)
    TYPE_FLOAT32    reduce using rule 39 (type_lit -> function_type .)
    TYPE_FLOAT64    reduce using rule 39 (type_lit -> function_type .)
    TYPE_COMPLEX64  reduce using rule 39 (type_lit -> function_type .)
    TYPE_COMPLEX128 reduce using rule 39 (type_lit -> function_type .)
    CONST           reduce using rule 39 (type_lit -> function_type .)
    TYPE            reduce using rule 39 (type_lit -> function_type .)
    VAR             reduce using rule 39 (type_lit -> function_type .)
    LBRACKET        reduce using rule 39 (type_lit -> function_type .)
    STRUCT          reduce using rule 39 (type_lit -> function_type .)
    ASTERISKS       reduce using rule 39 (type_lit -> function_type .)
    FUNC            reduce using rule 39 (type_lit -> function_type .)
    INTERFACE       reduce using rule 39 (type_lit -> function_type .)
    MAP             reduce using rule 39 (type_lit -> function_type .)
    CHAN            reduce using rule 39 (type_lit -> function_type .)
    CHANNEL_OPERATOR reduce using rule 39 (type_lit -> function_type .)
    NORMAL_ASSIGNMENT reduce using rule 39 (type_lit -> function_type .)
    RBRACE          reduce using rule 39 (type_lit -> function_type .)
    COMMA           reduce using rule 39 (type_lit -> function_type .)


state 38

    (40) type_lit -> interface_type .

    ARITHMETIC_OPERATOR reduce using rule 40 (type_lit -> interface_type .)
    OR              reduce using rule 40 (type_lit -> interface_type .)
    AND             reduce using rule 40 (type_lit -> interface_type .)
    COMPARISON_OPERATOR reduce using rule 40 (type_lit -> interface_type .)
    $end            reduce using rule 40 (type_lit -> interface_type .)
    RPAREN          reduce using rule 40 (type_lit -> interface_type .)
    RBRACKET        reduce using rule 40 (type_lit -> interface_type .)
    INTEGER         reduce using rule 40 (type_lit -> interface_type .)
    FLOAT           reduce using rule 40 (type_lit -> interface_type .)
    STRING_LITERAL  reduce using rule 40 (type_lit -> interface_type .)
    ID              reduce using rule 40 (type_lit -> interface_type .)
    LPAREN          reduce using rule 40 (type_lit -> interface_type .)
    NOT             reduce using rule 40 (type_lit -> interface_type .)
    TYPE_BOOL       reduce using rule 40 (type_lit -> interface_type .)
    TYPE_STRING     reduce using rule 40 (type_lit -> interface_type .)
    TYPE_INT        reduce using rule 40 (type_lit -> interface_type .)
    TYPE_INT8       reduce using rule 40 (type_lit -> interface_type .)
    TYPE_INT16      reduce using rule 40 (type_lit -> interface_type .)
    TYPE_INT32      reduce using rule 40 (type_lit -> interface_type .)
    TYPE_INT64      reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINT       reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINT8      reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINT16     reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINT32     reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINT64     reduce using rule 40 (type_lit -> interface_type .)
    TYPE_UINTPTR    reduce using rule 40 (type_lit -> interface_type .)
    TYPE_FLOAT32    reduce using rule 40 (type_lit -> interface_type .)
    TYPE_FLOAT64    reduce using rule 40 (type_lit -> interface_type .)
    TYPE_COMPLEX64  reduce using rule 40 (type_lit -> interface_type .)
    TYPE_COMPLEX128 reduce using rule 40 (type_lit -> interface_type .)
    CONST           reduce using rule 40 (type_lit -> interface_type .)
    TYPE            reduce using rule 40 (type_lit -> interface_type .)
    VAR             reduce using rule 40 (type_lit -> interface_type .)
    LBRACKET        reduce using rule 40 (type_lit -> interface_type .)
    STRUCT          reduce using rule 40 (type_lit -> interface_type .)
    ASTERISKS       reduce using rule 40 (type_lit -> interface_type .)
    FUNC            reduce using rule 40 (type_lit -> interface_type .)
    INTERFACE       reduce using rule 40 (type_lit -> interface_type .)
    MAP             reduce using rule 40 (type_lit -> interface_type .)
    CHAN            reduce using rule 40 (type_lit -> interface_type .)
    CHANNEL_OPERATOR reduce using rule 40 (type_lit -> interface_type .)
    NORMAL_ASSIGNMENT reduce using rule 40 (type_lit -> interface_type .)
    RBRACE          reduce using rule 40 (type_lit -> interface_type .)
    COMMA           reduce using rule 40 (type_lit -> interface_type .)


state 39

    (41) type_lit -> map_type .

    ARITHMETIC_OPERATOR reduce using rule 41 (type_lit -> map_type .)
    OR              reduce using rule 41 (type_lit -> map_type .)
    AND             reduce using rule 41 (type_lit -> map_type .)
    COMPARISON_OPERATOR reduce using rule 41 (type_lit -> map_type .)
    $end            reduce using rule 41 (type_lit -> map_type .)
    RPAREN          reduce using rule 41 (type_lit -> map_type .)
    RBRACKET        reduce using rule 41 (type_lit -> map_type .)
    INTEGER         reduce using rule 41 (type_lit -> map_type .)
    FLOAT           reduce using rule 41 (type_lit -> map_type .)
    STRING_LITERAL  reduce using rule 41 (type_lit -> map_type .)
    ID              reduce using rule 41 (type_lit -> map_type .)
    LPAREN          reduce using rule 41 (type_lit -> map_type .)
    NOT             reduce using rule 41 (type_lit -> map_type .)
    TYPE_BOOL       reduce using rule 41 (type_lit -> map_type .)
    TYPE_STRING     reduce using rule 41 (type_lit -> map_type .)
    TYPE_INT        reduce using rule 41 (type_lit -> map_type .)
    TYPE_INT8       reduce using rule 41 (type_lit -> map_type .)
    TYPE_INT16      reduce using rule 41 (type_lit -> map_type .)
    TYPE_INT32      reduce using rule 41 (type_lit -> map_type .)
    TYPE_INT64      reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINT       reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINT8      reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINT16     reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINT32     reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINT64     reduce using rule 41 (type_lit -> map_type .)
    TYPE_UINTPTR    reduce using rule 41 (type_lit -> map_type .)
    TYPE_FLOAT32    reduce using rule 41 (type_lit -> map_type .)
    TYPE_FLOAT64    reduce using rule 41 (type_lit -> map_type .)
    TYPE_COMPLEX64  reduce using rule 41 (type_lit -> map_type .)
    TYPE_COMPLEX128 reduce using rule 41 (type_lit -> map_type .)
    CONST           reduce using rule 41 (type_lit -> map_type .)
    TYPE            reduce using rule 41 (type_lit -> map_type .)
    VAR             reduce using rule 41 (type_lit -> map_type .)
    LBRACKET        reduce using rule 41 (type_lit -> map_type .)
    STRUCT          reduce using rule 41 (type_lit -> map_type .)
    ASTERISKS       reduce using rule 41 (type_lit -> map_type .)
    FUNC            reduce using rule 41 (type_lit -> map_type .)
    INTERFACE       reduce using rule 41 (type_lit -> map_type .)
    MAP             reduce using rule 41 (type_lit -> map_type .)
    CHAN            reduce using rule 41 (type_lit -> map_type .)
    CHANNEL_OPERATOR reduce using rule 41 (type_lit -> map_type .)
    NORMAL_ASSIGNMENT reduce using rule 41 (type_lit -> map_type .)
    RBRACE          reduce using rule 41 (type_lit -> map_type .)
    COMMA           reduce using rule 41 (type_lit -> map_type .)


state 40

    (42) type_lit -> channel_type .

    ARITHMETIC_OPERATOR reduce using rule 42 (type_lit -> channel_type .)
    OR              reduce using rule 42 (type_lit -> channel_type .)
    AND             reduce using rule 42 (type_lit -> channel_type .)
    COMPARISON_OPERATOR reduce using rule 42 (type_lit -> channel_type .)
    $end            reduce using rule 42 (type_lit -> channel_type .)
    RPAREN          reduce using rule 42 (type_lit -> channel_type .)
    RBRACKET        reduce using rule 42 (type_lit -> channel_type .)
    INTEGER         reduce using rule 42 (type_lit -> channel_type .)
    FLOAT           reduce using rule 42 (type_lit -> channel_type .)
    STRING_LITERAL  reduce using rule 42 (type_lit -> channel_type .)
    ID              reduce using rule 42 (type_lit -> channel_type .)
    LPAREN          reduce using rule 42 (type_lit -> channel_type .)
    NOT             reduce using rule 42 (type_lit -> channel_type .)
    TYPE_BOOL       reduce using rule 42 (type_lit -> channel_type .)
    TYPE_STRING     reduce using rule 42 (type_lit -> channel_type .)
    TYPE_INT        reduce using rule 42 (type_lit -> channel_type .)
    TYPE_INT8       reduce using rule 42 (type_lit -> channel_type .)
    TYPE_INT16      reduce using rule 42 (type_lit -> channel_type .)
    TYPE_INT32      reduce using rule 42 (type_lit -> channel_type .)
    TYPE_INT64      reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINT       reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINT8      reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINT16     reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINT32     reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINT64     reduce using rule 42 (type_lit -> channel_type .)
    TYPE_UINTPTR    reduce using rule 42 (type_lit -> channel_type .)
    TYPE_FLOAT32    reduce using rule 42 (type_lit -> channel_type .)
    TYPE_FLOAT64    reduce using rule 42 (type_lit -> channel_type .)
    TYPE_COMPLEX64  reduce using rule 42 (type_lit -> channel_type .)
    TYPE_COMPLEX128 reduce using rule 42 (type_lit -> channel_type .)
    CONST           reduce using rule 42 (type_lit -> channel_type .)
    TYPE            reduce using rule 42 (type_lit -> channel_type .)
    VAR             reduce using rule 42 (type_lit -> channel_type .)
    LBRACKET        reduce using rule 42 (type_lit -> channel_type .)
    STRUCT          reduce using rule 42 (type_lit -> channel_type .)
    ASTERISKS       reduce using rule 42 (type_lit -> channel_type .)
    FUNC            reduce using rule 42 (type_lit -> channel_type .)
    INTERFACE       reduce using rule 42 (type_lit -> channel_type .)
    MAP             reduce using rule 42 (type_lit -> channel_type .)
    CHAN            reduce using rule 42 (type_lit -> channel_type .)
    CHANNEL_OPERATOR reduce using rule 42 (type_lit -> channel_type .)
    NORMAL_ASSIGNMENT reduce using rule 42 (type_lit -> channel_type .)
    RBRACE          reduce using rule 42 (type_lit -> channel_type .)
    COMMA           reduce using rule 42 (type_lit -> channel_type .)


state 41

    (85) const_decl -> CONST . const_spec
    (86) const_decl -> CONST . LPAREN const_spec RPAREN
    (87) const_spec -> . identifier_list NORMAL_ASSIGNMENT expression_list
    (88) const_spec -> . identifier_list type NORMAL_ASSIGNMENT expression_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    LPAREN          shift and go to state 61
    ID              shift and go to state 63

    const_spec                     shift and go to state 60
    identifier_list                shift and go to state 62

state 42

    (89) type_decl -> TYPE . type_spec
    (90) type_decl -> TYPE . LPAREN type_spec RPAREN
    (91) type_spec -> . alias_decl
    (92) type_spec -> . type_def
    (93) alias_decl -> . ID NORMAL_ASSIGNMENT type
    (94) type_def -> . ID type

    LPAREN          shift and go to state 65
    ID              shift and go to state 68

    type_spec                      shift and go to state 64
    alias_decl                     shift and go to state 66
    type_def                       shift and go to state 67

state 43

    (95) var_decl -> VAR . var_spec
    (96) var_decl -> VAR . LPAREN var_spec RPAREN
    (97) var_spec -> . identifier_list type
    (98) var_spec -> . identifier_list type NORMAL_ASSIGNMENT expression_list
    (99) var_spec -> . identifier_list NORMAL_ASSIGNMENT expression_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    LPAREN          shift and go to state 70
    ID              shift and go to state 63

    var_spec                       shift and go to state 69
    identifier_list                shift and go to state 71

state 44

    (44) array_type -> LBRACKET . expression RBRACKET type
    (45) slice_type -> LBRACKET . RBRACKET type
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    RBRACKET        shift and go to state 73
    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression                     shift and go to state 72
    type                           shift and go to state 10
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 45

    (46) struct_type -> STRUCT . LBRACE RBRACE
    (47) struct_type -> STRUCT . LBRACE field_decl RBRACE

    LBRACE          shift and go to state 74


state 46

    (56) pointer_type -> ASTERISKS . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 75
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 47

    (57) function_type -> FUNC . signature
    (58) signature -> . parameters
    (59) signature -> . parameters result
    (63) parameters -> . LPAREN RPAREN
    (64) parameters -> . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 78

    signature                      shift and go to state 76
    parameters                     shift and go to state 77

state 48

    (71) interface_type -> INTERFACE . LBRACE method_spec RBRACE

    LBRACE          shift and go to state 79


state 49

    (76) map_type -> MAP . LBRACKET key_type RBRACKET type

    LBRACKET        shift and go to state 80


state 50

    (78) channel_type -> CHAN . type
    (79) channel_type -> CHAN . CHANNEL_OPERATOR type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    CHANNEL_OPERATOR shift and go to state 82
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50

    type                           shift and go to state 81
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 51

    (80) channel_type -> CHANNEL_OPERATOR . CHAN type

    CHAN            shift and go to state 83


state 52

    (1) expression -> expression ARITHMETIC_OPERATOR . expression
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression                     shift and go to state 84
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 53

    (9) expression -> expression OR . expression
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression                     shift and go to state 85
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 54

    (10) expression -> expression AND . expression
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression                     shift and go to state 86
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 55

    (12) expression -> expression COMPARISON_OPERATOR . expression
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression                     shift and go to state 87
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 56

    (13) arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT . expression
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression                     shift and go to state 88
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 57

    (14) unary_assignment -> ID UNARY_ASSIGNMENT .

    ARITHMETIC_OPERATOR reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    OR              reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    AND             reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    COMPARISON_OPERATOR reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    $end            reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    RPAREN          reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    RBRACKET        reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    INTEGER         reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    FLOAT           reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    STRING_LITERAL  reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    ID              reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    LPAREN          reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    NOT             reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_BOOL       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_STRING     reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_INT        reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_INT8       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_INT16      reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_INT32      reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_INT64      reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINT       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINT8      reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINT16     reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINT32     reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINT64     reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_UINTPTR    reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_FLOAT32    reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_FLOAT64    reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_COMPLEX64  reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE_COMPLEX128 reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    CONST           reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    TYPE            reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    VAR             reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    LBRACKET        reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    STRUCT          reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    ASTERISKS       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    FUNC            reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    INTERFACE       reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    MAP             reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    CHAN            reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)
    CHANNEL_OPERATOR reduce using rule 14 (unary_assignment -> ID UNARY_ASSIGNMENT .)


state 58

    (6) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression

    RPAREN          shift and go to state 89
    ARITHMETIC_OPERATOR shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54
    COMPARISON_OPERATOR shift and go to state 55


state 59

    (11) expression -> NOT expression .
    (1) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
    $end            reduce using rule 11 (expression -> NOT expression .)
    RPAREN          reduce using rule 11 (expression -> NOT expression .)
    RBRACKET        reduce using rule 11 (expression -> NOT expression .)
    INTEGER         reduce using rule 11 (expression -> NOT expression .)
    FLOAT           reduce using rule 11 (expression -> NOT expression .)
    STRING_LITERAL  reduce using rule 11 (expression -> NOT expression .)
    ID              reduce using rule 11 (expression -> NOT expression .)
    LPAREN          reduce using rule 11 (expression -> NOT expression .)
    NOT             reduce using rule 11 (expression -> NOT expression .)
    TYPE_BOOL       reduce using rule 11 (expression -> NOT expression .)
    TYPE_STRING     reduce using rule 11 (expression -> NOT expression .)
    TYPE_INT        reduce using rule 11 (expression -> NOT expression .)
    TYPE_INT8       reduce using rule 11 (expression -> NOT expression .)
    TYPE_INT16      reduce using rule 11 (expression -> NOT expression .)
    TYPE_INT32      reduce using rule 11 (expression -> NOT expression .)
    TYPE_INT64      reduce using rule 11 (expression -> NOT expression .)
    TYPE_UINT       reduce using rule 11 (expression -> NOT expression .)
    TYPE_UINT8      reduce using rule 11 (expression -> NOT expression .)
    TYPE_UINT16     reduce using rule 11 (expression -> NOT expression .)
    TYPE_UINT32     reduce using rule 11 (expression -> NOT expression .)
    TYPE_UINT64     reduce using rule 11 (expression -> NOT expression .)
    TYPE_UINTPTR    reduce using rule 11 (expression -> NOT expression .)
    TYPE_FLOAT32    reduce using rule 11 (expression -> NOT expression .)
    TYPE_FLOAT64    reduce using rule 11 (expression -> NOT expression .)
    TYPE_COMPLEX64  reduce using rule 11 (expression -> NOT expression .)
    TYPE_COMPLEX128 reduce using rule 11 (expression -> NOT expression .)
    CONST           reduce using rule 11 (expression -> NOT expression .)
    TYPE            reduce using rule 11 (expression -> NOT expression .)
    VAR             reduce using rule 11 (expression -> NOT expression .)
    LBRACKET        reduce using rule 11 (expression -> NOT expression .)
    STRUCT          reduce using rule 11 (expression -> NOT expression .)
    ASTERISKS       reduce using rule 11 (expression -> NOT expression .)
    FUNC            reduce using rule 11 (expression -> NOT expression .)
    INTERFACE       reduce using rule 11 (expression -> NOT expression .)
    MAP             reduce using rule 11 (expression -> NOT expression .)
    CHAN            reduce using rule 11 (expression -> NOT expression .)
    CHANNEL_OPERATOR reduce using rule 11 (expression -> NOT expression .)
    ARITHMETIC_OPERATOR shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54
    COMPARISON_OPERATOR shift and go to state 55

  ! ARITHMETIC_OPERATOR [ reduce using rule 11 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 11 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 11 (expression -> NOT expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 11 (expression -> NOT expression .) ]


state 60

    (85) const_decl -> CONST const_spec .

    ARITHMETIC_OPERATOR reduce using rule 85 (const_decl -> CONST const_spec .)
    OR              reduce using rule 85 (const_decl -> CONST const_spec .)
    AND             reduce using rule 85 (const_decl -> CONST const_spec .)
    COMPARISON_OPERATOR reduce using rule 85 (const_decl -> CONST const_spec .)
    $end            reduce using rule 85 (const_decl -> CONST const_spec .)
    RPAREN          reduce using rule 85 (const_decl -> CONST const_spec .)
    RBRACKET        reduce using rule 85 (const_decl -> CONST const_spec .)
    INTEGER         reduce using rule 85 (const_decl -> CONST const_spec .)
    FLOAT           reduce using rule 85 (const_decl -> CONST const_spec .)
    STRING_LITERAL  reduce using rule 85 (const_decl -> CONST const_spec .)
    ID              reduce using rule 85 (const_decl -> CONST const_spec .)
    LPAREN          reduce using rule 85 (const_decl -> CONST const_spec .)
    NOT             reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_BOOL       reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_STRING     reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_INT        reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_INT8       reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_INT16      reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_INT32      reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_INT64      reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_UINT       reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_UINT8      reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_UINT16     reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_UINT32     reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_UINT64     reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_UINTPTR    reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_FLOAT32    reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_FLOAT64    reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_COMPLEX64  reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE_COMPLEX128 reduce using rule 85 (const_decl -> CONST const_spec .)
    CONST           reduce using rule 85 (const_decl -> CONST const_spec .)
    TYPE            reduce using rule 85 (const_decl -> CONST const_spec .)
    VAR             reduce using rule 85 (const_decl -> CONST const_spec .)
    LBRACKET        reduce using rule 85 (const_decl -> CONST const_spec .)
    STRUCT          reduce using rule 85 (const_decl -> CONST const_spec .)
    ASTERISKS       reduce using rule 85 (const_decl -> CONST const_spec .)
    FUNC            reduce using rule 85 (const_decl -> CONST const_spec .)
    INTERFACE       reduce using rule 85 (const_decl -> CONST const_spec .)
    MAP             reduce using rule 85 (const_decl -> CONST const_spec .)
    CHAN            reduce using rule 85 (const_decl -> CONST const_spec .)
    CHANNEL_OPERATOR reduce using rule 85 (const_decl -> CONST const_spec .)


state 61

    (86) const_decl -> CONST LPAREN . const_spec RPAREN
    (87) const_spec -> . identifier_list NORMAL_ASSIGNMENT expression_list
    (88) const_spec -> . identifier_list type NORMAL_ASSIGNMENT expression_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 63

    const_spec                     shift and go to state 90
    identifier_list                shift and go to state 62

state 62

    (87) const_spec -> identifier_list . NORMAL_ASSIGNMENT expression_list
    (88) const_spec -> identifier_list . type NORMAL_ASSIGNMENT expression_list
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    NORMAL_ASSIGNMENT shift and go to state 91
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 92
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 63

    (52) identifier_list -> ID .
    (53) identifier_list -> ID . COMMA identifier_list

  ! shift/reduce conflict for COMMA resolved as shift
    NORMAL_ASSIGNMENT reduce using rule 52 (identifier_list -> ID .)
    TYPE_BOOL       reduce using rule 52 (identifier_list -> ID .)
    TYPE_STRING     reduce using rule 52 (identifier_list -> ID .)
    TYPE_INT        reduce using rule 52 (identifier_list -> ID .)
    TYPE_INT8       reduce using rule 52 (identifier_list -> ID .)
    TYPE_INT16      reduce using rule 52 (identifier_list -> ID .)
    TYPE_INT32      reduce using rule 52 (identifier_list -> ID .)
    TYPE_INT64      reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINT       reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINT8      reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINT16     reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINT32     reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINT64     reduce using rule 52 (identifier_list -> ID .)
    TYPE_UINTPTR    reduce using rule 52 (identifier_list -> ID .)
    TYPE_FLOAT32    reduce using rule 52 (identifier_list -> ID .)
    TYPE_FLOAT64    reduce using rule 52 (identifier_list -> ID .)
    TYPE_COMPLEX64  reduce using rule 52 (identifier_list -> ID .)
    TYPE_COMPLEX128 reduce using rule 52 (identifier_list -> ID .)
    LBRACKET        reduce using rule 52 (identifier_list -> ID .)
    STRUCT          reduce using rule 52 (identifier_list -> ID .)
    ASTERISKS       reduce using rule 52 (identifier_list -> ID .)
    FUNC            reduce using rule 52 (identifier_list -> ID .)
    INTERFACE       reduce using rule 52 (identifier_list -> ID .)
    MAP             reduce using rule 52 (identifier_list -> ID .)
    CHAN            reduce using rule 52 (identifier_list -> ID .)
    CHANNEL_OPERATOR reduce using rule 52 (identifier_list -> ID .)
    ELLIPSIS        reduce using rule 52 (identifier_list -> ID .)
    RPAREN          reduce using rule 52 (identifier_list -> ID .)
    COMMA           shift and go to state 93

  ! COMMA           [ reduce using rule 52 (identifier_list -> ID .) ]


state 64

    (89) type_decl -> TYPE type_spec .

    ARITHMETIC_OPERATOR reduce using rule 89 (type_decl -> TYPE type_spec .)
    OR              reduce using rule 89 (type_decl -> TYPE type_spec .)
    AND             reduce using rule 89 (type_decl -> TYPE type_spec .)
    COMPARISON_OPERATOR reduce using rule 89 (type_decl -> TYPE type_spec .)
    $end            reduce using rule 89 (type_decl -> TYPE type_spec .)
    RPAREN          reduce using rule 89 (type_decl -> TYPE type_spec .)
    RBRACKET        reduce using rule 89 (type_decl -> TYPE type_spec .)
    INTEGER         reduce using rule 89 (type_decl -> TYPE type_spec .)
    FLOAT           reduce using rule 89 (type_decl -> TYPE type_spec .)
    STRING_LITERAL  reduce using rule 89 (type_decl -> TYPE type_spec .)
    ID              reduce using rule 89 (type_decl -> TYPE type_spec .)
    LPAREN          reduce using rule 89 (type_decl -> TYPE type_spec .)
    NOT             reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_BOOL       reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_STRING     reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_INT        reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_INT8       reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_INT16      reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_INT32      reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_INT64      reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_UINT       reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_UINT8      reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_UINT16     reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_UINT32     reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_UINT64     reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_UINTPTR    reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_FLOAT32    reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_FLOAT64    reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_COMPLEX64  reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE_COMPLEX128 reduce using rule 89 (type_decl -> TYPE type_spec .)
    CONST           reduce using rule 89 (type_decl -> TYPE type_spec .)
    TYPE            reduce using rule 89 (type_decl -> TYPE type_spec .)
    VAR             reduce using rule 89 (type_decl -> TYPE type_spec .)
    LBRACKET        reduce using rule 89 (type_decl -> TYPE type_spec .)
    STRUCT          reduce using rule 89 (type_decl -> TYPE type_spec .)
    ASTERISKS       reduce using rule 89 (type_decl -> TYPE type_spec .)
    FUNC            reduce using rule 89 (type_decl -> TYPE type_spec .)
    INTERFACE       reduce using rule 89 (type_decl -> TYPE type_spec .)
    MAP             reduce using rule 89 (type_decl -> TYPE type_spec .)
    CHAN            reduce using rule 89 (type_decl -> TYPE type_spec .)
    CHANNEL_OPERATOR reduce using rule 89 (type_decl -> TYPE type_spec .)


state 65

    (90) type_decl -> TYPE LPAREN . type_spec RPAREN
    (91) type_spec -> . alias_decl
    (92) type_spec -> . type_def
    (93) alias_decl -> . ID NORMAL_ASSIGNMENT type
    (94) type_def -> . ID type

    ID              shift and go to state 68

    type_spec                      shift and go to state 94
    alias_decl                     shift and go to state 66
    type_def                       shift and go to state 67

state 66

    (91) type_spec -> alias_decl .

    ARITHMETIC_OPERATOR reduce using rule 91 (type_spec -> alias_decl .)
    OR              reduce using rule 91 (type_spec -> alias_decl .)
    AND             reduce using rule 91 (type_spec -> alias_decl .)
    COMPARISON_OPERATOR reduce using rule 91 (type_spec -> alias_decl .)
    $end            reduce using rule 91 (type_spec -> alias_decl .)
    RPAREN          reduce using rule 91 (type_spec -> alias_decl .)
    RBRACKET        reduce using rule 91 (type_spec -> alias_decl .)
    INTEGER         reduce using rule 91 (type_spec -> alias_decl .)
    FLOAT           reduce using rule 91 (type_spec -> alias_decl .)
    STRING_LITERAL  reduce using rule 91 (type_spec -> alias_decl .)
    ID              reduce using rule 91 (type_spec -> alias_decl .)
    LPAREN          reduce using rule 91 (type_spec -> alias_decl .)
    NOT             reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_BOOL       reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_STRING     reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_INT        reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_INT8       reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_INT16      reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_INT32      reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_INT64      reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_UINT       reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_UINT8      reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_UINT16     reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_UINT32     reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_UINT64     reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_UINTPTR    reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_FLOAT32    reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_FLOAT64    reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_COMPLEX64  reduce using rule 91 (type_spec -> alias_decl .)
    TYPE_COMPLEX128 reduce using rule 91 (type_spec -> alias_decl .)
    CONST           reduce using rule 91 (type_spec -> alias_decl .)
    TYPE            reduce using rule 91 (type_spec -> alias_decl .)
    VAR             reduce using rule 91 (type_spec -> alias_decl .)
    LBRACKET        reduce using rule 91 (type_spec -> alias_decl .)
    STRUCT          reduce using rule 91 (type_spec -> alias_decl .)
    ASTERISKS       reduce using rule 91 (type_spec -> alias_decl .)
    FUNC            reduce using rule 91 (type_spec -> alias_decl .)
    INTERFACE       reduce using rule 91 (type_spec -> alias_decl .)
    MAP             reduce using rule 91 (type_spec -> alias_decl .)
    CHAN            reduce using rule 91 (type_spec -> alias_decl .)
    CHANNEL_OPERATOR reduce using rule 91 (type_spec -> alias_decl .)


state 67

    (92) type_spec -> type_def .

    ARITHMETIC_OPERATOR reduce using rule 92 (type_spec -> type_def .)
    OR              reduce using rule 92 (type_spec -> type_def .)
    AND             reduce using rule 92 (type_spec -> type_def .)
    COMPARISON_OPERATOR reduce using rule 92 (type_spec -> type_def .)
    $end            reduce using rule 92 (type_spec -> type_def .)
    RPAREN          reduce using rule 92 (type_spec -> type_def .)
    RBRACKET        reduce using rule 92 (type_spec -> type_def .)
    INTEGER         reduce using rule 92 (type_spec -> type_def .)
    FLOAT           reduce using rule 92 (type_spec -> type_def .)
    STRING_LITERAL  reduce using rule 92 (type_spec -> type_def .)
    ID              reduce using rule 92 (type_spec -> type_def .)
    LPAREN          reduce using rule 92 (type_spec -> type_def .)
    NOT             reduce using rule 92 (type_spec -> type_def .)
    TYPE_BOOL       reduce using rule 92 (type_spec -> type_def .)
    TYPE_STRING     reduce using rule 92 (type_spec -> type_def .)
    TYPE_INT        reduce using rule 92 (type_spec -> type_def .)
    TYPE_INT8       reduce using rule 92 (type_spec -> type_def .)
    TYPE_INT16      reduce using rule 92 (type_spec -> type_def .)
    TYPE_INT32      reduce using rule 92 (type_spec -> type_def .)
    TYPE_INT64      reduce using rule 92 (type_spec -> type_def .)
    TYPE_UINT       reduce using rule 92 (type_spec -> type_def .)
    TYPE_UINT8      reduce using rule 92 (type_spec -> type_def .)
    TYPE_UINT16     reduce using rule 92 (type_spec -> type_def .)
    TYPE_UINT32     reduce using rule 92 (type_spec -> type_def .)
    TYPE_UINT64     reduce using rule 92 (type_spec -> type_def .)
    TYPE_UINTPTR    reduce using rule 92 (type_spec -> type_def .)
    TYPE_FLOAT32    reduce using rule 92 (type_spec -> type_def .)
    TYPE_FLOAT64    reduce using rule 92 (type_spec -> type_def .)
    TYPE_COMPLEX64  reduce using rule 92 (type_spec -> type_def .)
    TYPE_COMPLEX128 reduce using rule 92 (type_spec -> type_def .)
    CONST           reduce using rule 92 (type_spec -> type_def .)
    TYPE            reduce using rule 92 (type_spec -> type_def .)
    VAR             reduce using rule 92 (type_spec -> type_def .)
    LBRACKET        reduce using rule 92 (type_spec -> type_def .)
    STRUCT          reduce using rule 92 (type_spec -> type_def .)
    ASTERISKS       reduce using rule 92 (type_spec -> type_def .)
    FUNC            reduce using rule 92 (type_spec -> type_def .)
    INTERFACE       reduce using rule 92 (type_spec -> type_def .)
    MAP             reduce using rule 92 (type_spec -> type_def .)
    CHAN            reduce using rule 92 (type_spec -> type_def .)
    CHANNEL_OPERATOR reduce using rule 92 (type_spec -> type_def .)


state 68

    (93) alias_decl -> ID . NORMAL_ASSIGNMENT type
    (94) type_def -> ID . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    NORMAL_ASSIGNMENT shift and go to state 95
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 96
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 69

    (95) var_decl -> VAR var_spec .

    ARITHMETIC_OPERATOR reduce using rule 95 (var_decl -> VAR var_spec .)
    OR              reduce using rule 95 (var_decl -> VAR var_spec .)
    AND             reduce using rule 95 (var_decl -> VAR var_spec .)
    COMPARISON_OPERATOR reduce using rule 95 (var_decl -> VAR var_spec .)
    $end            reduce using rule 95 (var_decl -> VAR var_spec .)
    RPAREN          reduce using rule 95 (var_decl -> VAR var_spec .)
    RBRACKET        reduce using rule 95 (var_decl -> VAR var_spec .)
    INTEGER         reduce using rule 95 (var_decl -> VAR var_spec .)
    FLOAT           reduce using rule 95 (var_decl -> VAR var_spec .)
    STRING_LITERAL  reduce using rule 95 (var_decl -> VAR var_spec .)
    ID              reduce using rule 95 (var_decl -> VAR var_spec .)
    LPAREN          reduce using rule 95 (var_decl -> VAR var_spec .)
    NOT             reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_BOOL       reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_STRING     reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_INT        reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_INT8       reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_INT16      reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_INT32      reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_INT64      reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_UINT       reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_UINT8      reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_UINT16     reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_UINT32     reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_UINT64     reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_UINTPTR    reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_FLOAT32    reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_FLOAT64    reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_COMPLEX64  reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE_COMPLEX128 reduce using rule 95 (var_decl -> VAR var_spec .)
    CONST           reduce using rule 95 (var_decl -> VAR var_spec .)
    TYPE            reduce using rule 95 (var_decl -> VAR var_spec .)
    VAR             reduce using rule 95 (var_decl -> VAR var_spec .)
    LBRACKET        reduce using rule 95 (var_decl -> VAR var_spec .)
    STRUCT          reduce using rule 95 (var_decl -> VAR var_spec .)
    ASTERISKS       reduce using rule 95 (var_decl -> VAR var_spec .)
    FUNC            reduce using rule 95 (var_decl -> VAR var_spec .)
    INTERFACE       reduce using rule 95 (var_decl -> VAR var_spec .)
    MAP             reduce using rule 95 (var_decl -> VAR var_spec .)
    CHAN            reduce using rule 95 (var_decl -> VAR var_spec .)
    CHANNEL_OPERATOR reduce using rule 95 (var_decl -> VAR var_spec .)


state 70

    (96) var_decl -> VAR LPAREN . var_spec RPAREN
    (97) var_spec -> . identifier_list type
    (98) var_spec -> . identifier_list type NORMAL_ASSIGNMENT expression_list
    (99) var_spec -> . identifier_list NORMAL_ASSIGNMENT expression_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 63

    var_spec                       shift and go to state 97
    identifier_list                shift and go to state 71

state 71

    (97) var_spec -> identifier_list . type
    (98) var_spec -> identifier_list . type NORMAL_ASSIGNMENT expression_list
    (99) var_spec -> identifier_list . NORMAL_ASSIGNMENT expression_list
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    NORMAL_ASSIGNMENT shift and go to state 99
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 98
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 72

    (44) array_type -> LBRACKET expression . RBRACKET type
    (1) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression

    RBRACKET        shift and go to state 100
    ARITHMETIC_OPERATOR shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54
    COMPARISON_OPERATOR shift and go to state 55


state 73

    (45) slice_type -> LBRACKET RBRACKET . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 101
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 74

    (46) struct_type -> STRUCT LBRACE . RBRACE
    (47) struct_type -> STRUCT LBRACE . field_decl RBRACE
    (48) field_decl -> . identifier_list type string_lit
    (49) field_decl -> . identifier_list type
    (50) field_decl -> . embedded_field string_lit
    (51) field_decl -> . embedded_field
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list
    (54) embedded_field -> . ASTERISKS ID

    RBRACE          shift and go to state 102
    ID              shift and go to state 63
    ASTERISKS       shift and go to state 106

    field_decl                     shift and go to state 103
    identifier_list                shift and go to state 104
    embedded_field                 shift and go to state 105

state 75

    (56) pointer_type -> ASTERISKS type .

    ARITHMETIC_OPERATOR reduce using rule 56 (pointer_type -> ASTERISKS type .)
    OR              reduce using rule 56 (pointer_type -> ASTERISKS type .)
    AND             reduce using rule 56 (pointer_type -> ASTERISKS type .)
    COMPARISON_OPERATOR reduce using rule 56 (pointer_type -> ASTERISKS type .)
    $end            reduce using rule 56 (pointer_type -> ASTERISKS type .)
    RPAREN          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    RBRACKET        reduce using rule 56 (pointer_type -> ASTERISKS type .)
    INTEGER         reduce using rule 56 (pointer_type -> ASTERISKS type .)
    FLOAT           reduce using rule 56 (pointer_type -> ASTERISKS type .)
    STRING_LITERAL  reduce using rule 56 (pointer_type -> ASTERISKS type .)
    ID              reduce using rule 56 (pointer_type -> ASTERISKS type .)
    LPAREN          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    NOT             reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_BOOL       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_STRING     reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_INT        reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_INT8       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_INT16      reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_INT32      reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_INT64      reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINT       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINT8      reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINT16     reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINT32     reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINT64     reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_UINTPTR    reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_FLOAT32    reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_FLOAT64    reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_COMPLEX64  reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE_COMPLEX128 reduce using rule 56 (pointer_type -> ASTERISKS type .)
    CONST           reduce using rule 56 (pointer_type -> ASTERISKS type .)
    TYPE            reduce using rule 56 (pointer_type -> ASTERISKS type .)
    VAR             reduce using rule 56 (pointer_type -> ASTERISKS type .)
    LBRACKET        reduce using rule 56 (pointer_type -> ASTERISKS type .)
    STRUCT          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    ASTERISKS       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    FUNC            reduce using rule 56 (pointer_type -> ASTERISKS type .)
    INTERFACE       reduce using rule 56 (pointer_type -> ASTERISKS type .)
    MAP             reduce using rule 56 (pointer_type -> ASTERISKS type .)
    CHAN            reduce using rule 56 (pointer_type -> ASTERISKS type .)
    CHANNEL_OPERATOR reduce using rule 56 (pointer_type -> ASTERISKS type .)
    NORMAL_ASSIGNMENT reduce using rule 56 (pointer_type -> ASTERISKS type .)
    RBRACE          reduce using rule 56 (pointer_type -> ASTERISKS type .)
    COMMA           reduce using rule 56 (pointer_type -> ASTERISKS type .)


state 76

    (57) function_type -> FUNC signature .

    ARITHMETIC_OPERATOR reduce using rule 57 (function_type -> FUNC signature .)
    OR              reduce using rule 57 (function_type -> FUNC signature .)
    AND             reduce using rule 57 (function_type -> FUNC signature .)
    COMPARISON_OPERATOR reduce using rule 57 (function_type -> FUNC signature .)
    $end            reduce using rule 57 (function_type -> FUNC signature .)
    RPAREN          reduce using rule 57 (function_type -> FUNC signature .)
    RBRACKET        reduce using rule 57 (function_type -> FUNC signature .)
    INTEGER         reduce using rule 57 (function_type -> FUNC signature .)
    FLOAT           reduce using rule 57 (function_type -> FUNC signature .)
    STRING_LITERAL  reduce using rule 57 (function_type -> FUNC signature .)
    ID              reduce using rule 57 (function_type -> FUNC signature .)
    LPAREN          reduce using rule 57 (function_type -> FUNC signature .)
    NOT             reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_BOOL       reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_STRING     reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_INT        reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_INT8       reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_INT16      reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_INT32      reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_INT64      reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINT       reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINT8      reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINT16     reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINT32     reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINT64     reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_UINTPTR    reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_FLOAT32    reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_FLOAT64    reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_COMPLEX64  reduce using rule 57 (function_type -> FUNC signature .)
    TYPE_COMPLEX128 reduce using rule 57 (function_type -> FUNC signature .)
    CONST           reduce using rule 57 (function_type -> FUNC signature .)
    TYPE            reduce using rule 57 (function_type -> FUNC signature .)
    VAR             reduce using rule 57 (function_type -> FUNC signature .)
    LBRACKET        reduce using rule 57 (function_type -> FUNC signature .)
    STRUCT          reduce using rule 57 (function_type -> FUNC signature .)
    ASTERISKS       reduce using rule 57 (function_type -> FUNC signature .)
    FUNC            reduce using rule 57 (function_type -> FUNC signature .)
    INTERFACE       reduce using rule 57 (function_type -> FUNC signature .)
    MAP             reduce using rule 57 (function_type -> FUNC signature .)
    CHAN            reduce using rule 57 (function_type -> FUNC signature .)
    CHANNEL_OPERATOR reduce using rule 57 (function_type -> FUNC signature .)
    NORMAL_ASSIGNMENT reduce using rule 57 (function_type -> FUNC signature .)
    RBRACE          reduce using rule 57 (function_type -> FUNC signature .)
    COMMA           reduce using rule 57 (function_type -> FUNC signature .)


state 77

    (58) signature -> parameters .
    (59) signature -> parameters . result
    (60) result -> . parameters
    (61) result -> . type
    (62) result -> . LPAREN type RPAREN
    (63) parameters -> . LPAREN RPAREN
    (64) parameters -> . LPAREN parameter_list RPAREN
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TYPE_BOOL resolved as shift
  ! shift/reduce conflict for TYPE_STRING resolved as shift
  ! shift/reduce conflict for TYPE_INT resolved as shift
  ! shift/reduce conflict for TYPE_INT8 resolved as shift
  ! shift/reduce conflict for TYPE_INT16 resolved as shift
  ! shift/reduce conflict for TYPE_INT32 resolved as shift
  ! shift/reduce conflict for TYPE_INT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINT resolved as shift
  ! shift/reduce conflict for TYPE_UINT8 resolved as shift
  ! shift/reduce conflict for TYPE_UINT16 resolved as shift
  ! shift/reduce conflict for TYPE_UINT32 resolved as shift
  ! shift/reduce conflict for TYPE_UINT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINTPTR resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT32 resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX128 resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ASTERISKS resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for CHAN resolved as shift
  ! shift/reduce conflict for CHANNEL_OPERATOR resolved as shift
    ARITHMETIC_OPERATOR reduce using rule 58 (signature -> parameters .)
    OR              reduce using rule 58 (signature -> parameters .)
    AND             reduce using rule 58 (signature -> parameters .)
    COMPARISON_OPERATOR reduce using rule 58 (signature -> parameters .)
    $end            reduce using rule 58 (signature -> parameters .)
    RPAREN          reduce using rule 58 (signature -> parameters .)
    RBRACKET        reduce using rule 58 (signature -> parameters .)
    INTEGER         reduce using rule 58 (signature -> parameters .)
    FLOAT           reduce using rule 58 (signature -> parameters .)
    STRING_LITERAL  reduce using rule 58 (signature -> parameters .)
    ID              reduce using rule 58 (signature -> parameters .)
    NOT             reduce using rule 58 (signature -> parameters .)
    CONST           reduce using rule 58 (signature -> parameters .)
    TYPE            reduce using rule 58 (signature -> parameters .)
    VAR             reduce using rule 58 (signature -> parameters .)
    NORMAL_ASSIGNMENT reduce using rule 58 (signature -> parameters .)
    RBRACE          reduce using rule 58 (signature -> parameters .)
    COMMA           reduce using rule 58 (signature -> parameters .)
    LPAREN          shift and go to state 110
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

  ! LPAREN          [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_BOOL       [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_STRING     [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_INT        [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_INT8       [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_INT16      [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_INT32      [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_INT64      [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINT       [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINT8      [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINT16     [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINT32     [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINT64     [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_UINTPTR    [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_FLOAT32    [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_FLOAT64    [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 58 (signature -> parameters .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 58 (signature -> parameters .) ]
  ! LBRACKET        [ reduce using rule 58 (signature -> parameters .) ]
  ! STRUCT          [ reduce using rule 58 (signature -> parameters .) ]
  ! ASTERISKS       [ reduce using rule 58 (signature -> parameters .) ]
  ! FUNC            [ reduce using rule 58 (signature -> parameters .) ]
  ! INTERFACE       [ reduce using rule 58 (signature -> parameters .) ]
  ! MAP             [ reduce using rule 58 (signature -> parameters .) ]
  ! CHAN            [ reduce using rule 58 (signature -> parameters .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 58 (signature -> parameters .) ]

    parameters                     shift and go to state 107
    result                         shift and go to state 108
    type                           shift and go to state 109
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 78

    (63) parameters -> LPAREN . RPAREN
    (64) parameters -> LPAREN . parameter_list RPAREN
    (65) parameter_list -> . parameter_decl
    (66) parameter_list -> . parameter_decl COMMA parameter_list
    (67) parameter_decl -> . identifier_list
    (68) parameter_decl -> . identifier_list type
    (69) parameter_decl -> . ELLIPSIS type
    (70) parameter_decl -> . identifier_list ELLIPSIS type
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    RPAREN          shift and go to state 111
    ELLIPSIS        shift and go to state 115
    ID              shift and go to state 63

    parameter_list                 shift and go to state 112
    parameter_decl                 shift and go to state 113
    identifier_list                shift and go to state 114

state 79

    (71) interface_type -> INTERFACE LBRACE . method_spec RBRACE
    (72) method_spec -> . method_name signature
    (73) method_spec -> . interface_type_name
    (74) method_name -> . ID
    (75) interface_type_name -> . ID

    ID              shift and go to state 119

    method_spec                    shift and go to state 116
    method_name                    shift and go to state 117
    interface_type_name            shift and go to state 118

state 80

    (76) map_type -> MAP LBRACKET . key_type RBRACKET type
    (77) key_type -> . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    key_type                       shift and go to state 120
    type                           shift and go to state 121
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 81

    (78) channel_type -> CHAN type .

    ARITHMETIC_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    OR              reduce using rule 78 (channel_type -> CHAN type .)
    AND             reduce using rule 78 (channel_type -> CHAN type .)
    COMPARISON_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    $end            reduce using rule 78 (channel_type -> CHAN type .)
    RPAREN          reduce using rule 78 (channel_type -> CHAN type .)
    RBRACKET        reduce using rule 78 (channel_type -> CHAN type .)
    INTEGER         reduce using rule 78 (channel_type -> CHAN type .)
    FLOAT           reduce using rule 78 (channel_type -> CHAN type .)
    STRING_LITERAL  reduce using rule 78 (channel_type -> CHAN type .)
    ID              reduce using rule 78 (channel_type -> CHAN type .)
    LPAREN          reduce using rule 78 (channel_type -> CHAN type .)
    NOT             reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_BOOL       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_STRING     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT        reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT8       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT16      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT32      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT64      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT8      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT16     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT32     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT64     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINTPTR    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_FLOAT32    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_FLOAT64    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_COMPLEX64  reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_COMPLEX128 reduce using rule 78 (channel_type -> CHAN type .)
    CONST           reduce using rule 78 (channel_type -> CHAN type .)
    TYPE            reduce using rule 78 (channel_type -> CHAN type .)
    VAR             reduce using rule 78 (channel_type -> CHAN type .)
    LBRACKET        reduce using rule 78 (channel_type -> CHAN type .)
    STRUCT          reduce using rule 78 (channel_type -> CHAN type .)
    ASTERISKS       reduce using rule 78 (channel_type -> CHAN type .)
    FUNC            reduce using rule 78 (channel_type -> CHAN type .)
    INTERFACE       reduce using rule 78 (channel_type -> CHAN type .)
    MAP             reduce using rule 78 (channel_type -> CHAN type .)
    CHAN            reduce using rule 78 (channel_type -> CHAN type .)
    CHANNEL_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    NORMAL_ASSIGNMENT reduce using rule 78 (channel_type -> CHAN type .)
    RBRACE          reduce using rule 78 (channel_type -> CHAN type .)
    COMMA           reduce using rule 78 (channel_type -> CHAN type .)


state 82

    (79) channel_type -> CHAN CHANNEL_OPERATOR . type
    (80) channel_type -> CHANNEL_OPERATOR . CHAN type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    CHAN            shift and go to state 122
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 123
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 83

    (80) channel_type -> CHANNEL_OPERATOR CHAN . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 124
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 84

    (1) expression -> expression ARITHMETIC_OPERATOR expression .
    (1) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
    $end            reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    RPAREN          reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    RBRACKET        reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    INTEGER         reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    FLOAT           reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    STRING_LITERAL  reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    ID              reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    LPAREN          reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    NOT             reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_BOOL       reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_STRING     reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_INT        reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_INT8       reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_INT16      reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_INT32      reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_INT64      reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_UINT       reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_UINT8      reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_UINT16     reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_UINT32     reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_UINT64     reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_UINTPTR    reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_FLOAT32    reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_FLOAT64    reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_COMPLEX64  reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE_COMPLEX128 reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    CONST           reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    TYPE            reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    VAR             reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    LBRACKET        reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    STRUCT          reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    ASTERISKS       reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    FUNC            reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    INTERFACE       reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    MAP             reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    CHAN            reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    CHANNEL_OPERATOR reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .)
    ARITHMETIC_OPERATOR shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54
    COMPARISON_OPERATOR shift and go to state 55

  ! ARITHMETIC_OPERATOR [ reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! OR              [ reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! AND             [ reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 1 (expression -> expression ARITHMETIC_OPERATOR expression .) ]


state 85

    (9) expression -> expression OR expression .
    (1) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
    $end            reduce using rule 9 (expression -> expression OR expression .)
    RPAREN          reduce using rule 9 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 9 (expression -> expression OR expression .)
    INTEGER         reduce using rule 9 (expression -> expression OR expression .)
    FLOAT           reduce using rule 9 (expression -> expression OR expression .)
    STRING_LITERAL  reduce using rule 9 (expression -> expression OR expression .)
    ID              reduce using rule 9 (expression -> expression OR expression .)
    LPAREN          reduce using rule 9 (expression -> expression OR expression .)
    NOT             reduce using rule 9 (expression -> expression OR expression .)
    TYPE_BOOL       reduce using rule 9 (expression -> expression OR expression .)
    TYPE_STRING     reduce using rule 9 (expression -> expression OR expression .)
    TYPE_INT        reduce using rule 9 (expression -> expression OR expression .)
    TYPE_INT8       reduce using rule 9 (expression -> expression OR expression .)
    TYPE_INT16      reduce using rule 9 (expression -> expression OR expression .)
    TYPE_INT32      reduce using rule 9 (expression -> expression OR expression .)
    TYPE_INT64      reduce using rule 9 (expression -> expression OR expression .)
    TYPE_UINT       reduce using rule 9 (expression -> expression OR expression .)
    TYPE_UINT8      reduce using rule 9 (expression -> expression OR expression .)
    TYPE_UINT16     reduce using rule 9 (expression -> expression OR expression .)
    TYPE_UINT32     reduce using rule 9 (expression -> expression OR expression .)
    TYPE_UINT64     reduce using rule 9 (expression -> expression OR expression .)
    TYPE_UINTPTR    reduce using rule 9 (expression -> expression OR expression .)
    TYPE_FLOAT32    reduce using rule 9 (expression -> expression OR expression .)
    TYPE_FLOAT64    reduce using rule 9 (expression -> expression OR expression .)
    TYPE_COMPLEX64  reduce using rule 9 (expression -> expression OR expression .)
    TYPE_COMPLEX128 reduce using rule 9 (expression -> expression OR expression .)
    CONST           reduce using rule 9 (expression -> expression OR expression .)
    TYPE            reduce using rule 9 (expression -> expression OR expression .)
    VAR             reduce using rule 9 (expression -> expression OR expression .)
    LBRACKET        reduce using rule 9 (expression -> expression OR expression .)
    STRUCT          reduce using rule 9 (expression -> expression OR expression .)
    ASTERISKS       reduce using rule 9 (expression -> expression OR expression .)
    FUNC            reduce using rule 9 (expression -> expression OR expression .)
    INTERFACE       reduce using rule 9 (expression -> expression OR expression .)
    MAP             reduce using rule 9 (expression -> expression OR expression .)
    CHAN            reduce using rule 9 (expression -> expression OR expression .)
    CHANNEL_OPERATOR reduce using rule 9 (expression -> expression OR expression .)
    ARITHMETIC_OPERATOR shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54
    COMPARISON_OPERATOR shift and go to state 55

  ! ARITHMETIC_OPERATOR [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 9 (expression -> expression OR expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 9 (expression -> expression OR expression .) ]


state 86

    (10) expression -> expression AND expression .
    (1) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
    $end            reduce using rule 10 (expression -> expression AND expression .)
    RPAREN          reduce using rule 10 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 10 (expression -> expression AND expression .)
    INTEGER         reduce using rule 10 (expression -> expression AND expression .)
    FLOAT           reduce using rule 10 (expression -> expression AND expression .)
    STRING_LITERAL  reduce using rule 10 (expression -> expression AND expression .)
    ID              reduce using rule 10 (expression -> expression AND expression .)
    LPAREN          reduce using rule 10 (expression -> expression AND expression .)
    NOT             reduce using rule 10 (expression -> expression AND expression .)
    TYPE_BOOL       reduce using rule 10 (expression -> expression AND expression .)
    TYPE_STRING     reduce using rule 10 (expression -> expression AND expression .)
    TYPE_INT        reduce using rule 10 (expression -> expression AND expression .)
    TYPE_INT8       reduce using rule 10 (expression -> expression AND expression .)
    TYPE_INT16      reduce using rule 10 (expression -> expression AND expression .)
    TYPE_INT32      reduce using rule 10 (expression -> expression AND expression .)
    TYPE_INT64      reduce using rule 10 (expression -> expression AND expression .)
    TYPE_UINT       reduce using rule 10 (expression -> expression AND expression .)
    TYPE_UINT8      reduce using rule 10 (expression -> expression AND expression .)
    TYPE_UINT16     reduce using rule 10 (expression -> expression AND expression .)
    TYPE_UINT32     reduce using rule 10 (expression -> expression AND expression .)
    TYPE_UINT64     reduce using rule 10 (expression -> expression AND expression .)
    TYPE_UINTPTR    reduce using rule 10 (expression -> expression AND expression .)
    TYPE_FLOAT32    reduce using rule 10 (expression -> expression AND expression .)
    TYPE_FLOAT64    reduce using rule 10 (expression -> expression AND expression .)
    TYPE_COMPLEX64  reduce using rule 10 (expression -> expression AND expression .)
    TYPE_COMPLEX128 reduce using rule 10 (expression -> expression AND expression .)
    CONST           reduce using rule 10 (expression -> expression AND expression .)
    TYPE            reduce using rule 10 (expression -> expression AND expression .)
    VAR             reduce using rule 10 (expression -> expression AND expression .)
    LBRACKET        reduce using rule 10 (expression -> expression AND expression .)
    STRUCT          reduce using rule 10 (expression -> expression AND expression .)
    ASTERISKS       reduce using rule 10 (expression -> expression AND expression .)
    FUNC            reduce using rule 10 (expression -> expression AND expression .)
    INTERFACE       reduce using rule 10 (expression -> expression AND expression .)
    MAP             reduce using rule 10 (expression -> expression AND expression .)
    CHAN            reduce using rule 10 (expression -> expression AND expression .)
    CHANNEL_OPERATOR reduce using rule 10 (expression -> expression AND expression .)
    ARITHMETIC_OPERATOR shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54
    COMPARISON_OPERATOR shift and go to state 55

  ! ARITHMETIC_OPERATOR [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 10 (expression -> expression AND expression .) ]


state 87

    (12) expression -> expression COMPARISON_OPERATOR expression .
    (1) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
    $end            reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    RPAREN          reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    RBRACKET        reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    INTEGER         reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    FLOAT           reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    STRING_LITERAL  reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    ID              reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    LPAREN          reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    NOT             reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_BOOL       reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_STRING     reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_INT        reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_INT8       reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_INT16      reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_INT32      reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_INT64      reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_UINT       reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_UINT8      reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_UINT16     reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_UINT32     reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_UINT64     reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_UINTPTR    reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_FLOAT32    reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_FLOAT64    reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_COMPLEX64  reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE_COMPLEX128 reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    CONST           reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    TYPE            reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    VAR             reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    LBRACKET        reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    STRUCT          reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    ASTERISKS       reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    FUNC            reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    INTERFACE       reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    MAP             reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    CHAN            reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    CHANNEL_OPERATOR reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .)
    ARITHMETIC_OPERATOR shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54
    COMPARISON_OPERATOR shift and go to state 55

  ! ARITHMETIC_OPERATOR [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! OR              [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! AND             [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 12 (expression -> expression COMPARISON_OPERATOR expression .) ]


state 88

    (13) arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .
    (1) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
    $end            reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    RPAREN          reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    RBRACKET        reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    INTEGER         reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    FLOAT           reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    STRING_LITERAL  reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    ID              reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    LPAREN          reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    NOT             reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_BOOL       reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_STRING     reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_INT        reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_INT8       reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_INT16      reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_INT32      reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_INT64      reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_UINT       reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_UINT8      reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_UINT16     reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_UINT32     reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_UINT64     reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_UINTPTR    reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_FLOAT32    reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_FLOAT64    reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_COMPLEX64  reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE_COMPLEX128 reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    CONST           reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    TYPE            reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    VAR             reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    LBRACKET        reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    STRUCT          reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    ASTERISKS       reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    FUNC            reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    INTERFACE       reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    MAP             reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    CHAN            reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    CHANNEL_OPERATOR reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .)
    ARITHMETIC_OPERATOR shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54
    COMPARISON_OPERATOR shift and go to state 55

  ! ARITHMETIC_OPERATOR [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! OR              [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! AND             [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 13 (arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression .) ]


state 89

    (6) expression -> LPAREN expression RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    COMPARISON_OPERATOR reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_BOOL       reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_STRING     reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_INT        reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_INT8       reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_INT16      reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_INT32      reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_INT64      reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_UINT       reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_UINT8      reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_UINT16     reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_UINT32     reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_UINT64     reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_UINTPTR    reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_FLOAT32    reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_FLOAT64    reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_COMPLEX64  reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE_COMPLEX128 reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    STRUCT          reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    ASTERISKS       reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    INTERFACE       reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    MAP             reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    CHAN            reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    CHANNEL_OPERATOR reduce using rule 6 (expression -> LPAREN expression RPAREN .)


state 90

    (86) const_decl -> CONST LPAREN const_spec . RPAREN

    RPAREN          shift and go to state 125


state 91

    (87) const_spec -> identifier_list NORMAL_ASSIGNMENT . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression_list                shift and go to state 126
    expression                     shift and go to state 127
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 92

    (88) const_spec -> identifier_list type . NORMAL_ASSIGNMENT expression_list

    NORMAL_ASSIGNMENT shift and go to state 128


state 93

    (53) identifier_list -> ID COMMA . identifier_list
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 63

    identifier_list                shift and go to state 129

state 94

    (90) type_decl -> TYPE LPAREN type_spec . RPAREN

    RPAREN          shift and go to state 130


state 95

    (93) alias_decl -> ID NORMAL_ASSIGNMENT . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 131
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 96

    (94) type_def -> ID type .

    ARITHMETIC_OPERATOR reduce using rule 94 (type_def -> ID type .)
    OR              reduce using rule 94 (type_def -> ID type .)
    AND             reduce using rule 94 (type_def -> ID type .)
    COMPARISON_OPERATOR reduce using rule 94 (type_def -> ID type .)
    $end            reduce using rule 94 (type_def -> ID type .)
    RPAREN          reduce using rule 94 (type_def -> ID type .)
    RBRACKET        reduce using rule 94 (type_def -> ID type .)
    INTEGER         reduce using rule 94 (type_def -> ID type .)
    FLOAT           reduce using rule 94 (type_def -> ID type .)
    STRING_LITERAL  reduce using rule 94 (type_def -> ID type .)
    ID              reduce using rule 94 (type_def -> ID type .)
    LPAREN          reduce using rule 94 (type_def -> ID type .)
    NOT             reduce using rule 94 (type_def -> ID type .)
    TYPE_BOOL       reduce using rule 94 (type_def -> ID type .)
    TYPE_STRING     reduce using rule 94 (type_def -> ID type .)
    TYPE_INT        reduce using rule 94 (type_def -> ID type .)
    TYPE_INT8       reduce using rule 94 (type_def -> ID type .)
    TYPE_INT16      reduce using rule 94 (type_def -> ID type .)
    TYPE_INT32      reduce using rule 94 (type_def -> ID type .)
    TYPE_INT64      reduce using rule 94 (type_def -> ID type .)
    TYPE_UINT       reduce using rule 94 (type_def -> ID type .)
    TYPE_UINT8      reduce using rule 94 (type_def -> ID type .)
    TYPE_UINT16     reduce using rule 94 (type_def -> ID type .)
    TYPE_UINT32     reduce using rule 94 (type_def -> ID type .)
    TYPE_UINT64     reduce using rule 94 (type_def -> ID type .)
    TYPE_UINTPTR    reduce using rule 94 (type_def -> ID type .)
    TYPE_FLOAT32    reduce using rule 94 (type_def -> ID type .)
    TYPE_FLOAT64    reduce using rule 94 (type_def -> ID type .)
    TYPE_COMPLEX64  reduce using rule 94 (type_def -> ID type .)
    TYPE_COMPLEX128 reduce using rule 94 (type_def -> ID type .)
    CONST           reduce using rule 94 (type_def -> ID type .)
    TYPE            reduce using rule 94 (type_def -> ID type .)
    VAR             reduce using rule 94 (type_def -> ID type .)
    LBRACKET        reduce using rule 94 (type_def -> ID type .)
    STRUCT          reduce using rule 94 (type_def -> ID type .)
    ASTERISKS       reduce using rule 94 (type_def -> ID type .)
    FUNC            reduce using rule 94 (type_def -> ID type .)
    INTERFACE       reduce using rule 94 (type_def -> ID type .)
    MAP             reduce using rule 94 (type_def -> ID type .)
    CHAN            reduce using rule 94 (type_def -> ID type .)
    CHANNEL_OPERATOR reduce using rule 94 (type_def -> ID type .)


state 97

    (96) var_decl -> VAR LPAREN var_spec . RPAREN

    RPAREN          shift and go to state 132


state 98

    (97) var_spec -> identifier_list type .
    (98) var_spec -> identifier_list type . NORMAL_ASSIGNMENT expression_list

    ARITHMETIC_OPERATOR reduce using rule 97 (var_spec -> identifier_list type .)
    OR              reduce using rule 97 (var_spec -> identifier_list type .)
    AND             reduce using rule 97 (var_spec -> identifier_list type .)
    COMPARISON_OPERATOR reduce using rule 97 (var_spec -> identifier_list type .)
    $end            reduce using rule 97 (var_spec -> identifier_list type .)
    RPAREN          reduce using rule 97 (var_spec -> identifier_list type .)
    RBRACKET        reduce using rule 97 (var_spec -> identifier_list type .)
    INTEGER         reduce using rule 97 (var_spec -> identifier_list type .)
    FLOAT           reduce using rule 97 (var_spec -> identifier_list type .)
    STRING_LITERAL  reduce using rule 97 (var_spec -> identifier_list type .)
    ID              reduce using rule 97 (var_spec -> identifier_list type .)
    LPAREN          reduce using rule 97 (var_spec -> identifier_list type .)
    NOT             reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_BOOL       reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_STRING     reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_INT        reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_INT8       reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_INT16      reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_INT32      reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_INT64      reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_UINT       reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_UINT8      reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_UINT16     reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_UINT32     reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_UINT64     reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_UINTPTR    reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_FLOAT32    reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_FLOAT64    reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_COMPLEX64  reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE_COMPLEX128 reduce using rule 97 (var_spec -> identifier_list type .)
    CONST           reduce using rule 97 (var_spec -> identifier_list type .)
    TYPE            reduce using rule 97 (var_spec -> identifier_list type .)
    VAR             reduce using rule 97 (var_spec -> identifier_list type .)
    LBRACKET        reduce using rule 97 (var_spec -> identifier_list type .)
    STRUCT          reduce using rule 97 (var_spec -> identifier_list type .)
    ASTERISKS       reduce using rule 97 (var_spec -> identifier_list type .)
    FUNC            reduce using rule 97 (var_spec -> identifier_list type .)
    INTERFACE       reduce using rule 97 (var_spec -> identifier_list type .)
    MAP             reduce using rule 97 (var_spec -> identifier_list type .)
    CHAN            reduce using rule 97 (var_spec -> identifier_list type .)
    CHANNEL_OPERATOR reduce using rule 97 (var_spec -> identifier_list type .)
    NORMAL_ASSIGNMENT shift and go to state 133


state 99

    (99) var_spec -> identifier_list NORMAL_ASSIGNMENT . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    expression_list                shift and go to state 134
    expression                     shift and go to state 127
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 100

    (44) array_type -> LBRACKET expression RBRACKET . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 135
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 101

    (45) slice_type -> LBRACKET RBRACKET type .

    ARITHMETIC_OPERATOR reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    OR              reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    AND             reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    COMPARISON_OPERATOR reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    $end            reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    RPAREN          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    RBRACKET        reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    INTEGER         reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    FLOAT           reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    STRING_LITERAL  reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    ID              reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    LPAREN          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    NOT             reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_BOOL       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_STRING     reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_INT        reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_INT8       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_INT16      reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_INT32      reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_INT64      reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINT       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINT8      reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINT16     reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINT32     reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINT64     reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_UINTPTR    reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_FLOAT32    reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_FLOAT64    reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_COMPLEX64  reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE_COMPLEX128 reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    CONST           reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    TYPE            reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    VAR             reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    LBRACKET        reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    STRUCT          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    ASTERISKS       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    FUNC            reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    INTERFACE       reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    MAP             reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    CHAN            reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    CHANNEL_OPERATOR reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    NORMAL_ASSIGNMENT reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    RBRACE          reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)
    COMMA           reduce using rule 45 (slice_type -> LBRACKET RBRACKET type .)


state 102

    (46) struct_type -> STRUCT LBRACE RBRACE .

    ARITHMETIC_OPERATOR reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    OR              reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    AND             reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    COMPARISON_OPERATOR reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    $end            reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    RPAREN          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    RBRACKET        reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    INTEGER         reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    FLOAT           reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    ID              reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    LPAREN          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    NOT             reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_BOOL       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_STRING     reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_INT        reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_INT8       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_INT16      reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_INT32      reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_INT64      reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINT       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINT8      reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINT16     reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINT32     reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINT64     reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_UINTPTR    reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_FLOAT32    reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_FLOAT64    reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_COMPLEX64  reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE_COMPLEX128 reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    CONST           reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    TYPE            reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    VAR             reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    LBRACKET        reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    STRUCT          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    ASTERISKS       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    FUNC            reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    INTERFACE       reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    MAP             reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    CHAN            reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    CHANNEL_OPERATOR reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    NORMAL_ASSIGNMENT reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    RBRACE          reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)
    COMMA           reduce using rule 46 (struct_type -> STRUCT LBRACE RBRACE .)


state 103

    (47) struct_type -> STRUCT LBRACE field_decl . RBRACE

    RBRACE          shift and go to state 136


state 104

    (48) field_decl -> identifier_list . type string_lit
    (49) field_decl -> identifier_list . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 137
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 105

    (50) field_decl -> embedded_field . string_lit
    (51) field_decl -> embedded_field .
    (55) string_lit -> . STRING_LITERAL

    RBRACE          reduce using rule 51 (field_decl -> embedded_field .)
    STRING_LITERAL  shift and go to state 139

    string_lit                     shift and go to state 138

state 106

    (54) embedded_field -> ASTERISKS . ID

    ID              shift and go to state 140


state 107

    (60) result -> parameters .

    ARITHMETIC_OPERATOR reduce using rule 60 (result -> parameters .)
    OR              reduce using rule 60 (result -> parameters .)
    AND             reduce using rule 60 (result -> parameters .)
    COMPARISON_OPERATOR reduce using rule 60 (result -> parameters .)
    $end            reduce using rule 60 (result -> parameters .)
    RPAREN          reduce using rule 60 (result -> parameters .)
    RBRACKET        reduce using rule 60 (result -> parameters .)
    INTEGER         reduce using rule 60 (result -> parameters .)
    FLOAT           reduce using rule 60 (result -> parameters .)
    STRING_LITERAL  reduce using rule 60 (result -> parameters .)
    ID              reduce using rule 60 (result -> parameters .)
    LPAREN          reduce using rule 60 (result -> parameters .)
    NOT             reduce using rule 60 (result -> parameters .)
    TYPE_BOOL       reduce using rule 60 (result -> parameters .)
    TYPE_STRING     reduce using rule 60 (result -> parameters .)
    TYPE_INT        reduce using rule 60 (result -> parameters .)
    TYPE_INT8       reduce using rule 60 (result -> parameters .)
    TYPE_INT16      reduce using rule 60 (result -> parameters .)
    TYPE_INT32      reduce using rule 60 (result -> parameters .)
    TYPE_INT64      reduce using rule 60 (result -> parameters .)
    TYPE_UINT       reduce using rule 60 (result -> parameters .)
    TYPE_UINT8      reduce using rule 60 (result -> parameters .)
    TYPE_UINT16     reduce using rule 60 (result -> parameters .)
    TYPE_UINT32     reduce using rule 60 (result -> parameters .)
    TYPE_UINT64     reduce using rule 60 (result -> parameters .)
    TYPE_UINTPTR    reduce using rule 60 (result -> parameters .)
    TYPE_FLOAT32    reduce using rule 60 (result -> parameters .)
    TYPE_FLOAT64    reduce using rule 60 (result -> parameters .)
    TYPE_COMPLEX64  reduce using rule 60 (result -> parameters .)
    TYPE_COMPLEX128 reduce using rule 60 (result -> parameters .)
    CONST           reduce using rule 60 (result -> parameters .)
    TYPE            reduce using rule 60 (result -> parameters .)
    VAR             reduce using rule 60 (result -> parameters .)
    LBRACKET        reduce using rule 60 (result -> parameters .)
    STRUCT          reduce using rule 60 (result -> parameters .)
    ASTERISKS       reduce using rule 60 (result -> parameters .)
    FUNC            reduce using rule 60 (result -> parameters .)
    INTERFACE       reduce using rule 60 (result -> parameters .)
    MAP             reduce using rule 60 (result -> parameters .)
    CHAN            reduce using rule 60 (result -> parameters .)
    CHANNEL_OPERATOR reduce using rule 60 (result -> parameters .)
    NORMAL_ASSIGNMENT reduce using rule 60 (result -> parameters .)
    RBRACE          reduce using rule 60 (result -> parameters .)
    COMMA           reduce using rule 60 (result -> parameters .)


state 108

    (59) signature -> parameters result .

    ARITHMETIC_OPERATOR reduce using rule 59 (signature -> parameters result .)
    OR              reduce using rule 59 (signature -> parameters result .)
    AND             reduce using rule 59 (signature -> parameters result .)
    COMPARISON_OPERATOR reduce using rule 59 (signature -> parameters result .)
    $end            reduce using rule 59 (signature -> parameters result .)
    RPAREN          reduce using rule 59 (signature -> parameters result .)
    RBRACKET        reduce using rule 59 (signature -> parameters result .)
    INTEGER         reduce using rule 59 (signature -> parameters result .)
    FLOAT           reduce using rule 59 (signature -> parameters result .)
    STRING_LITERAL  reduce using rule 59 (signature -> parameters result .)
    ID              reduce using rule 59 (signature -> parameters result .)
    LPAREN          reduce using rule 59 (signature -> parameters result .)
    NOT             reduce using rule 59 (signature -> parameters result .)
    TYPE_BOOL       reduce using rule 59 (signature -> parameters result .)
    TYPE_STRING     reduce using rule 59 (signature -> parameters result .)
    TYPE_INT        reduce using rule 59 (signature -> parameters result .)
    TYPE_INT8       reduce using rule 59 (signature -> parameters result .)
    TYPE_INT16      reduce using rule 59 (signature -> parameters result .)
    TYPE_INT32      reduce using rule 59 (signature -> parameters result .)
    TYPE_INT64      reduce using rule 59 (signature -> parameters result .)
    TYPE_UINT       reduce using rule 59 (signature -> parameters result .)
    TYPE_UINT8      reduce using rule 59 (signature -> parameters result .)
    TYPE_UINT16     reduce using rule 59 (signature -> parameters result .)
    TYPE_UINT32     reduce using rule 59 (signature -> parameters result .)
    TYPE_UINT64     reduce using rule 59 (signature -> parameters result .)
    TYPE_UINTPTR    reduce using rule 59 (signature -> parameters result .)
    TYPE_FLOAT32    reduce using rule 59 (signature -> parameters result .)
    TYPE_FLOAT64    reduce using rule 59 (signature -> parameters result .)
    TYPE_COMPLEX64  reduce using rule 59 (signature -> parameters result .)
    TYPE_COMPLEX128 reduce using rule 59 (signature -> parameters result .)
    CONST           reduce using rule 59 (signature -> parameters result .)
    TYPE            reduce using rule 59 (signature -> parameters result .)
    VAR             reduce using rule 59 (signature -> parameters result .)
    LBRACKET        reduce using rule 59 (signature -> parameters result .)
    STRUCT          reduce using rule 59 (signature -> parameters result .)
    ASTERISKS       reduce using rule 59 (signature -> parameters result .)
    FUNC            reduce using rule 59 (signature -> parameters result .)
    INTERFACE       reduce using rule 59 (signature -> parameters result .)
    MAP             reduce using rule 59 (signature -> parameters result .)
    CHAN            reduce using rule 59 (signature -> parameters result .)
    CHANNEL_OPERATOR reduce using rule 59 (signature -> parameters result .)
    NORMAL_ASSIGNMENT reduce using rule 59 (signature -> parameters result .)
    RBRACE          reduce using rule 59 (signature -> parameters result .)
    COMMA           reduce using rule 59 (signature -> parameters result .)


state 109

    (61) result -> type .

    ARITHMETIC_OPERATOR reduce using rule 61 (result -> type .)
    OR              reduce using rule 61 (result -> type .)
    AND             reduce using rule 61 (result -> type .)
    COMPARISON_OPERATOR reduce using rule 61 (result -> type .)
    $end            reduce using rule 61 (result -> type .)
    RPAREN          reduce using rule 61 (result -> type .)
    RBRACKET        reduce using rule 61 (result -> type .)
    INTEGER         reduce using rule 61 (result -> type .)
    FLOAT           reduce using rule 61 (result -> type .)
    STRING_LITERAL  reduce using rule 61 (result -> type .)
    ID              reduce using rule 61 (result -> type .)
    LPAREN          reduce using rule 61 (result -> type .)
    NOT             reduce using rule 61 (result -> type .)
    TYPE_BOOL       reduce using rule 61 (result -> type .)
    TYPE_STRING     reduce using rule 61 (result -> type .)
    TYPE_INT        reduce using rule 61 (result -> type .)
    TYPE_INT8       reduce using rule 61 (result -> type .)
    TYPE_INT16      reduce using rule 61 (result -> type .)
    TYPE_INT32      reduce using rule 61 (result -> type .)
    TYPE_INT64      reduce using rule 61 (result -> type .)
    TYPE_UINT       reduce using rule 61 (result -> type .)
    TYPE_UINT8      reduce using rule 61 (result -> type .)
    TYPE_UINT16     reduce using rule 61 (result -> type .)
    TYPE_UINT32     reduce using rule 61 (result -> type .)
    TYPE_UINT64     reduce using rule 61 (result -> type .)
    TYPE_UINTPTR    reduce using rule 61 (result -> type .)
    TYPE_FLOAT32    reduce using rule 61 (result -> type .)
    TYPE_FLOAT64    reduce using rule 61 (result -> type .)
    TYPE_COMPLEX64  reduce using rule 61 (result -> type .)
    TYPE_COMPLEX128 reduce using rule 61 (result -> type .)
    CONST           reduce using rule 61 (result -> type .)
    TYPE            reduce using rule 61 (result -> type .)
    VAR             reduce using rule 61 (result -> type .)
    LBRACKET        reduce using rule 61 (result -> type .)
    STRUCT          reduce using rule 61 (result -> type .)
    ASTERISKS       reduce using rule 61 (result -> type .)
    FUNC            reduce using rule 61 (result -> type .)
    INTERFACE       reduce using rule 61 (result -> type .)
    MAP             reduce using rule 61 (result -> type .)
    CHAN            reduce using rule 61 (result -> type .)
    CHANNEL_OPERATOR reduce using rule 61 (result -> type .)
    NORMAL_ASSIGNMENT reduce using rule 61 (result -> type .)
    RBRACE          reduce using rule 61 (result -> type .)
    COMMA           reduce using rule 61 (result -> type .)


state 110

    (62) result -> LPAREN . type RPAREN
    (63) parameters -> LPAREN . RPAREN
    (64) parameters -> LPAREN . parameter_list RPAREN
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (65) parameter_list -> . parameter_decl
    (66) parameter_list -> . parameter_decl COMMA parameter_list
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (67) parameter_decl -> . identifier_list
    (68) parameter_decl -> . identifier_list type
    (69) parameter_decl -> . ELLIPSIS type
    (70) parameter_decl -> . identifier_list ELLIPSIS type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    RPAREN          shift and go to state 111
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    ELLIPSIS        shift and go to state 115
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51
    ID              shift and go to state 63

    type                           shift and go to state 141
    parameter_list                 shift and go to state 112
    type_lit                       shift and go to state 29
    parameter_decl                 shift and go to state 113
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40
    identifier_list                shift and go to state 114

state 111

    (63) parameters -> LPAREN RPAREN .

    LPAREN          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_BOOL       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_STRING     reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_INT        reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_INT8       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_INT16      reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_INT32      reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_INT64      reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINT       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINT8      reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINT16     reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINT32     reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINT64     reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_UINTPTR    reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_FLOAT32    reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_FLOAT64    reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_COMPLEX64  reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE_COMPLEX128 reduce using rule 63 (parameters -> LPAREN RPAREN .)
    LBRACKET        reduce using rule 63 (parameters -> LPAREN RPAREN .)
    STRUCT          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    ASTERISKS       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    FUNC            reduce using rule 63 (parameters -> LPAREN RPAREN .)
    INTERFACE       reduce using rule 63 (parameters -> LPAREN RPAREN .)
    MAP             reduce using rule 63 (parameters -> LPAREN RPAREN .)
    CHAN            reduce using rule 63 (parameters -> LPAREN RPAREN .)
    CHANNEL_OPERATOR reduce using rule 63 (parameters -> LPAREN RPAREN .)
    ARITHMETIC_OPERATOR reduce using rule 63 (parameters -> LPAREN RPAREN .)
    OR              reduce using rule 63 (parameters -> LPAREN RPAREN .)
    AND             reduce using rule 63 (parameters -> LPAREN RPAREN .)
    COMPARISON_OPERATOR reduce using rule 63 (parameters -> LPAREN RPAREN .)
    $end            reduce using rule 63 (parameters -> LPAREN RPAREN .)
    RPAREN          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 63 (parameters -> LPAREN RPAREN .)
    INTEGER         reduce using rule 63 (parameters -> LPAREN RPAREN .)
    FLOAT           reduce using rule 63 (parameters -> LPAREN RPAREN .)
    STRING_LITERAL  reduce using rule 63 (parameters -> LPAREN RPAREN .)
    ID              reduce using rule 63 (parameters -> LPAREN RPAREN .)
    NOT             reduce using rule 63 (parameters -> LPAREN RPAREN .)
    CONST           reduce using rule 63 (parameters -> LPAREN RPAREN .)
    TYPE            reduce using rule 63 (parameters -> LPAREN RPAREN .)
    VAR             reduce using rule 63 (parameters -> LPAREN RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 63 (parameters -> LPAREN RPAREN .)
    RBRACE          reduce using rule 63 (parameters -> LPAREN RPAREN .)
    COMMA           reduce using rule 63 (parameters -> LPAREN RPAREN .)


state 112

    (64) parameters -> LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 142


state 113

    (65) parameter_list -> parameter_decl .
    (66) parameter_list -> parameter_decl . COMMA parameter_list

    RPAREN          reduce using rule 65 (parameter_list -> parameter_decl .)
    COMMA           shift and go to state 143


state 114

    (67) parameter_decl -> identifier_list .
    (68) parameter_decl -> identifier_list . type
    (70) parameter_decl -> identifier_list . ELLIPSIS type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    COMMA           reduce using rule 67 (parameter_decl -> identifier_list .)
    RPAREN          reduce using rule 67 (parameter_decl -> identifier_list .)
    ELLIPSIS        shift and go to state 145
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 144
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 115

    (69) parameter_decl -> ELLIPSIS . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 146
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 116

    (71) interface_type -> INTERFACE LBRACE method_spec . RBRACE

    RBRACE          shift and go to state 147


state 117

    (72) method_spec -> method_name . signature
    (58) signature -> . parameters
    (59) signature -> . parameters result
    (63) parameters -> . LPAREN RPAREN
    (64) parameters -> . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 78

    signature                      shift and go to state 148
    parameters                     shift and go to state 77

state 118

    (73) method_spec -> interface_type_name .

    RBRACE          reduce using rule 73 (method_spec -> interface_type_name .)


state 119

    (74) method_name -> ID .
    (75) interface_type_name -> ID .

    LPAREN          reduce using rule 74 (method_name -> ID .)
    RBRACE          reduce using rule 75 (interface_type_name -> ID .)


state 120

    (76) map_type -> MAP LBRACKET key_type . RBRACKET type

    RBRACKET        shift and go to state 149


state 121

    (77) key_type -> type .

    RBRACKET        reduce using rule 77 (key_type -> type .)


state 122

    (80) channel_type -> CHANNEL_OPERATOR CHAN . type
    (78) channel_type -> CHAN . type
    (79) channel_type -> CHAN . CHANNEL_OPERATOR type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    CHANNEL_OPERATOR shift and go to state 82
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50

    type                           shift and go to state 150
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 123

    (79) channel_type -> CHAN CHANNEL_OPERATOR type .

    ARITHMETIC_OPERATOR reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    OR              reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    AND             reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    COMPARISON_OPERATOR reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    $end            reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    RPAREN          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    RBRACKET        reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    INTEGER         reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    FLOAT           reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    STRING_LITERAL  reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    ID              reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    LPAREN          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    NOT             reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_BOOL       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_STRING     reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_INT        reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_INT8       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_INT16      reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_INT32      reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_INT64      reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINT       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINT8      reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINT16     reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINT32     reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINT64     reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_UINTPTR    reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_FLOAT32    reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_FLOAT64    reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_COMPLEX64  reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE_COMPLEX128 reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    CONST           reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    TYPE            reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    VAR             reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    LBRACKET        reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    STRUCT          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    ASTERISKS       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    FUNC            reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    INTERFACE       reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    MAP             reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    CHAN            reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    CHANNEL_OPERATOR reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    NORMAL_ASSIGNMENT reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    RBRACE          reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)
    COMMA           reduce using rule 79 (channel_type -> CHAN CHANNEL_OPERATOR type .)


state 124

    (80) channel_type -> CHANNEL_OPERATOR CHAN type .

    ARITHMETIC_OPERATOR reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    OR              reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    AND             reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    COMPARISON_OPERATOR reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    $end            reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    RPAREN          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    RBRACKET        reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    INTEGER         reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    FLOAT           reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    STRING_LITERAL  reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    ID              reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    LPAREN          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    NOT             reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_BOOL       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_STRING     reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_INT        reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_INT8       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_INT16      reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_INT32      reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_INT64      reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINT       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINT8      reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINT16     reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINT32     reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINT64     reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_UINTPTR    reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_FLOAT32    reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_FLOAT64    reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_COMPLEX64  reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE_COMPLEX128 reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    CONST           reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    TYPE            reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    VAR             reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    LBRACKET        reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    STRUCT          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    ASTERISKS       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    FUNC            reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    INTERFACE       reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    MAP             reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    CHAN            reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    CHANNEL_OPERATOR reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    NORMAL_ASSIGNMENT reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    RBRACE          reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)
    COMMA           reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .)


state 125

    (86) const_decl -> CONST LPAREN const_spec RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    OR              reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    AND             reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    COMPARISON_OPERATOR reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    $end            reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    RPAREN          reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    RBRACKET        reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    INTEGER         reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    FLOAT           reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    STRING_LITERAL  reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    ID              reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    LPAREN          reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    NOT             reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_BOOL       reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_STRING     reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_INT        reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_INT8       reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_INT16      reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_INT32      reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_INT64      reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINT       reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINT8      reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINT16     reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINT32     reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINT64     reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_UINTPTR    reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_FLOAT32    reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_FLOAT64    reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_COMPLEX64  reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE_COMPLEX128 reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    CONST           reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    TYPE            reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    VAR             reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    LBRACKET        reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    STRUCT          reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    ASTERISKS       reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    FUNC            reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    INTERFACE       reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    MAP             reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    CHAN            reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)
    CHANNEL_OPERATOR reduce using rule 86 (const_decl -> CONST LPAREN const_spec RPAREN .)


state 126

    (87) const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .

    ARITHMETIC_OPERATOR reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    OR              reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    AND             reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    COMPARISON_OPERATOR reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    $end            reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RPAREN          reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RBRACKET        reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    INTEGER         reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    FLOAT           reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    STRING_LITERAL  reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    ID              reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    LPAREN          reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    NOT             reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_BOOL       reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_STRING     reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT        reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT8       reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT16      reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT32      reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT64      reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT       reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT8      reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT16     reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT32     reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT64     reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINTPTR    reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT32    reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT64    reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX64  reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX128 reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CONST           reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE            reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    VAR             reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    LBRACKET        reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    STRUCT          reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    ASTERISKS       reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    FUNC            reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    INTERFACE       reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    MAP             reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CHAN            reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CHANNEL_OPERATOR reduce using rule 87 (const_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)


state 127

    (7) expression_list -> expression .
    (8) expression_list -> expression . expression_list
    (1) expression -> expression . ARITHMETIC_OPERATOR expression
    (9) expression -> expression . OR expression
    (10) expression -> expression . AND expression
    (12) expression -> expression . COMPARISON_OPERATOR expression
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

  ! shift/reduce conflict for ARITHMETIC_OPERATOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for COMPARISON_OPERATOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TYPE_BOOL resolved as shift
  ! shift/reduce conflict for TYPE_STRING resolved as shift
  ! shift/reduce conflict for TYPE_INT resolved as shift
  ! shift/reduce conflict for TYPE_INT8 resolved as shift
  ! shift/reduce conflict for TYPE_INT16 resolved as shift
  ! shift/reduce conflict for TYPE_INT32 resolved as shift
  ! shift/reduce conflict for TYPE_INT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINT resolved as shift
  ! shift/reduce conflict for TYPE_UINT8 resolved as shift
  ! shift/reduce conflict for TYPE_UINT16 resolved as shift
  ! shift/reduce conflict for TYPE_UINT32 resolved as shift
  ! shift/reduce conflict for TYPE_UINT64 resolved as shift
  ! shift/reduce conflict for TYPE_UINTPTR resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT32 resolved as shift
  ! shift/reduce conflict for TYPE_FLOAT64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX64 resolved as shift
  ! shift/reduce conflict for TYPE_COMPLEX128 resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ASTERISKS resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for CHAN resolved as shift
  ! shift/reduce conflict for CHANNEL_OPERATOR resolved as shift
    $end            reduce using rule 7 (expression_list -> expression .)
    RPAREN          reduce using rule 7 (expression_list -> expression .)
    RBRACKET        reduce using rule 7 (expression_list -> expression .)
    ARITHMETIC_OPERATOR shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54
    COMPARISON_OPERATOR shift and go to state 55
    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

  ! ARITHMETIC_OPERATOR [ reduce using rule 7 (expression_list -> expression .) ]
  ! OR              [ reduce using rule 7 (expression_list -> expression .) ]
  ! AND             [ reduce using rule 7 (expression_list -> expression .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 7 (expression_list -> expression .) ]
  ! INTEGER         [ reduce using rule 7 (expression_list -> expression .) ]
  ! FLOAT           [ reduce using rule 7 (expression_list -> expression .) ]
  ! STRING_LITERAL  [ reduce using rule 7 (expression_list -> expression .) ]
  ! ID              [ reduce using rule 7 (expression_list -> expression .) ]
  ! LPAREN          [ reduce using rule 7 (expression_list -> expression .) ]
  ! NOT             [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_BOOL       [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_STRING     [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_INT        [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_INT8       [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_INT16      [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_INT32      [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_INT64      [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINT       [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINT8      [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINT16     [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINT32     [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINT64     [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_UINTPTR    [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_FLOAT32    [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_FLOAT64    [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 7 (expression_list -> expression .) ]
  ! CONST           [ reduce using rule 7 (expression_list -> expression .) ]
  ! TYPE            [ reduce using rule 7 (expression_list -> expression .) ]
  ! VAR             [ reduce using rule 7 (expression_list -> expression .) ]
  ! LBRACKET        [ reduce using rule 7 (expression_list -> expression .) ]
  ! STRUCT          [ reduce using rule 7 (expression_list -> expression .) ]
  ! ASTERISKS       [ reduce using rule 7 (expression_list -> expression .) ]
  ! FUNC            [ reduce using rule 7 (expression_list -> expression .) ]
  ! INTERFACE       [ reduce using rule 7 (expression_list -> expression .) ]
  ! MAP             [ reduce using rule 7 (expression_list -> expression .) ]
  ! CHAN            [ reduce using rule 7 (expression_list -> expression .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 7 (expression_list -> expression .) ]

    expression                     shift and go to state 127
    expression_list                shift and go to state 151
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    type                           shift and go to state 10
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 128

    (88) const_spec -> identifier_list type NORMAL_ASSIGNMENT . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 10
    expression_list                shift and go to state 152
    expression                     shift and go to state 127
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 129

    (53) identifier_list -> ID COMMA identifier_list .

    NORMAL_ASSIGNMENT reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_BOOL       reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_STRING     reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_INT        reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_INT8       reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_INT16      reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_INT32      reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_INT64      reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINT       reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINT8      reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINT16     reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINT32     reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINT64     reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_UINTPTR    reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_FLOAT32    reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_FLOAT64    reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_COMPLEX64  reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    TYPE_COMPLEX128 reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    LBRACKET        reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    STRUCT          reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    ASTERISKS       reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    FUNC            reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    INTERFACE       reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    MAP             reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    CHAN            reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    CHANNEL_OPERATOR reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    ELLIPSIS        reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    COMMA           reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)
    RPAREN          reduce using rule 53 (identifier_list -> ID COMMA identifier_list .)


state 130

    (90) type_decl -> TYPE LPAREN type_spec RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    OR              reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    AND             reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    COMPARISON_OPERATOR reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    $end            reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    RPAREN          reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    RBRACKET        reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    INTEGER         reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    FLOAT           reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    STRING_LITERAL  reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    ID              reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    LPAREN          reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    NOT             reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_BOOL       reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_STRING     reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_INT        reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_INT8       reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_INT16      reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_INT32      reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_INT64      reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINT       reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINT8      reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINT16     reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINT32     reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINT64     reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_UINTPTR    reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_FLOAT32    reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_FLOAT64    reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_COMPLEX64  reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE_COMPLEX128 reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    CONST           reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    TYPE            reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    VAR             reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    LBRACKET        reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    STRUCT          reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    ASTERISKS       reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    FUNC            reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    INTERFACE       reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    MAP             reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    CHAN            reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)
    CHANNEL_OPERATOR reduce using rule 90 (type_decl -> TYPE LPAREN type_spec RPAREN .)


state 131

    (93) alias_decl -> ID NORMAL_ASSIGNMENT type .

    ARITHMETIC_OPERATOR reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    OR              reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    AND             reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    COMPARISON_OPERATOR reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    $end            reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    RPAREN          reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    RBRACKET        reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    INTEGER         reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    FLOAT           reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    STRING_LITERAL  reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    ID              reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    LPAREN          reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    NOT             reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_BOOL       reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_STRING     reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_INT        reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_INT8       reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_INT16      reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_INT32      reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_INT64      reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINT       reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINT8      reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINT16     reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINT32     reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINT64     reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_UINTPTR    reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_FLOAT32    reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_FLOAT64    reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_COMPLEX64  reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE_COMPLEX128 reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    CONST           reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    TYPE            reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    VAR             reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    LBRACKET        reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    STRUCT          reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    ASTERISKS       reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    FUNC            reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    INTERFACE       reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    MAP             reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    CHAN            reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)
    CHANNEL_OPERATOR reduce using rule 93 (alias_decl -> ID NORMAL_ASSIGNMENT type .)


state 132

    (96) var_decl -> VAR LPAREN var_spec RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    OR              reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    AND             reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    COMPARISON_OPERATOR reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    $end            reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    RPAREN          reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    RBRACKET        reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    INTEGER         reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    FLOAT           reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    STRING_LITERAL  reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    ID              reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    LPAREN          reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    NOT             reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_BOOL       reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_STRING     reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_INT        reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_INT8       reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_INT16      reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_INT32      reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_INT64      reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINT       reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINT8      reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINT16     reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINT32     reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINT64     reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_UINTPTR    reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_FLOAT32    reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_FLOAT64    reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_COMPLEX64  reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE_COMPLEX128 reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    CONST           reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    TYPE            reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    VAR             reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    LBRACKET        reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    STRUCT          reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    ASTERISKS       reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    FUNC            reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    INTERFACE       reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    MAP             reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    CHAN            reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)
    CHANNEL_OPERATOR reduce using rule 96 (var_decl -> VAR LPAREN var_spec RPAREN .)


state 133

    (98) var_spec -> identifier_list type NORMAL_ASSIGNMENT . expression_list
    (7) expression_list -> . expression
    (8) expression_list -> . expression expression_list
    (1) expression -> . expression ARITHMETIC_OPERATOR expression
    (2) expression -> . INTEGER
    (3) expression -> . FLOAT
    (4) expression -> . STRING_LITERAL
    (5) expression -> . ID
    (6) expression -> . LPAREN expression RPAREN
    (9) expression -> . expression OR expression
    (10) expression -> . expression AND expression
    (11) expression -> . NOT expression
    (12) expression -> . expression COMPARISON_OPERATOR expression
    (15) expression -> . arithmetical_assignment
    (16) expression -> . unary_assignment
    (17) expression -> . type
    (84) expression -> . declaration
    (13) arithmetical_assignment -> . ID ARITHMETICAL_ASSIGNMENT expression
    (14) unary_assignment -> . ID UNARY_ASSIGNMENT
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (81) declaration -> . const_decl
    (82) declaration -> . type_decl
    (83) declaration -> . var_decl
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (85) const_decl -> . CONST const_spec
    (86) const_decl -> . CONST LPAREN const_spec RPAREN
    (89) type_decl -> . TYPE type_spec
    (90) type_decl -> . TYPE LPAREN type_spec RPAREN
    (95) var_decl -> . VAR var_spec
    (96) var_decl -> . VAR LPAREN var_spec RPAREN
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    INTEGER         shift and go to state 2
    FLOAT           shift and go to state 3
    STRING_LITERAL  shift and go to state 4
    ID              shift and go to state 5
    LPAREN          shift and go to state 6
    NOT             shift and go to state 7
    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    CONST           shift and go to state 41
    TYPE            shift and go to state 42
    VAR             shift and go to state 43
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 10
    expression_list                shift and go to state 153
    expression                     shift and go to state 127
    arithmetical_assignment        shift and go to state 8
    unary_assignment               shift and go to state 9
    declaration                    shift and go to state 11
    type_lit                       shift and go to state 29
    const_decl                     shift and go to state 30
    type_decl                      shift and go to state 31
    var_decl                       shift and go to state 32
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 134

    (99) var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .

    ARITHMETIC_OPERATOR reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    OR              reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    AND             reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    COMPARISON_OPERATOR reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    $end            reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RPAREN          reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    RBRACKET        reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    INTEGER         reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    FLOAT           reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    STRING_LITERAL  reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    ID              reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    LPAREN          reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    NOT             reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_BOOL       reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_STRING     reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT        reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT8       reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT16      reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT32      reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT64      reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT       reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT8      reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT16     reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT32     reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT64     reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINTPTR    reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT32    reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT64    reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX64  reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX128 reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CONST           reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    TYPE            reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    VAR             reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    LBRACKET        reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    STRUCT          reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    ASTERISKS       reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    FUNC            reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    INTERFACE       reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    MAP             reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CHAN            reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)
    CHANNEL_OPERATOR reduce using rule 99 (var_spec -> identifier_list NORMAL_ASSIGNMENT expression_list .)


state 135

    (44) array_type -> LBRACKET expression RBRACKET type .

    ARITHMETIC_OPERATOR reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    OR              reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    AND             reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    COMPARISON_OPERATOR reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    $end            reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    RPAREN          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    RBRACKET        reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    INTEGER         reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    FLOAT           reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    STRING_LITERAL  reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    ID              reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    LPAREN          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    NOT             reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_BOOL       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_STRING     reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_INT        reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_INT8       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_INT16      reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_INT32      reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_INT64      reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINT       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINT8      reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINT16     reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINT32     reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINT64     reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_UINTPTR    reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_FLOAT32    reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_FLOAT64    reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_COMPLEX64  reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE_COMPLEX128 reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    CONST           reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    TYPE            reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    VAR             reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    LBRACKET        reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    STRUCT          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    ASTERISKS       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    FUNC            reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    INTERFACE       reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    MAP             reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    CHAN            reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    CHANNEL_OPERATOR reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    NORMAL_ASSIGNMENT reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    RBRACE          reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)
    COMMA           reduce using rule 44 (array_type -> LBRACKET expression RBRACKET type .)


state 136

    (47) struct_type -> STRUCT LBRACE field_decl RBRACE .

    ARITHMETIC_OPERATOR reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    OR              reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    AND             reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    COMPARISON_OPERATOR reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    $end            reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    RPAREN          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    RBRACKET        reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    INTEGER         reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    FLOAT           reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    STRING_LITERAL  reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    ID              reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    LPAREN          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    NOT             reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_BOOL       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_STRING     reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_INT        reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_INT8       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_INT16      reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_INT32      reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_INT64      reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINT       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINT8      reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINT16     reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINT32     reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINT64     reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_UINTPTR    reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_FLOAT32    reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_FLOAT64    reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_COMPLEX64  reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE_COMPLEX128 reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    CONST           reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    TYPE            reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    VAR             reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    LBRACKET        reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    STRUCT          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    ASTERISKS       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    FUNC            reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    INTERFACE       reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    MAP             reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    CHAN            reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    CHANNEL_OPERATOR reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    NORMAL_ASSIGNMENT reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    RBRACE          reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)
    COMMA           reduce using rule 47 (struct_type -> STRUCT LBRACE field_decl RBRACE .)


state 137

    (48) field_decl -> identifier_list type . string_lit
    (49) field_decl -> identifier_list type .
    (55) string_lit -> . STRING_LITERAL

    RBRACE          reduce using rule 49 (field_decl -> identifier_list type .)
    STRING_LITERAL  shift and go to state 139

    string_lit                     shift and go to state 154

state 138

    (50) field_decl -> embedded_field string_lit .

    RBRACE          reduce using rule 50 (field_decl -> embedded_field string_lit .)


state 139

    (55) string_lit -> STRING_LITERAL .

    RBRACE          reduce using rule 55 (string_lit -> STRING_LITERAL .)


state 140

    (54) embedded_field -> ASTERISKS ID .

    STRING_LITERAL  reduce using rule 54 (embedded_field -> ASTERISKS ID .)
    RBRACE          reduce using rule 54 (embedded_field -> ASTERISKS ID .)


state 141

    (62) result -> LPAREN type . RPAREN

    RPAREN          shift and go to state 155


state 142

    (64) parameters -> LPAREN parameter_list RPAREN .

    LPAREN          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_BOOL       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_STRING     reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_INT        reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_INT8       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_INT16      reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_INT32      reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_INT64      reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINT       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINT8      reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINT16     reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINT32     reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINT64     reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_UINTPTR    reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_FLOAT32    reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_FLOAT64    reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_COMPLEX64  reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE_COMPLEX128 reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    STRUCT          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    ASTERISKS       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    FUNC            reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    INTERFACE       reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    MAP             reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    CHAN            reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    CHANNEL_OPERATOR reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    ARITHMETIC_OPERATOR reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    OR              reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    AND             reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    COMPARISON_OPERATOR reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    $end            reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    INTEGER         reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    STRING_LITERAL  reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    ID              reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    NOT             reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    CONST           reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    TYPE            reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    VAR             reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    RBRACE          reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 64 (parameters -> LPAREN parameter_list RPAREN .)


state 143

    (66) parameter_list -> parameter_decl COMMA . parameter_list
    (65) parameter_list -> . parameter_decl
    (66) parameter_list -> . parameter_decl COMMA parameter_list
    (67) parameter_decl -> . identifier_list
    (68) parameter_decl -> . identifier_list type
    (69) parameter_decl -> . ELLIPSIS type
    (70) parameter_decl -> . identifier_list ELLIPSIS type
    (52) identifier_list -> . ID
    (53) identifier_list -> . ID COMMA identifier_list

    ELLIPSIS        shift and go to state 115
    ID              shift and go to state 63

    parameter_decl                 shift and go to state 113
    parameter_list                 shift and go to state 156
    identifier_list                shift and go to state 114

state 144

    (68) parameter_decl -> identifier_list type .

    COMMA           reduce using rule 68 (parameter_decl -> identifier_list type .)
    RPAREN          reduce using rule 68 (parameter_decl -> identifier_list type .)


state 145

    (70) parameter_decl -> identifier_list ELLIPSIS . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 157
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 146

    (69) parameter_decl -> ELLIPSIS type .

    COMMA           reduce using rule 69 (parameter_decl -> ELLIPSIS type .)
    RPAREN          reduce using rule 69 (parameter_decl -> ELLIPSIS type .)


state 147

    (71) interface_type -> INTERFACE LBRACE method_spec RBRACE .

    ARITHMETIC_OPERATOR reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    OR              reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    AND             reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    COMPARISON_OPERATOR reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    $end            reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    RPAREN          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    RBRACKET        reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    INTEGER         reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    FLOAT           reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    STRING_LITERAL  reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    ID              reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    LPAREN          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    NOT             reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_BOOL       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_STRING     reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_INT        reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_INT8       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_INT16      reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_INT32      reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_INT64      reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINT       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINT8      reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINT16     reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINT32     reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINT64     reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_UINTPTR    reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_FLOAT32    reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_FLOAT64    reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_COMPLEX64  reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE_COMPLEX128 reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    CONST           reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    TYPE            reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    VAR             reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    LBRACKET        reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    STRUCT          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    ASTERISKS       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    FUNC            reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    INTERFACE       reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    MAP             reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    CHAN            reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    CHANNEL_OPERATOR reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    NORMAL_ASSIGNMENT reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    RBRACE          reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)
    COMMA           reduce using rule 71 (interface_type -> INTERFACE LBRACE method_spec RBRACE .)


state 148

    (72) method_spec -> method_name signature .

    RBRACE          reduce using rule 72 (method_spec -> method_name signature .)


state 149

    (76) map_type -> MAP LBRACKET key_type RBRACKET . type
    (18) type -> . TYPE_BOOL
    (19) type -> . TYPE_STRING
    (20) type -> . TYPE_INT
    (21) type -> . TYPE_INT8
    (22) type -> . TYPE_INT16
    (23) type -> . TYPE_INT32
    (24) type -> . TYPE_INT64
    (25) type -> . TYPE_UINT
    (26) type -> . TYPE_UINT8
    (27) type -> . TYPE_UINT16
    (28) type -> . TYPE_UINT32
    (29) type -> . TYPE_UINT64
    (30) type -> . TYPE_UINTPTR
    (31) type -> . TYPE_FLOAT32
    (32) type -> . TYPE_FLOAT64
    (33) type -> . TYPE_COMPLEX64
    (34) type -> . TYPE_COMPLEX128
    (43) type -> . type_lit
    (35) type_lit -> . array_type
    (36) type_lit -> . slice_type
    (37) type_lit -> . struct_type
    (38) type_lit -> . pointer_type
    (39) type_lit -> . function_type
    (40) type_lit -> . interface_type
    (41) type_lit -> . map_type
    (42) type_lit -> . channel_type
    (44) array_type -> . LBRACKET expression RBRACKET type
    (45) slice_type -> . LBRACKET RBRACKET type
    (46) struct_type -> . STRUCT LBRACE RBRACE
    (47) struct_type -> . STRUCT LBRACE field_decl RBRACE
    (56) pointer_type -> . ASTERISKS type
    (57) function_type -> . FUNC signature
    (71) interface_type -> . INTERFACE LBRACE method_spec RBRACE
    (76) map_type -> . MAP LBRACKET key_type RBRACKET type
    (78) channel_type -> . CHAN type
    (79) channel_type -> . CHAN CHANNEL_OPERATOR type
    (80) channel_type -> . CHANNEL_OPERATOR CHAN type

    TYPE_BOOL       shift and go to state 12
    TYPE_STRING     shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_INT8       shift and go to state 15
    TYPE_INT16      shift and go to state 16
    TYPE_INT32      shift and go to state 17
    TYPE_INT64      shift and go to state 18
    TYPE_UINT       shift and go to state 19
    TYPE_UINT8      shift and go to state 20
    TYPE_UINT16     shift and go to state 21
    TYPE_UINT32     shift and go to state 22
    TYPE_UINT64     shift and go to state 23
    TYPE_UINTPTR    shift and go to state 24
    TYPE_FLOAT32    shift and go to state 25
    TYPE_FLOAT64    shift and go to state 26
    TYPE_COMPLEX64  shift and go to state 27
    TYPE_COMPLEX128 shift and go to state 28
    LBRACKET        shift and go to state 44
    STRUCT          shift and go to state 45
    ASTERISKS       shift and go to state 46
    FUNC            shift and go to state 47
    INTERFACE       shift and go to state 48
    MAP             shift and go to state 49
    CHAN            shift and go to state 50
    CHANNEL_OPERATOR shift and go to state 51

    type                           shift and go to state 158
    type_lit                       shift and go to state 29
    array_type                     shift and go to state 33
    slice_type                     shift and go to state 34
    struct_type                    shift and go to state 35
    pointer_type                   shift and go to state 36
    function_type                  shift and go to state 37
    interface_type                 shift and go to state 38
    map_type                       shift and go to state 39
    channel_type                   shift and go to state 40

state 150

    (80) channel_type -> CHANNEL_OPERATOR CHAN type .
    (78) channel_type -> CHAN type .

  ! reduce/reduce conflict for ARITHMETIC_OPERATOR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for OR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for AND resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for COMPARISON_OPERATOR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for $end resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for INTEGER resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for FLOAT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for ID resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for LPAREN resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for NOT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_BOOL resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_STRING resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_INT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_INT8 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_INT16 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_INT32 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_INT64 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINT8 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINT16 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINT32 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINT64 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_UINTPTR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_FLOAT32 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_FLOAT64 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_COMPLEX64 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE_COMPLEX128 resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for CONST resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for TYPE resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for VAR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for STRUCT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for ASTERISKS resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for FUNC resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for MAP resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for CHAN resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for CHANNEL_OPERATOR resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for NORMAL_ASSIGNMENT resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for RBRACE resolved using rule 78 (channel_type -> CHAN type .)
  ! reduce/reduce conflict for COMMA resolved using rule 78 (channel_type -> CHAN type .)
    ARITHMETIC_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    OR              reduce using rule 78 (channel_type -> CHAN type .)
    AND             reduce using rule 78 (channel_type -> CHAN type .)
    COMPARISON_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    $end            reduce using rule 78 (channel_type -> CHAN type .)
    RPAREN          reduce using rule 78 (channel_type -> CHAN type .)
    RBRACKET        reduce using rule 78 (channel_type -> CHAN type .)
    INTEGER         reduce using rule 78 (channel_type -> CHAN type .)
    FLOAT           reduce using rule 78 (channel_type -> CHAN type .)
    STRING_LITERAL  reduce using rule 78 (channel_type -> CHAN type .)
    ID              reduce using rule 78 (channel_type -> CHAN type .)
    LPAREN          reduce using rule 78 (channel_type -> CHAN type .)
    NOT             reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_BOOL       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_STRING     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT        reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT8       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT16      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT32      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_INT64      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT       reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT8      reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT16     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT32     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINT64     reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_UINTPTR    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_FLOAT32    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_FLOAT64    reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_COMPLEX64  reduce using rule 78 (channel_type -> CHAN type .)
    TYPE_COMPLEX128 reduce using rule 78 (channel_type -> CHAN type .)
    CONST           reduce using rule 78 (channel_type -> CHAN type .)
    TYPE            reduce using rule 78 (channel_type -> CHAN type .)
    VAR             reduce using rule 78 (channel_type -> CHAN type .)
    LBRACKET        reduce using rule 78 (channel_type -> CHAN type .)
    STRUCT          reduce using rule 78 (channel_type -> CHAN type .)
    ASTERISKS       reduce using rule 78 (channel_type -> CHAN type .)
    FUNC            reduce using rule 78 (channel_type -> CHAN type .)
    INTERFACE       reduce using rule 78 (channel_type -> CHAN type .)
    MAP             reduce using rule 78 (channel_type -> CHAN type .)
    CHAN            reduce using rule 78 (channel_type -> CHAN type .)
    CHANNEL_OPERATOR reduce using rule 78 (channel_type -> CHAN type .)
    NORMAL_ASSIGNMENT reduce using rule 78 (channel_type -> CHAN type .)
    RBRACE          reduce using rule 78 (channel_type -> CHAN type .)
    COMMA           reduce using rule 78 (channel_type -> CHAN type .)

  ! ARITHMETIC_OPERATOR [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! OR              [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! AND             [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! COMPARISON_OPERATOR [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! $end            [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! RPAREN          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! RBRACKET        [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! INTEGER         [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! FLOAT           [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! STRING_LITERAL  [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! ID              [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! LPAREN          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! NOT             [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_BOOL       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_STRING     [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_INT        [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_INT8       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_INT16      [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_INT32      [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_INT64      [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINT       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINT8      [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINT16     [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINT32     [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINT64     [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_UINTPTR    [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_FLOAT32    [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_FLOAT64    [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_COMPLEX64  [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE_COMPLEX128 [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! CONST           [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! TYPE            [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! VAR             [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! LBRACKET        [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! STRUCT          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! ASTERISKS       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! FUNC            [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! INTERFACE       [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! MAP             [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! CHAN            [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! CHANNEL_OPERATOR [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! NORMAL_ASSIGNMENT [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! RBRACE          [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]
  ! COMMA           [ reduce using rule 80 (channel_type -> CHANNEL_OPERATOR CHAN type .) ]


state 151

    (8) expression_list -> expression expression_list .

    ARITHMETIC_OPERATOR reduce using rule 8 (expression_list -> expression expression_list .)
    OR              reduce using rule 8 (expression_list -> expression expression_list .)
    AND             reduce using rule 8 (expression_list -> expression expression_list .)
    COMPARISON_OPERATOR reduce using rule 8 (expression_list -> expression expression_list .)
    $end            reduce using rule 8 (expression_list -> expression expression_list .)
    RPAREN          reduce using rule 8 (expression_list -> expression expression_list .)
    RBRACKET        reduce using rule 8 (expression_list -> expression expression_list .)
    INTEGER         reduce using rule 8 (expression_list -> expression expression_list .)
    FLOAT           reduce using rule 8 (expression_list -> expression expression_list .)
    STRING_LITERAL  reduce using rule 8 (expression_list -> expression expression_list .)
    ID              reduce using rule 8 (expression_list -> expression expression_list .)
    LPAREN          reduce using rule 8 (expression_list -> expression expression_list .)
    NOT             reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_BOOL       reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_STRING     reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_INT        reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_INT8       reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_INT16      reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_INT32      reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_INT64      reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINT       reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINT8      reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINT16     reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINT32     reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINT64     reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_UINTPTR    reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_FLOAT32    reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_FLOAT64    reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_COMPLEX64  reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE_COMPLEX128 reduce using rule 8 (expression_list -> expression expression_list .)
    CONST           reduce using rule 8 (expression_list -> expression expression_list .)
    TYPE            reduce using rule 8 (expression_list -> expression expression_list .)
    VAR             reduce using rule 8 (expression_list -> expression expression_list .)
    LBRACKET        reduce using rule 8 (expression_list -> expression expression_list .)
    STRUCT          reduce using rule 8 (expression_list -> expression expression_list .)
    ASTERISKS       reduce using rule 8 (expression_list -> expression expression_list .)
    FUNC            reduce using rule 8 (expression_list -> expression expression_list .)
    INTERFACE       reduce using rule 8 (expression_list -> expression expression_list .)
    MAP             reduce using rule 8 (expression_list -> expression expression_list .)
    CHAN            reduce using rule 8 (expression_list -> expression expression_list .)
    CHANNEL_OPERATOR reduce using rule 8 (expression_list -> expression expression_list .)


state 152

    (88) const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .

    ARITHMETIC_OPERATOR reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    OR              reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    AND             reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    COMPARISON_OPERATOR reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    $end            reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RPAREN          reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RBRACKET        reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    INTEGER         reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    FLOAT           reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    STRING_LITERAL  reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    ID              reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    LPAREN          reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    NOT             reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_BOOL       reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_STRING     reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT        reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT8       reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT16      reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT32      reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT64      reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT       reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT8      reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT16     reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT32     reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT64     reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINTPTR    reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT32    reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT64    reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX64  reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX128 reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CONST           reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE            reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    VAR             reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    LBRACKET        reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    STRUCT          reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    ASTERISKS       reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    FUNC            reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    INTERFACE       reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    MAP             reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CHAN            reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CHANNEL_OPERATOR reduce using rule 88 (const_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)


state 153

    (98) var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .

    ARITHMETIC_OPERATOR reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    OR              reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    AND             reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    COMPARISON_OPERATOR reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    $end            reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RPAREN          reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    RBRACKET        reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    INTEGER         reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    FLOAT           reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    STRING_LITERAL  reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    ID              reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    LPAREN          reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    NOT             reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_BOOL       reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_STRING     reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT        reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT8       reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT16      reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT32      reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_INT64      reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT       reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT8      reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT16     reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT32     reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINT64     reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_UINTPTR    reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT32    reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_FLOAT64    reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX64  reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE_COMPLEX128 reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CONST           reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    TYPE            reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    VAR             reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    LBRACKET        reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    STRUCT          reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    ASTERISKS       reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    FUNC            reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    INTERFACE       reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    MAP             reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CHAN            reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)
    CHANNEL_OPERATOR reduce using rule 98 (var_spec -> identifier_list type NORMAL_ASSIGNMENT expression_list .)


state 154

    (48) field_decl -> identifier_list type string_lit .

    RBRACE          reduce using rule 48 (field_decl -> identifier_list type string_lit .)


state 155

    (62) result -> LPAREN type RPAREN .

    ARITHMETIC_OPERATOR reduce using rule 62 (result -> LPAREN type RPAREN .)
    OR              reduce using rule 62 (result -> LPAREN type RPAREN .)
    AND             reduce using rule 62 (result -> LPAREN type RPAREN .)
    COMPARISON_OPERATOR reduce using rule 62 (result -> LPAREN type RPAREN .)
    $end            reduce using rule 62 (result -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 62 (result -> LPAREN type RPAREN .)
    RBRACKET        reduce using rule 62 (result -> LPAREN type RPAREN .)
    INTEGER         reduce using rule 62 (result -> LPAREN type RPAREN .)
    FLOAT           reduce using rule 62 (result -> LPAREN type RPAREN .)
    STRING_LITERAL  reduce using rule 62 (result -> LPAREN type RPAREN .)
    ID              reduce using rule 62 (result -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 62 (result -> LPAREN type RPAREN .)
    NOT             reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_BOOL       reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_STRING     reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_INT        reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_INT8       reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_INT16      reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_INT32      reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_INT64      reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINT       reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINT8      reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINT16     reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINT32     reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINT64     reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_UINTPTR    reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_FLOAT32    reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_FLOAT64    reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_COMPLEX64  reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE_COMPLEX128 reduce using rule 62 (result -> LPAREN type RPAREN .)
    CONST           reduce using rule 62 (result -> LPAREN type RPAREN .)
    TYPE            reduce using rule 62 (result -> LPAREN type RPAREN .)
    VAR             reduce using rule 62 (result -> LPAREN type RPAREN .)
    LBRACKET        reduce using rule 62 (result -> LPAREN type RPAREN .)
    STRUCT          reduce using rule 62 (result -> LPAREN type RPAREN .)
    ASTERISKS       reduce using rule 62 (result -> LPAREN type RPAREN .)
    FUNC            reduce using rule 62 (result -> LPAREN type RPAREN .)
    INTERFACE       reduce using rule 62 (result -> LPAREN type RPAREN .)
    MAP             reduce using rule 62 (result -> LPAREN type RPAREN .)
    CHAN            reduce using rule 62 (result -> LPAREN type RPAREN .)
    CHANNEL_OPERATOR reduce using rule 62 (result -> LPAREN type RPAREN .)
    NORMAL_ASSIGNMENT reduce using rule 62 (result -> LPAREN type RPAREN .)
    RBRACE          reduce using rule 62 (result -> LPAREN type RPAREN .)
    COMMA           reduce using rule 62 (result -> LPAREN type RPAREN .)


state 156

    (66) parameter_list -> parameter_decl COMMA parameter_list .

    RPAREN          reduce using rule 66 (parameter_list -> parameter_decl COMMA parameter_list .)


state 157

    (70) parameter_decl -> identifier_list ELLIPSIS type .

    COMMA           reduce using rule 70 (parameter_decl -> identifier_list ELLIPSIS type .)
    RPAREN          reduce using rule 70 (parameter_decl -> identifier_list ELLIPSIS type .)


state 158

    (76) map_type -> MAP LBRACKET key_type RBRACKET type .

    ARITHMETIC_OPERATOR reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    OR              reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    AND             reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    COMPARISON_OPERATOR reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    $end            reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    RPAREN          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    RBRACKET        reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    INTEGER         reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    FLOAT           reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    STRING_LITERAL  reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    ID              reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    LPAREN          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    NOT             reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_BOOL       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_STRING     reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_INT        reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_INT8       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_INT16      reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_INT32      reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_INT64      reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINT       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINT8      reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINT16     reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINT32     reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINT64     reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_UINTPTR    reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_FLOAT32    reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_FLOAT64    reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_COMPLEX64  reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE_COMPLEX128 reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    CONST           reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    TYPE            reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    VAR             reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    LBRACKET        reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    STRUCT          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    ASTERISKS       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    FUNC            reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    INTERFACE       reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    MAP             reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    CHAN            reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    CHANNEL_OPERATOR reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    NORMAL_ASSIGNMENT reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    RBRACE          reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)
    COMMA           reduce using rule 76 (map_type -> MAP LBRACKET key_type RBRACKET type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 59 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 63 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_BOOL in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_STRING in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT8 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT16 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT32 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT64 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT8 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT16 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT32 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT64 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINTPTR in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT32 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT64 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX64 in state 77 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX128 in state 77 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 77 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 77 resolved as shift
WARNING: shift/reduce conflict for ASTERISKS in state 77 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 77 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 77 resolved as shift
WARNING: shift/reduce conflict for MAP in state 77 resolved as shift
WARNING: shift/reduce conflict for CHAN in state 77 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OPERATOR in state 77 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 84 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 85 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 86 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 87 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 88 resolved as shift
WARNING: shift/reduce conflict for ARITHMETIC_OPERATOR in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OPERATOR in state 127 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 127 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 127 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 127 resolved as shift
WARNING: shift/reduce conflict for NOT in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_BOOL in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_STRING in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT8 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT16 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT32 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_INT64 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT8 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT16 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT32 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINT64 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_UINTPTR in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT32 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_FLOAT64 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX64 in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE_COMPLEX128 in state 127 resolved as shift
WARNING: shift/reduce conflict for CONST in state 127 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 127 resolved as shift
WARNING: shift/reduce conflict for VAR in state 127 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 127 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 127 resolved as shift
WARNING: shift/reduce conflict for ASTERISKS in state 127 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 127 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 127 resolved as shift
WARNING: shift/reduce conflict for MAP in state 127 resolved as shift
WARNING: shift/reduce conflict for CHAN in state 127 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OPERATOR in state 127 resolved as shift
WARNING: reduce/reduce conflict in state 150 resolved using rule (channel_type -> CHAN type)
WARNING: rejected rule (channel_type -> CHANNEL_OPERATOR CHAN type) in state 150
