
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARITHMETICAL_ASSIGNMENT ARITHMETIC_OPERATOR ASSIGNMENT_OPERATOR BITWISE_OPERATOR BREAK CASE CHAN COLON COMMA COMMENT COMPARISON_OPERATOR CONST CONTINUE DEFAULT DEFER DELIMITER ELLIPSIS ELSE FALLTHROUGH FLOAT FOR FUNC GO GOTO ID IF IMPORT INTEGER INTERFACE LBRACE LBRACKET LPAREN MAP NOT OR PACKAGE RANGE RBRACE RBRACKET RETURN RPAREN SELECT SEMICOLON STRING_LITERAL STRUCT SWITCH TYPE TYPE_BOOL TYPE_COMPLEX128 TYPE_COMPLEX64 TYPE_FLOAT32 TYPE_FLOAT64 TYPE_INT TYPE_INT16 TYPE_INT32 TYPE_INT64 TYPE_INT8 TYPE_STRING TYPE_UINT TYPE_UINT16 TYPE_UINT32 TYPE_UINT64 TYPE_UINT8 TYPE_UINTPTR UNARY_ASSIGNMENT VARexpression : expression ARITHMETIC_OPERATOR expression\n    expression : INTEGER\n                  | FLOAT\n                  | STRING_LITERAL\n                  | ID\n                  | LPAREN expression RPAREN\n    expression : expression OR expression\n                  | expression AND expression\n    expression : NOT expression\n    expression : expression COMPARISON_OPERATOR expression\n    arithmetical_assignment : ID ARITHMETICAL_ASSIGNMENT expression \n    unary_assignment : ID UNARY_ASSIGNMENT\n    expression : arithmetical_assignment\n                  | unary_assignment\n    '
    
_lr_action_items = {'INTEGER':([0,6,7,10,11,12,13,14,],[2,2,2,2,2,2,2,2,]),'FLOAT':([0,6,7,10,11,12,13,14,],[3,3,3,3,3,3,3,3,]),'STRING_LITERAL':([0,6,7,10,11,12,13,14,],[4,4,4,4,4,4,4,4,]),'ID':([0,6,7,10,11,12,13,14,],[5,5,5,5,5,5,5,5,]),'LPAREN':([0,6,7,10,11,12,13,14,],[6,6,6,6,6,6,6,6,]),'NOT':([0,6,7,10,11,12,13,14,],[7,7,7,7,7,7,7,7,]),'$end':([1,2,3,4,5,8,9,15,17,18,19,20,21,22,23,],[0,-2,-3,-4,-5,-13,-14,-12,-9,-1,-7,-8,-10,-11,-6,]),'ARITHMETIC_OPERATOR':([1,2,3,4,5,8,9,15,16,17,18,19,20,21,22,23,],[10,-2,-3,-4,-5,-13,-14,-12,10,10,10,10,10,10,10,-6,]),'OR':([1,2,3,4,5,8,9,15,16,17,18,19,20,21,22,23,],[11,-2,-3,-4,-5,-13,-14,-12,11,11,11,11,11,11,11,-6,]),'AND':([1,2,3,4,5,8,9,15,16,17,18,19,20,21,22,23,],[12,-2,-3,-4,-5,-13,-14,-12,12,12,12,12,12,12,12,-6,]),'COMPARISON_OPERATOR':([1,2,3,4,5,8,9,15,16,17,18,19,20,21,22,23,],[13,-2,-3,-4,-5,-13,-14,-12,13,13,13,13,13,13,13,-6,]),'RPAREN':([2,3,4,5,8,9,15,16,17,18,19,20,21,22,23,],[-2,-3,-4,-5,-13,-14,-12,23,-9,-1,-7,-8,-10,-11,-6,]),'ARITHMETICAL_ASSIGNMENT':([5,],[14,]),'UNARY_ASSIGNMENT':([5,],[15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,6,7,10,11,12,13,14,],[1,16,17,18,19,20,21,22,]),'arithmetical_assignment':([0,6,7,10,11,12,13,14,],[8,8,8,8,8,8,8,8,]),'unary_assignment':([0,6,7,10,11,12,13,14,],[9,9,9,9,9,9,9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression ARITHMETIC_OPERATOR expression','expression',3,'p_binary_operators','syntax_analysis.py',7),
  ('expression -> INTEGER','expression',1,'p_expression','syntax_analysis.py',21),
  ('expression -> FLOAT','expression',1,'p_expression','syntax_analysis.py',22),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','syntax_analysis.py',23),
  ('expression -> ID','expression',1,'p_expression','syntax_analysis.py',24),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','syntax_analysis.py',25),
  ('expression -> expression OR expression','expression',3,'p_logical_operators','syntax_analysis.py',33),
  ('expression -> expression AND expression','expression',3,'p_logical_operators','syntax_analysis.py',34),
  ('expression -> NOT expression','expression',2,'p_negation_operator','syntax_analysis.py',42),
  ('expression -> expression COMPARISON_OPERATOR expression','expression',3,'p_comparison_operators','syntax_analysis.py',50),
  ('arithmetical_assignment -> ID ARITHMETICAL_ASSIGNMENT expression','arithmetical_assignment',3,'p_arithmetical_assignments','syntax_analysis.py',66),
  ('unary_assignment -> ID UNARY_ASSIGNMENT','unary_assignment',2,'p_unary_assignment','syntax_analysis.py',69),
  ('expression -> arithmetical_assignment','expression',1,'p_assign_exp','syntax_analysis.py',73),
  ('expression -> unary_assignment','expression',1,'p_assign_exp','syntax_analysis.py',74),
]
